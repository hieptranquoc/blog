<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2017-05-24T08:25:13+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10 mẹo quản lý thời gian dành cho người quản lý bận rộn]]></title>
    <link href="http://blog.teracy.com/2017/05/24/10-meo-quan-ly-thoi-gian-cho-nguoi-quan-ly-ban-ron/"/>
    <updated>2017-05-24T09:04:00+00:00</updated>
    <id>http://blog.teracy.com/2017/05/24/10-meo-quan-ly-thoi-gian-cho-nguoi-quan-ly-ban-ron</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/03/29/time-board.jpg" title="CREDIT: Getty Images" ></p>

<p>Thời gian là tài nguyên không thể làm mới lại được, do đó nó là một trong những thứ quý giá nhất mà chúng ta có được.</p>

<p>Là một chủ doanh nghiệp, có lẽ bạn đang phải đảm nhiệm nhiều trọng trách để mọi việc được hoàn thành tốt. Chúng sẽ làm bạn rất dễ bị xao lãng, mất tập trung và lãng phí thời gian quí giá vào những việc không quan trọng. Dưới đây là 10 mẹo rất hữu ích giúp bạn quản lý được thời gian của mình.</p>

<!-- more -->


<h2>1. Cho mình thời hạn <em>cực ngắn</em>&hellip; và tuân thủ theo nó.</h2>

<p>Hãy nhớ cụm từ then chốt này của <a href="https://en.wikipedia.org/wiki/Sheryl_Sandberg">Sheryl Sandberg</a> <em>(COO của Facebook)</em>: <em>Làm xong còn tốt hơn là hoàn hảo</em>. Nếu bạn là một người cầu toàn, thì chắc chắn rằng bạn sẽ nhận được kết quả công việc theo cách của bạn. Bạn sẽ không làm qua loa (đó không phải tính cách của bạn?), bạn sẽ làm cho ra kết quả. Hãy cho mình thời hạn ngắn hơn bình thường và <em>tuân thủ theo nó</em>.</p>

<h2>2. Ghi các việc chính cần làm vào thời khóa biểu.</h2>

<p>Đừng đợi đến khi có thời gian mới hoàn thành những việc quan trọng. Nếu như thời gian biểu của bạn còn khoảng trống, cũng giống như với nước vậy, những việc không quan trọng sẽ tự động bị xen vào đó (xem phần <a href="#section-7">7</a>).</p>

<h2>3. Không làm nhiều việc cùng một lúc.</h2>

<p>Tất cả các nghiên cứu đã chỉ ra rằng làm nhiều việc cùng một lúc (multi-tasking) là không hiệu quả (Hãy tin tôi đi &ndash; bạn có lẽ không có thời gian để tìm hiểu đâu). Bạn sẽ làm hiêụ quả và năng suất hơn nếu bạn chỉ tập trung duy nhất một việc vào một thời điểm.</p>

<h2>4. Ủy nhiệm tất cả những việc ngoài khả năng của bạn cho người khác có khả năng hơn.</h2>

<p>Tập trung thời gian và năng lượng của bạn vào những việc có lợi ích hơn. Nếu bạn không biết làm thế nào để ủy nhiệm việc cho người khác, hãy đọc <a href="http://www.inc.com/ariana-ayu/how-and-what-to-delegate.html">Ủy nhiệm những gì và như thế nào</a> rồi hiện thực nó và làm những việc quan trọng khác.</p>

<h2>5. Có một đội ngũ hiệu suất cao và trao quyền cho người làm việc tốt nhất.</h2>

<p>Quản lí vi mô thì thường không thoải mái cho cả bạn và những người khác có liên quan. Đừng làm vậy. Hãy thuê những người mà thông minh hơn, giỏi hơn, nhanh hơn và nhiều kinh nghiệm hơn bạn và bạn sẽ thấy hài lòng.</p>

<h2>6. Chia thời khóa biểu ra nhiều phần hoặc theo ngày.</h2>

<p>Thứ hai là ngày tôi quản trị và xây dựng nghiệp vụ &ndash; nó giúp tôi biết được tôi cần phải tập trung ở đâu và việc gì là quan trọng nhất cần phải làm vào hôm đó. Những việc này đều đã được phân bổ trong công việc và trong tuần làm việc của tôi. Bạn có thể dễ dàng &ldquo;phân khúc&rdquo; thời khóa như tôi vậy.</p>

<h2><a id="section-7"></a>7. Để những việc tốn thời gian vào cuối ngày.</h2>

<p>Những việc tốn thời gian (mà vẫn cần phải làm) như: mạng xã hội, email, etc.. nên để vào cuối ngày. Làm như thế sẽ giúp bạn không bị lãng phí thời gian quý giá và năng suất của mình vào những thứ không có lợi ích, không quan trọng hoặc không nằm trong khả năng của mình.</p>

<h2>8. Nếu gặp khó khăn vào việc gì đó mà không có tiến triển gì, hãy bỏ qua hoặc tìm sự giúp đỡ.</h2>

<p>Đừng tự đâm đầu vào tường. Có lẽ bạn chỉ cần ngồi một mình thư giãn thôi và/hoặc thay đổi cách giải quyết vấn đề.</p>

<h2>9. Hãy tìm một người huấn luyện hoặc cố vấn để dẫn dắt mình.</h2>

<p>Một người huấn luyện hoặc cố vấn tốt sẽ luôn giữ cho bạn có tinh thần trách nhiệm, hỗ trợ bạn khi cần thiết và giúp bạn thấy được những lúc bạn đang tự huỷ hoại chính bản thân mình như thế nào. Chúng ta ai cũng cần sự giúp đỡ, không ai trong chúng ta có thể tự thân đạt được 100% mục đích của mình. Hãy tìm người mà bạn tin tưởng, người mà sẽ dẫn dắt VÀ thúc đẩy khi bạn cần.</p>

<h2>10. Thiết lập thói quen hằng ngày tùy vào cơ địa của bạn.</h2>

<p>Hãy tự chăm sóc bản thân mình thật tốt, cả thể xác lẫn tinh thần. Nếu không, bạn sẽ không làm gì tốt được.</p>

<p>Dịch từ: <a href="https://www.inc.com/ariana-ayu/10-time-management-tips-for-busy-executives.html">10 Time-Management Tips for Busy Executives</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Làm thế nào để tạo ra văn hoá làm việc từ xa có thể tự tồn tại]]></title>
    <link href="http://blog.teracy.com/2017/05/21/lam-the-nao-de-tao-ra-van-hoa-lam-viec-tu-xa-co-the-tu-ton-tai/"/>
    <updated>2017-05-21T01:14:00+00:00</updated>
    <id>http://blog.teracy.com/2017/05/21/lam-the-nao-de-tao-ra-van-hoa-lam-viec-tu-xa-co-the-tu-ton-tai</id>
    <content type="html"><![CDATA[<p>Sự tồn tại hay diệt vong của đội ngũ làm việc từ xa phụ thuộc vào khả năng giao tiếp và phối hợp; nếu ngay từ đầu các nhân viên không hoà vào văn hoá của công ty, thì cơ hội để họ tiếp tục theo đuổi và tận tụy với công việc sẽ là rất nhỏ. Tuy nhiên, một nền văn hoá thực sự gắn kết và độc đáo có thể sẽ khiến cho các nhân viên (làm việc từ xa hoặc tại chỗ) trung thành, năng suất hơn và quan trọng nhất là khiến họ tự hào về công việc đang làm.</p>

<p>Trong khi các nhân viên làm việc tại chỗ có thể chỉ cần tận dụng 5 phút giải lao cạnh máy nước lạnh để nói chuyện hoặc tán gẫu với nhau, thì việc định hình và duy trì văn hoá làm việc từ xa đòi hỏi nhiều nỗ lực hơn. Tạo dựng sự tương tác dễ dàng giữa các nhân viên là nhiệm vụ bạn cần làm, nhưng bằng cách nào?</p>

<!-- more -->


<p>Nhìn lại <a href="http://process.st/">Process Street</a>, nơi chúng tôi điều hành một con tàu từ xa, ở đó chúng tôi lựa chọn một hoặc hai điều để tạo dựng một nền văn hoá từ xa bền vững. Điều hay nhất của những nền văn hoá này là chúng có thể tự duy trì &ndash; chỉ cần thiết lập chúng và bổ sung tiểu tiết theo yêu cầu. Để xây dựng nền văn hoá này các đội ngũ làm việc từ xa chỉ cần đạt được một hoặc hai nhân tố then chốt, nhưng ở đây tôi sẽ chia sẻ 4 điều được coi là cốt lõi của sự thành công.</p>

<p>Vì vậy, nếu bạn lần đầu thuê các nhân viên làm việc từ xa, cảm thấy lo lắng vì thiếu sự tương tác và khoảng cách giữa nhân viên và công ty, hãy tĩnh tâm và thật thoải mái. Chúng tôi đã thấu hiểu hoàn cảnh của bạn.</p>

<h1>Làm việc từ xa là linh hoạt; bạn cũng nên như vậy</h1>

<p><img class="center" src="http://blog.teracy.com/images/2017/05/21/lam-viec-tu-xa.png" title="làm việc từ xa linh hoạt" ></p>

<p>Các nhân viên làm việc từ xa được hưởng lợi từ sự linh hoạt; việc áp dụng một khung giờ làm việc mệnh lệnh đối với họ sẽ là một thảm hoạ. Thay vì điều đó, bạn hãy khuyến khích nhân viên tự đưa ra khoảng thời gian trong ngày giúp họ có thể làm việc năng suất nhất.</p>

<p>Ví dụ, một số người làm việc như những con cú đêm, và hiệu quả tốt nhất là làm việc vào buổi sáng và tối. Hãy để cho những người này được phép làm việc 4 tiếng buổi sáng và 4 tiếng buổi tối để họ cống hiến năng suất nhất, thay vì ép họ phải làm việc theo giờ hành chính. <a href="https://open.buffer.com/how-much-do-you-work-without-set-hours-a-buffer-case-study/">Buffer</a> là ví dụ điển hình khi họ đưa ra chính sách rằng nhân viên có thể làm việc vào giờ nào họ cảm thấy thoải mái nhất.</p>

<p>Điều này không chỉ khiến nhân viên thấy vui vẻ với công việc mà còn giúp họ hoàn thành công việc tốt hơn và tạo môi trường nuôi dưỡng nền văn hoá làm việc từ xa.</p>

<h1>Giao tiếp tập trung</h1>

<p>Nền văn hoá từ xa sẽ không thể được nuôi dưỡng &ndash; đơn phương tồn tại &ndash; nếu quá trình giao tiếp diễn ra dàn trải bằng các tài khoản email và 5 ứng dụng khác nhau. Nếu các nhân viên trong đội không biết người khác đang nói về điều gì, hoặc không thể bình luận do đã xoá đi một chuỗi dài email, thì toàn bộ dự án có thể sẽ đổ bể.</p>

<p>Tuy nhiên, nếu bạn khiến giao tiếp tập trung bằng cách đảm bảo mọi thứ chuyển tiếp chỉ trong 1 hoặc 2 ứng dụng, thì gần như các thành viên trong đội đều nắm rõ tình hình. Đây là bí quyết đối với các đội làm việc từ xa với các múi giờ khác nhau, bởi vì chúng sẽ gần như xoá đi vấn đề nảy sinh do giao tiếp chậm trễ giữa châu Mỹ và châu Âu &ndash; không bỏ sót bất kỳ điều gì (thậm chí những mảng lớn tin nhắn tới nhân viên offline) bởi vì mọi người đều biết cần phải làm thế nào để nắm được tình hình.</p>

<p>Đây cũng chính là phương thức để chiến đấu với nguy cơ thực tế đó là sự cô lập, mà tất cả các nhân viên (các đội) làm việc từ xa đều phải đối mặt; nền văn hoá làm việc từ xa sẽ tiếp tục được nuôi dưỡng khi tránh được việc tự bị phá huỷ. Tại sao không áp dụng khi <a href="https://sandwichvideo.com/">Sandwich Video</a> đã có một video để chứng minh cho điều này?</p>

<iframe width="700" height="394" src="https://www.youtube.com/embed/B6zVzWU95Sw" frameborder="0" allowfullscreen></iframe>


<h1>Thêm gia vị cho văn hoá</h1>

<p><img class="center" src="http://blog.teracy.com/images/2017/05/21/them-gia-vi-cho-van-hoa.png" title="Thêm gia vị cho văn hoá của bạn" ></p>

<p>Văn hoá sẽ tự tồn tại nếu những người trong cuộc cảm thấy có điều gì đó đáng duy trì. Nếu quy trình xây dựng văn hoá công ty chỉ là &ldquo;giao tiếp, đảm bảo mọi người thấy được các tin nhắn có liên quan tới họ&rdquo;, thì nó giống như nói với ai đó chỉ quan tâm tới điều giản đơn. Nó không có tác dụng, vì thế bạn cần làm nhiều thứ hơn chứ không đơn thuần là đảm bảo việc chỉ cho mọi người cách giao tiếp với nhau.</p>

<p>Bạn cần phải bổ sung sức sống cho văn hoá công ty, và cách tốt nhất là lôi cuốn được sự tham gia của toàn thể công ty, thu hút cá tính của họ chứ không chỉ là thảo luận công việc. Tạo dựng sự cạnh tranh hữu nghị trên cơ sở lợi ích chung hoặc lên lịch cho các sự kiện chung sẽ giúp tạo sự gắn kết giữa các nhân viên và trao đổi câu chuyện hài hước ngoài giờ làm.</p>

<p>Ví dụ, tại Process Street, hiện chúng tôi đang tiến hành hai cuộc thi, và tương lai sẽ thực hiện thêm. Chúng tôi là những người khác thường (geeky) không hề ngại ngùng, nên việc tổ chức cuộc thi Heartstone cho toàn thể công ty sẽ phù hợp với văn hoá của chúng tôi; một trò chơi bài tập thể trong đó bạn sẽ đấu với những người chơi khác. Để đảm bảo cuộc thi không bị gian lận bởi chủ nghĩa kinh nghiệm, chúng tôi cũng giới hạn việc lựa chọn quân bài đối với cỗ bài sẵn có khi chúng tôi có cả những người chơi mới và lâu năm trong đội của mình.</p>

<p>Nếu đội của bạn không giống kiểu thích trò chơi, bạn có thể tạo ra cuộc thi về các chủ đề khác. Chúng tôi cũng thực hiện cuộc thi giả tưởng để xem ai có thể tìm ra bộ phim hay nhất và tồi nhất. Mỗi tuần, các ứng viên sẽ post một phim lên kênh Slack chung, để sau đó chúng tôi cùng xem và đánh giá chất lượng, chúng tôi đã đánh dấu lưu ý một số như The Beast Must Die, Shivers và (gần đây nhất) là piranha Sharks. Mặc dù đó không phải là những phim hay nhất đáng xem, nhưng hoạt động này giúp chúng tôi xích lại gần nhau là một đội và là điều chúng tôi có thể thảo luận và gắn kết ngoài công việc.</p>

<h1>Khơi mào </h1>

<p><img class="center" src="http://blog.teracy.com/images/2017/05/21/khoi-mao.png" title="Khơi mào" ></p>

<p>Sự hoà nhập là thứ mà bạn vừa phải bỏ công sức xây đắp, và (sau đó) vừa là thứ mà gần như bạn có thể để văn hoá xây đắp cho mình. Hãy đảm bảo <a href="https://www.getmailbird.com/supercharge-remote-teams-communications/">quy trình tạo sự hoà nhập</a> cho nhân viên là bền vững bằng cách giới nhiệu nhân viên mới với các thành viên khác trong đội và khuyến khích đội ngũ cũ cởi mở. Đừng khiến cho những cuộc trò chuyện bị ép buộc, mà hãy xây dựng nền tảng then chốt nhằm đảm bảo cho những nhân viên làm việc từ xa vừa biết phải liên hệ với ai khi gặp vấn đề vừa cảm thấy thoải mái khi làm điều đó.</p>

<p>Khi nền văn hoá công ty được thiết lập bền vững, nó sẽ thực sự góp phần lớn cho quy trình tạo sự hoà nhập nhân viên, bởi vì các cuộc thi, sự kiện và tinh thần của đội sẽ gắn kết mọi nhân viên mới vào văn hoá công ty một cách tự nhiên. Bạn sẽ vẫn cần phải giới thiệu họ với đội của mình nhưng với <a href="https://www.getmailbird.com/supercharge-remote-teams-communications/">nền văn hoá giao tiếp</a>, các cuộc thi và sự phối hợp sẽ giúp những người mới hoà nhập với công ty vì mục đích chung.</p>

<p>Bạn đã có được bí quyết để xây dựng văn hoá có thể tự tồn tại trong công ty, thậm chí khi đội ngũ nhân viên làm việc từ xa. Mặc dù cần một quy trình để thiết lập một nền văn hoá hiệu quả, nhưng kết quả mang lại là điều hiển nhiên. Làm cho nhân viên của bạn trung thành, năng suất hơn và trên hết là hạnh phúc với công việc họ đang làm, bất kể là làm việc từ xa hay không, bạn sẽ thấy rằng bất kể nền văn hoá bạn xây dựng điên rồ cỡ nào, nó cũng sẽ đem lại hiệu quả tích cực.</p>

<p>Dịch từ: <a href="https://outsite.co/blog/self-sustaining-remote-culture/">HOW TO CREATE A SELF-SUSTAINING REMOTE CULTURE</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to set up CI/CD system for Next.js with Docker on gitlab-ci, travis-ci, Heroku and Kubernetes]]></title>
    <link href="http://blog.teracy.com/2017/05/09/how-to-set-up-ci-cd-system-for-next.js-with-docker-on-gitlab-ci-travis-ci-heroku-and-kubernetes/"/>
    <updated>2017-05-09T01:14:00+00:00</updated>
    <id>http://blog.teracy.com/2017/05/09/how-to-set-up-ci-cd-system-for-next.js-with-docker-on-gitlab-ci-travis-ci-heroku-and-kubernetes</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/05/09/nextjs-hello-world-travis-ci.png" title="travis-ci builds" ></p>

<p>Setting up a CI/CD (continuous integration/continuous delivery) system for Docker applications to be
deployed on staging and production environment with scalability and high availability is not hard.
It took a while to get it done properly, and today I will show you how to set up that system properly
with a Next.js application as an example. You can apply the same process for all other kinds of
Docker applications. So let&rsquo;s get started.</p>

<!-- more -->


<h1>Prerequisites</h1>

<p>Newcomers to Docker ecosystem can enjoy this tutorial.</p>

<p>Experienced ones to Docker ecosystem can review this for your approach and suggest what we can do for
a better approach.</p>

<p>If you know these systems below, that&rsquo;s great and easier to follow this tutorial:</p>

<ul>
<li>Docker</li>
<li>gitlab-ci, travis-ci as CI/CD system</li>
<li>Heroku as a PaaS (Platform as a Service)</li>
<li>Kubernetes (Production-Grade Container Scheduling and Management)</li>
<li>Helm (The Kubernetes Package Manager)</li>
</ul>


<h1>Getting Started</h1>

<p>First, you need to have Docker installed on your system. To make it easier for all platforms (Linux,
macOS, Windows), we&rsquo;re going to use <code>teracy-dev</code> for local dev environment.</p>

<p>To know why <code>teracy-dev</code>, see the blog <a href="http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/">Teracy-dev &ndash; the Only Truly Universal Productive Development Platform With Docker on macOS, Linux and Windows</a>.</p>

<p>You&rsquo;re not required to use teracy-dev, however, using it should help you follow this tutorial more easily.</p>

<p>We&rsquo;re going to use <a href="https://github.com/acme101/nextjs-hello-world">https://github.com/acme101/nextjs-hello-world</a> as an example project.</p>

<p><code>acme101</code> is a sample github organization which has all the best practices from <code>teracy-dev</code> applied
for organizations, follow it and you can&rsquo;t get lost.</p>

<p><code>nextjs-hello-world</code> is the simplest seed code for Next.js applications with Docker workflow, CI/CD system:</p>

<ul>
<li><p>CI/CD with gitlab-ci: <a href="https://gitlab.com/acme101/nextjs-hello-world/pipelines">https://gitlab.com/acme101/nextjs-hello-world/pipelines</a></p></li>
<li><p>CI/CD with travis-ci: <a href="https://travis-ci.org/acme101/nextjs-hello-world/builds">https://travis-ci.org/acme101/nextjs-hello-world/builds</a></p></li>
<li><p>Auto deployment to Heroku: <a href="https://acme-nextjs-staging.herokuapp.com/">https://acme-nextjs-staging.herokuapp.com/</a></p></li>
<li><p>Auto deployment to GKE (Kubernetes) with terapp.com (A record domain): <a href="https://acme-nextjs-staging.terapp.com/">https://acme-nextjs-staging.terapp.com/</a></p></li>
</ul>


<p>To set up the project on local development:</p>

<ul>
<li><p>Follow: <a href="https://github.com/acme101/dev-setup/blob/master/README.md">https://github.com/acme101/dev-setup/blob/master/README.md</a></p></li>
<li><p>Check out the repo into the <code>acme-dev/workspace</code> directory</p></li>
</ul>


<p>That&rsquo;s it, you&rsquo;re ready to work on the local dev environment.</p>

<h1>Local Dev Environment</h1>

<p>Our development philosophy is this: everything can and should be done on local development with
consistent behaviors between all developers and production deployments.</p>

<p>And Docker helps us with that to create a consistent build-time and run-time environment for all.</p>

<p>Usually, there are 3 modes on local dev for our workflow:</p>

<ul>
<li><p>Dev Mode: developers work on this for new changes, this usually contains development dependencies.</p></li>
<li><p>Prod Mode: developers need to make sure that production Docker image should work on local dev.
This production Docker image, which is different from the one from dev mode, will contain only
the production dependencies, and the runtime environment only.</p>

<p>If developers can only make it work on dev mode, prod mode can break. If prod mode breaks, developers can
check and fix it on local dev. This is really conveninent and time saving.</p></li>
<li><p>Prod Review Mode: we should review the work from others and this mode help us for faster reviewing
process. Basically, everyone&rsquo;s work branch will have the corresponding production Docker image that
we can review it right away on our local dev environment. We don&rsquo;t have to checkout the codes to start
reviewing.</p>

<p>This is helpful for us to set up CI/CD system for reviewing process later: when a pull request is sent,
the CI/CD system should deploy it right away for QA to validate, for example.</p></li>
</ul>


<p>The following is the more details about how to use these modes:</p>

<h2>Dev Mode</h2>

<p>To run dev mode on the current source code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh
</span><span class='line'>$ ws
</span><span class='line'>$ cd nextjs-hello-world
</span><span class='line'>$ docker-compose up -d dev && docker-compose logs -f dev</span></code></pre></td></tr></table></div></figure>


<p>Open dev.nextjs.acme.dev (http + https modes) to check it out.</p>

<h2>Prod Mode</h2>

<p>To run prod mode on the current source code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose run --rm dev yarn run build && \
</span><span class='line'>  docker-compose -f docker-compose.yml -f docker-compose.prod.yml build prod && \
</span><span class='line'>  docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d prod</span></code></pre></td></tr></table></div></figure>


<p>We usually scale at least 2 or more containers, so please scale it on local dev too to make sure scaling should work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml scale prod=2</span></code></pre></td></tr></table></div></figure>


<p>Open nextjs.acme.dev (http + https modes) to check it out.</p>

<p>Don&rsquo;t forget to remove the container after checking out for cleaning up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml -f docker-compose.prod.yml stop prod && \
</span><span class='line'>  docker-compose -f docker-compose.yml -f docker-compose.prod.yml rm -f prod</span></code></pre></td></tr></table></div></figure>


<h2>Prod Review Mode</h2>

<p>To review prod mode from different built Docker image.</p>

<p>For example, I need to review the <code>hoatle/nextjs-hello-world:features-1-something</code> Docker image
from @hoatle.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ export DOCKER_IMAGE_REVIEW=hoatle/nextjs-hello-world:features-1-something && \
</span><span class='line'>docker-compose -f docker-compose.yml -f docker-compose.review.yml pull review && \
</span><span class='line'>docker-compose -f docker-compose.yml -f docker-compose.review.yml up -d review</span></code></pre></td></tr></table></div></figure>


<p>We usually scale at least 2 or more containers, so please scale it on local dev too to make sure scaling should work:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml -f docker-compose.review.yml scale review=2</span></code></pre></td></tr></table></div></figure>


<p>Open review.nextjs.acme.dev (http + https modes) to check it out.</p>

<p>Don&rsquo;t forget to remove the containers after checking out for cleaning up:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose -f docker-compose.yml -f docker-compose.review.yml stop review && \
</span><span class='line'>  docker-compose -f docker-compose.yml -f docker-compose.review.yml rm -f review</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s how we, developers, usually work on local development. And to streamline the work, we need
to deploy the applications on production system.</p>

<p>The <code>docker-compose</code> commands above are rather long, maybe you can create bash files to run more easily,
for example, <code>$ dev.sh start</code>, <code>$ dev.sh stop</code>, <code>$ prod.sh build</code>, <code>$ prod.sh start</code>, <code>$ prod.sh stop</code>,
<code>$ review.sh start &lt;image_for_review&gt;</code> and <code>$ review.sh stop</code>.</p>

<h1>Production System</h1>

<p>We build Docker images for deploying so we can leverage any system that accept Docker image.</p>

<p>In this tutorial, we use Heroku and Kubernetes, but you can choose whatever system that Docker is supported.</p>

<p>Heroku is very easy to be used, just push the Docker image and it should work.</p>

<p>Kubernetes (K8s) and Helm is easy to work with, it&rsquo;s mature and it gives us more control over everything.
I recommend using Kubernetes for production system to automate it all.</p>

<h2>Heroku Deployment</h2>

<p>You can follow <a href="https://devcenter.heroku.com/articles/container-registry-and-runtime">https://devcenter.heroku.com/articles/container-registry-and-runtime</a> to deploy your
Docker image to Heroku.</p>

<h2>K8s Deployment</h2>

<p>You can use Google Container Engine (GKE) to deploy K8s applications. Using Helm as the K8s package
manager is more easier and convenient.</p>

<p>I created the Helm chart for this application here:
<a href="https://github.com/acme101/nextjs-hello-world/tree/develop/helm-charts/nextjs-hello-world">https://github.com/acme101/nextjs-hello-world/tree/develop/helm-charts/nextjs-hello-world</a></p>

<p>We can install it right away:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ helm install halm-charts/nextjs-hello-world</span></code></pre></td></tr></table></div></figure>


<h1>CI/CD Systems</h1>

<p>To automate all the development integration and production deployment, we use CI/CD systems. You can
use any CI/CD systems available. In this sample project, I set up for gitlab-ci and travis-ci, they
share the same steps and these steps can be applied to any other CI/CD systems.</p>

<p>A typical CI/CD system will need to:</p>

<ul>
<li><p>check for new changes</p>

<ul>
<li>code style</li>
<li>security</li>
<li>all kinds of tests</li>
</ul>
</li>
<li><p>when checks passes, build the production Docker image and push to the Docker registry</p></li>
<li><p>take the production Docker image and deploy it to the production systems</p></li>
<li><p>everyone enjoys the new changes!</p></li>
</ul>


<p>The CI/CD system should work on any forked repo, too.</p>

<p>And to get it work, we need to provide the some environment variables settings. To know more about
some of these variables, please follow:</p>

<ul>
<li><p>How to deploy on Heroku: <a href="https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-heroku.md">https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-heroku.md</a></p></li>
<li><p>How to deploy on GCP: <a href="https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-gcp.md">https://github.com/acme101/dev-setup/blob/master/docs/how-to-deploy-on-gcp.md</a></p></li>
</ul>


<h1>Sum up</h1>

<p>In this tutorial, I&rsquo;ve introduced the development philosophy and workflow that we apply for all our
projects at Teracy and our clients&#8217; projects. I hope that it could be helpful to others to boost
your productivity with software development.</p>

<p>Happy developing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hãy dành 5 phút để suy nghĩ]]></title>
    <link href="http://blog.teracy.com/2017/04/25/hay-danh-ra-5-phut-suy-nghi/"/>
    <updated>2017-04-25T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2017/04/25/hay-danh-ra-5-phut-suy-nghi</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/04/24/hay-danh-5-phut-suy-nghi.jpg" title="Hãy dành 5 phút suy nghĩ" ></p>

<p>Cách đây chỉ vài năm, tôi đã từng là một người nóng vội. Bất cứ khi nào dù ai nói điều gì thì tôi cũng sẽ nghĩ cách phủ định ý kiến của họ. Tôi sẽ không nề hà phản bác ngay nếu như có ý kiến nào đó không phù hợp với thế giới quan của tôi.</p>

<p>Điều này có nghĩa là quan điểm của tôi phải là nhất trong mọi tình huống. Tuy nhiên, khi đưa ra những ý kiến này, tôi đã không thực sự suy nghĩ chín chắn về vấn đề. Bạn càng phản ứng nhanh, thì bạn càng ít suy nghĩ. Không phải luôn luôn, nhưng thường là vậy.</p>

<p>Thật dễ khi nói về các phản xạ tự nhiên như thể chúng là thói quen của người khác, và chỉ có người khác mắc phải mà không hề liên quan đến bạn. Bạn cũng có những phản xạ tự nhiên này. Và nếu những người hàng xóm của bạn không hề miễn nhiễm với thói quen này thì bạn cũng vậy.</p>

<!-- more -->


<p>Vần đề này cũng xảy ra với tôi vào năm 2007. Trong khi tôi được mời phát biểu tại hội nghị của tổ chức Sáng Kiến Kinh doanh tại Providence, RI. và Richard Saul Wurman cũng vậy. Sau bài thuyết trình của tôi thì đến lượt Richard, anh ta bước lên giới thiệu về bản thân và dành lời khen ngợi cho bài thuyết trình của tôi. Đó thật là một cử chỉ hào phóng, mà đáng ra anh ta không cần thiết phải làm như thế.</p>

<p>Và tôi đã làm gì? Tôi đã phản kháng ngay bài thuyết trình của anh ta. Trong khi anh ta đang hào hứng và say mê đưa ra các luận điểm của mình trên sân khấu, tôi đã liệt kê danh sách hàng loạt những ý kiến tôi không đồng quan điểm. Và khi được mời đối thoại trực tiếp với anh ấy, tôi đã nhanh chóng phản biện lại các ý kiến của anh ấy. Có lẽ lúc đó, tôi trông thật tệ khi bới móc sai sót của người khác.</p>

<p>Và rồi phản ứng của anh ấy đã làm thay đổi cuộc đời tôi. Anh ấy chỉ nói một câu đơn giản: “Này ông, hãy dành ra 5 phú để suy nghĩ”. Tôi hỏi lại ý anh ấy là gì? Anh ấy trả lời rằng đưa ra những quan điểm trái chiều, đưa ra những phản biện đều rất tốt, và thật tuyệt vời khi mọi người có những quan điểm và niềm tin mạnh mẽ, nhưng hãy dành thời gian để suy nghĩ lại về những luận điểm của tôi trước khi bạn chắc chắn rằng bạn muốn tranh cãi về những luận điểm đó. Hãy dành “Năm phút&#8221; để “suy nghĩ&#8221; chứ không phải phản ứng lại. Anh ấy hoàn toàn đúng. Tôi đã tham gia vào cuộc thảo luận chỉ để nhằm chứng minh một điều gì đó và tôi không thể học hỏi gì từ cuộc tranh luận này.</p>

<p>Đây là một khoảnh khắc đáng nhớ trong cuộc đời tôi.</p>

<p>Richard đã dành 30 năm sự nghiệp của mình để suy ngẫm về những vấn đề này. Còn tôi thì chỉ biết đến nó có vài phút. Vào giờ phút đó, ông ấy có thể đã sai và tôi có thể đã đúng, nhưng tốt hơn hết là nên suy nghĩ sâu sắc về một điều gì đó trước khi bạn chắc chắn rằng bạn đã đúng.</p>

<p>Cũng có sự khác biệt giữa việc đặt câu hỏi và việc phản bác vấn đề. Phản bác có nghĩa là bạn biết chắc rằng mình đúng. Đặt câu hỏi có ý nghĩa là bạn muốn biết. Bạn muốn học hỏi nhiều hơn.</p>

<p>Học nghĩ trước khi phản ứng nhanh là việc cần theo đuổi suốt đời. Điều này thật sự khó khăn. Đôi khi tôi vẫn nóng vội trong những trường hợp không cần thiết. Nhưng tôi cũng đã cố gắng khắc phục và tận hưởng tất cả những lợi ích mà nó mang lại, tôi trở nên điềm đạm hơn.</p>

<p>Nếu bạn không chắc chắn lý do tại sao điều này là quan trọng, hãy suy nghĩ trích dẫn này từ Jonathan Ive về việc coi trọng các ý tưởng của Steve Jobs:</p>

<p><em>&ldquo;Và cũng như Steve đã yêu thích những ý tưởng và yêu thích công việc, ông  xem quá trình sáng tạo ý tưởng là một điều rất quý hiếm và đáng trân trọng. Bạn thấy đấy, tôi nghĩ ông ấy hiểu rõ hơn bất kì ai rằng cuối cùng thì những ý tưởng luôn có sức mạnh mặc dù ban đầu chúng chỉ là những suy nghĩ mỏng mảnh, không trọn vẹn, dễ dàng bị bỏ qua, và đi vào bế tắc.&rdquo;</em></p>

<p>Thật sự, những ý tưởng rất mong manh. Những ý tưởng này thường bắt đầu từ những suy nghĩ thoáng qua, không có chủ đích, không được đào sâu hay nhào nặn, vì vậy chúng ta dễ dàng phớt lờ hoặc bỏ lỡ chúng.</p>

<p>Có hai thứ trên thế giới này không cần kĩ năng:</p>

<ul>
<li><p>Tiêu tiền của người khác</p></li>
<li><p>Bỏ qua một ý tưởng.</p></li>
</ul>


<p>Việc bỏ qua một ý tưởng rất dễ dàng vì nó không liên quan đến bất kỳ công việc nào. Bạn có thể dễ dàng giễu cợt nó. Bạn cũng có thể bỏ qua nó. Nhưng điều khó là làm sao bạn có thể bảo vệ nó, suy nghĩ về nó, khám phá, thổi hồn vào nó và dấn thân vào thử thách. Xuất phát điểm của một ý tưởng tuyệt vời có thể bị che giấu dưới dáng vẻ của một ý tưởng sai lầm.</p>

<p>Vì vậy, lần tới khi nghe một điều gì đó, hoặc ai đó nói về một ý tưởng hay đưa ra hoặc gợi ý một ý tưởng nào đó, bạn hãy dành ra năm phút để suy ngẫm. Hãy dành thời gian suy nghĩ về điều đó trước khi phản bác, trước khi nói rằng nó quá khó khăn hoặc như vậy là quá tốn công sức để thực hiện. Có thể những lý do biện minh là đúng, nhưng có thể có một sự thật khác đằng sau: Nó rất đáng giá.</p>

<p>Dịch từ: <a href="https://signalvnoise.com/posts/3124-give-it-five-minutes">Give it five minutes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vì sao ngắt kết nối internet sẽ giúp bạn tập trung hơn vào công việc?]]></title>
    <link href="http://blog.teracy.com/2017/04/17/vi-sao-ngat-ket-noi-intetnet-se-giup-ban-tap-trung-hon-vao-cong-viec/"/>
    <updated>2017-04-17T04:40:00+00:00</updated>
    <id>http://blog.teracy.com/2017/04/17/vi-sao-ngat-ket-noi-intetnet-se-giup-ban-tap-trung-hon-vao-cong-viec</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/04/17/bat-tat-internet.jpeg" title="Bật hay tắt internet?" ></p>

<p>Cuộc sống năm 2016 thật là tuyệt vời. Dù ở nhà hay ra ngoài thì các bạn vẫn luôn luôn được kết nối internet.</p>

<p>Chỉ với chiếc điện thoại thông minh là bạn đã có cả thế giới trong tầm tay rồi. Dường như điều đó thật
tuyệt vời phải không? Nhưng thực tế lại không đúng như vậy.</p>

<p>Hầu hết mọi người đang không sử dụng công nghệ mà bị công nghệ sử dụng.</p>

<p>Các ứng dụng, trò chơi, video, các bài báo, quảng cáo hay các chương trình TV đều được thiết kế để thu
hút sự chú ý của bạn. Do đó bạn đã lãng phí không biết bao nhiêu thời gian mỗi tuần mà không hề hay biết.
Bạn tập trung vào tất cả mọi nơi nhưng sự tập trung đó lại không dừng đúng nơi.</p>

<!-- more -->


<p>Bạn có nghĩ vì sao Netflix bắt đầu mỗi tập phim trong 3, 2, 1 giây không? Khi điều đó xảy ra, bạn nghĩ:
&ldquo;Mặc kệ, xem thêm cái này đã.&rdquo;</p>

<p>Điều này cũng tương tự với YouTube. Bạn có nghĩ vì sao những gợi ý của nó lại tốt như thế không? Bạn bị
đắm chìm vào trong những ràng buộc đó và điều này cũng áp dụng cho tất cả các nội dung. Sẽ luôn luôn
có một video, 1 tập phim, bài báo, trò chơi tiếp theo lôi cuốn bạn.</p>

<p>Lạ kỳ rằng, hầu như những người mà đọc những thể loại báo kiểu này đều biết rằng mất tập trung
là rất tệ. Và trong những năm gần đây, có một số lượng lớn các bài báo và các sách nghiên cứu đã nói
về ảnh hưởng xấu của việc xao lãng.</p>

<p>Đặc biệt, <a href="https://www.ics.uci.edu/~gmark/chi08-mark.pdf">nghiên cứu của Gloria Mark và các đồng tác giả đã chỉ ra rằng</a> xao lãng có mối liên quan với
mức độ căng thẳng hơn, sự thất vọng cao hơn, áp lực thời gian và nỗ lực.</p>

<h1>Làm việc tập trung là rất khó. Chúng ta luôn bị phân tâm.</h1>

<p>Và đó không phải là lỗi của bạn. Hầu hết các công nghệ đều tác động vào bản năng căn bản và khoá bạn lại,
biến bạn thành người tiêu dùng.</p>

<p>Vì vậy, đừng nghĩ về việc chống đối lại internet hay công nghệ. Tôi cá là bạn cũng đã từng thử làm như thế
trong quá khứ. &ldquo;Tôi sẽ không bao giờ lướt web vô thức hàng giờ liền nữa&rdquo;. Đúng thế!</p>

<p>Điều gì sẽ mang lại hiệu quả đây? Gần đây, <a href="http://dariusforoux.com/sciencebehindprocrastination/">tôi đã viết về việc làm thế nào để đánh bại sự trì hoãn
bằng cách tạo ra 1 hệ thống</a>. Một trong những phần quan trọng nhất của hệ thống đó là:</p>

<p><strong>HÃY NGẮT KẾT NỐI INTERNET</strong></p>

<p>Và chỉ có duy nhất 1 lý do để làm điều đó: cái gì nhiều quá cũng không tốt, kể cả nhiều thứ tốt cũng thế.</p>

<ul>
<li><p>Luyện tập quá nhiều? Cơ thể sẽ bị quá tải.</p></li>
<li><p>Yêu quá nhiều? Bạn sẽ làm người khác ngột ngạt.</p></li>
<li><p>Làm việc quá nhiều? Bạn sẽ bị kiệt sức.</p></li>
<li><p>Ăn quá nhiều? Bạn sẽ bị béo phì.</p></li>
<li><p>Quá nhiều nước? Bạn sẽ bị chết đuối.</p></li>
</ul>


<p>Vậy tại sao bạn phải sử dụng internet quá nhiều như thế? Tôi đã tự hỏi chính mình điều này cách đây 2 năm.
Tôi đã không có câu trả lời. Vì tôi đã nghĩ, tôi làm mọi thứ trong tầm kiểm duyệt của mình, tại sao
lại không có internet?</p>

<p>Tôi sớm phát hiện ra rằng không hề có sự kiểm duyệt với việc sử dụng internet. Nó giống như
một bữa tiệc tự chọn vậy. Bạn đã no, nhưng bạn vẫn tiếp tục ăn. Và sau khi bạn đã nhồi nhét bản thân mình,
bạn lại cảm thấy hối tiếc vì đã làm thế.</p>

<p>Và điều này tương tự như việc sử dụng internet. Nó quá hấp dẫn, thoả mãn sự tò mò của bạn và có ở mọi
nơi. Do vậy mà bạn đi khắp nơi cùng với nó, YouTube, Whatsapp, Facebook, Snapchat&hellip;</p>

<p>Tôi đang cố loại bỏ mọi thứ làm mình xao lãng. Tuy nhiên, tôi cũng không muốn sống như một kẻ ẩn dật,
vì vậy tôi phải tìm ra một nền tảng hợp lý có hiệu quả.</p>

<p>Tôi đã tìm thấy rằng một tinh chỉnh đơn giản trong thái độ của tôi đối với internet đã làm được thủ thuật đó.</p>

<p><strong>Tôi chuyển từ &ldquo;Luôn luôn kết nối&rdquo; thành &ldquo;Luôn luôn ngắt kết nối&rdquo;.</strong></p>

<p>Thực tế, nó hoạt động như thế này:</p>

<ul>
<li><p>Trên điện thoại của mình, wifi và dữ liệu di động thường xuyên bị tắt. Tôi chỉ bật khi nào mình cần.</p></li>
<li><p>Trên máy tính, tôi sử dụng 1 ứng dụng gọi là <a href="https://selfcontrolapp.com/">SelfControl</a> (chỉ dành cho máy Mac) trong suốt thời gian
tôi làm việc (nếu bạn dùng Windows thì hãy thử <a href="https://focusme.com/">FocusMe</a>).  Ứng dụng này chặn các trang web làm bạn bị
phân tán. Ưu điểm là những ứng dụng mà tôi cần như Evernote, DayOne, Office365 vẫn kết nối vì thế tôi có
thể lưu trữ công việc của mình trên các dịch vụ đám mây.</p></li>
</ul>


<p><strong>&ldquo;Luôn luôn kết nối&rdquo; không phải là điều tốt cho sự tập trung và năng suất của bạn</strong></p>

<p>Nó giống như đến phòng tập hoặc ăn tối, hay có một buổi tối lãng mạn với nửa kia của bạn. Bạn không làm
những điều này trong 24 giờ một ngày.  Bạn chỉ làm khoảng 30 phút, một giờ hoặc một vài giờ. Làm những
việc này quá nhiều đơn giản là không mang lại hiệu quả.</p>

<p>Việc ngắt kết nối internet đã mang lại những điều kì diệu cho tôi. Tôi không cảm thấy cần phải cấp bách
kiểm tra điện thoại, email hay các tin tức 500 lần mỗi ngày như trước kia nữa.</p>

<p>Và sau một thời gian, bạn cảm thấy bạn không bị bỏ lỡ bất cứ điều gì cả. Điều đó mang lại cảm giác bình tĩnh
cho cuộc sống của bạn.</p>

<p>Tôi cũng nhận được nhiều hơn cho mỗi ngày của mình; tôi đạt được nhiều điều hơn trước kia, cảm thấy
ít bị phân tâm hơn, và có nhiều thời gian cho những điều làm tôi hạnh phúc hơn.</p>

<p>Vào cuối ngày, internet chỉ là một công cụ. Tuy nhiên, một số người trong chúng ta lại nghĩ nó là
mọi thứ. Nhưng tôi khá tự tin rằng, nhiều năm tới tôi sẽ không cần nhìn lại và hối tiếc vì đã không dành
đủ thời gian cho internet.</p>

<p>Bạn có thể tưởng tượng được không? Bạn đang hấp hối trên giường bệnh và bạn nói với gia đình mình rằng: &ldquo;Tôi
rất vui vì đã được xem quá nhiều FAIL Complilation trên YouTube&rdquo;.</p>

<p>Chắc chắn là bạn sẽ không nhìn lại thời gian đó. Có thể bạn sẽ nhớ lại thời gian bạn ở bên gia đình
và bạn bè của bạn, hay những kỷ niệm khi bạn đi du lịch, hay sự vui thích trong công việc của mình.</p>

<p>Vì vậy hãy ngắt kết nối internet đi. Nó không mang lại cho bạn điều gì ngoài sự xao lãng.</p>

<p>Và sau khi đọc bài viết này, bạn hãy ngắt kết nối internet đi nhé.</p>

<p>Bạn sẽ có một số triệu chứng cai nghiện giống như cầm điện thoại lên khoảng 100 lần, hoặc ấn nút F trên
bàn phím để mở Facebook mọi lúc. Nhưng tôi hứa với bạn điều này: Ngắt kết nối sẽ giúp bạn làm được nhiều hơn
và đó chính là cuộc sống mà bạn hướng tới.</p>

<p>Dịch từ: <a href="https://medium.com/the-mission/why-disconnecting-from-the-internet-improves-your-focus-167a824c3bb5#.7gqqh9ow6">Why Disconnecting From The Internet Improves Your Focus</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to develop Angular 2+ applications easily with Docker, angular-cli and angular-boilerplate]]></title>
    <link href="http://blog.teracy.com/2017/03/22/how-to-develop-angular-2-applications-easily-with-docker-angular-cli-and-angular-boilerplate/"/>
    <updated>2017-03-22T18:16:00+00:00</updated>
    <id>http://blog.teracy.com/2017/03/22/how-to-develop-angular-2-applications-easily-with-docker-angular-cli-and-angular-boilerplate</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/03/22/acme101-angular-hello-world.gif" title="Acme 101 angular-hello-world" ></p>

<p>About six months ago we published
<a href="http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli/">How to Develop Angular 2 Applications Easily With Docker and Angular-cli</a> which received a lot of
Angular community feedbacks and questions.</p>

<p>Six months has passed and we&rsquo;d like to share more best practices to develop Angular applications with
Docker after working on it for a while.</p>

<!-- more -->


<h2>Received Feedbacks</h2>

<p>We received some outstanding feedbacks and questions about:</p>

<ul>
<li>Problems when running Docker images after pulling the built Docker images.</li>
<li>How to build prod Docker image and run it.</li>
<li>How to get <code>npm</code> packages into the <code>node_modules</code> to work within your IDE, editor.</li>
</ul>


<p>And in this blog post, we&rsquo;re going to solve all of them and even with more best practices.</p>

<h2>angular-boilerplate</h2>

<p>Setting up Angular projects with Docker to get it work properly is not easy. Luckily, we&rsquo;ve done
all the heavy lifting for you with the <code>angular-boilerplate</code> project.</p>

<p><code>angular-boilerplate</code> was created as a seed project that can be used to generate any new Angular
projects having Docker and CI/CD system support.</p>

<p>To generate a new Angular project, you can check out the
<a href="https://github.com/teracyhq/angular-boilerplate/blob/master/README.md">README.md</a> file to follow.</p>

<h2>angular-hello-world</h2>

<p>In this section, I&rsquo;ll introduce you the best way to set up a development environment and you can apply
it for all your projects, not just Angular projects. After some first required steps to set up
<code>acme-dev</code>, after <code>$ vagrant up</code>, you can start coding immediately, you don&rsquo;t have to learn the set
up steps at first, but defer it later.</p>

<p>Suppose that we&rsquo;re in Acme organization and we need to work on the <code>angular-hello-world</code> project.</p>

<p>Let&rsquo;s follow the README file here: <a href="https://github.com/acme101/angular-hello-world">https://github.com/acme101/angular-hello-world</a></p>

<p>It tells us to follow <a href="https://github.com/acme101/dev-setup/blob/master/README.md">https://github.com/acme101/dev-setup/blob/master/README.md</a></p>

<p>By setting up <code>acme-dev</code>, we can use it for all types of projects with different stacks with the same
set up workflow, it means that we can save a lot of time and effort to add more and more projects.</p>

<p>Re-using and scaling boots productivity and cost savings.</p>

<h2>Best practices</h2>

<p>By looking into the <code>angular-boilerplate</code> or <code>angular-hello-world</code>, you can see the following best
practices:</p>

<ul>
<li><p>We should build the production Docker image for production deployment.</p></li>
<li><p>We should work on dev mode on local dev.</p></li>
<li><p>We should work on prod mode on local dev.</p></li>
<li><p>We should review others&#8217; work on local dev.</p></li>
<li><p>We should use alias domains instead of fixed ports to avoid conflicts.</p></li>
<li><p>We should generate <code>node_modules</code> to work on the npm packages safely within your IDE.</p></li>
<li><p>We should use <code>yarn</code> instead <code>npm</code> as the node package manager.</p></li>
<li><p>We should test both dev and prod modes on local dev.</p></li>
<li><p>We should test both http and https modes on local dev.</p></li>
</ul>


<p>All the instruction should be updated in the README file, please follow there to apply for your
project: <a href="https://github.com/acme101/angular-hello-world/blob/develop/README.md">https://github.com/acme101/angular-hello-world/blob/develop/README.md</a></p>

<h2>Summary</h2>

<p>All the heavy lifting and best practices are documented into the corresponding projects, that&rsquo;s how
we should do so that everyone can follow easily and we can support each other with ease, too.</p>

<p>Hopefully, this will help you a lot with your Angular projects and any other projects that you can
apply similarly.</p>

<p>Happy hacking and don&rsquo;t forget to let us know your feedbacks and questions by leaving your comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 mẹo quản lý thời gian thực sự hiệu quả]]></title>
    <link href="http://blog.teracy.com/2017/03/15/3-meo-quan-ly-thoi-gian-thuc-su-hieu-qua/"/>
    <updated>2017-03-15T10:00:00+00:00</updated>
    <id>http://blog.teracy.com/2017/03/15/3-meo-quan-ly-thoi-gian-thuc-su-hieu-qua</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/03/15/meo-quan-ly-thoi-gian.jpg" title="Mẹo quản lý thời gian" ></p>

<p>Việc quản lý thời gian có thể là rất khó khăn. Những điều khẩn cấp và quan trọng trong cuộc sống của bạn thường rất khác nhau.</p>

<p>Điều này đặc biệt đúng với vấn đề sức khỏe của bạn, khi mà những vấn đề quan trọng hầu như không được xem là khẩn cấp mặc dù cuối cùng cuộc sống của bạn vẫn còn mất cân bằng.</p>

<ul>
<li><p>Không, đi tập gym hôm nay chưa cấp bách, nhưng nó lại quan trọng cho sức khỏe lâu dài của bạn.</p></li>
<li><p>Không, bạn sẽ không chết vì bị stress hôm nay, nhưng nếu bạn không tìm cách vượt qua nó sớm thì bạn cũng có thể sẽ bị chết vì stress thôi.</p></li>
<li><p>Không, ăn những thực phẩm sạch chưa qua công nghệ chế biến là không cần thiết để bạn có thể sống sót ngay bây giờ, nhưng sẽ giúp bạn làm giảm nguy cơ bị ung thư và bệnh tật.</p></li>
</ul>


<p>Còn có điều gì mà chúng ta có thể làm nữa nhỉ? Tất cả chúng ta có 24 giờ trong 1 ngày, chúng ta thực sự phải sử dụng thời gian của chúng ta như thế nào để đạt hiệu quả hơn?</p>

<!-- more -->


<p>Và điều quan trọng nhất, chúng ta có thể quản lý thời gian của chúng ta như thế nào để sống vui vẻ hơn, khỏe mạnh hơn, làm những việc mà chúng ta biết là quan trọng và vẫn tiếp tục xử lý những trách nhiệm cấp bách?</p>

<p>Tôi đang tìm câu trả lời đó giống như bạn vậy, nhưng theo kinh nghiệm của tôi có 3 mẹo quản lý thời gian thực sự hiệu quả trong cuộc sống thực và sẽ giúp bạn cải thiện được sức khỏe và năng suất.</p>

<h1>1. Bằng mọi giá hãy loại bỏ &ldquo;công việc nửa vời&rdquo;</h1>

<p>Trong thời đại này, chúng ta luôn dễ bị phân tâm giữa việc đang làm và các yếu tố xã hội tác động. Chúng ta vẫn thường thực hiện nhu cầu về email, tin nhắn và danh sách việc phải làm trong khi đang có công việc cần hoàn thành. Và, rất hiếm khi chúng ta toàn tâm với công việc.</p>

<p>Việc phân tán thời gian và sức lực như vậy tôi gọi đó là công việc nửa vời. Sau đây là một số ví dụ:</p>

<ul>
<li><p>Bạn bắt đầu viết báo cáo, nhưng đột nhiên dừng lại kiểm tra điện thoại mà chẳng có lý do gì, hoặc bật facebook, twitter.</p></li>
<li><p>Bạn đang thử nghiệm một chương trình luyện tập mới. Hai ngày sau, bạn đọc một chương trình mới khác và thử nghiệm. Bạn không thấy nhiều tiến triển, và vì vậy bạn lại tiếp tục tìm kiếm bài tập khác tốt hơn.</p></li>
<li><p>Bạn để tâm trí của mình hướng vào hộp thư đến của email trong khi đang nói chuyện với một ai đó.</p></li>
</ul>


<p>Bất kể bạn rơi vào cái bẫy của &ldquo;công việc nửa vời&rdquo; như thế nào và ở đâu, tất cả đều chung một kết quả: Bạn sẽ không thể toàn tâm vào công việc đang làm. Công việc nửa vời chính là lý do tại sao bạn có thể làm được nhiều hơn vào ngày hạn chót so với thời điểm hai tuần trước đó (khi bị liên tục xao nhãng).</p>

<p>Giống như hầu hết mọi người, tôi luôn gặp phải vấn đề này và cách tốt nhất để tôi giải quyết nó là dành thời gian tập trung vào một việc và xoá bỏ các tác động khác.</p>

<p>Tôi chọn một bài tập và tập trung vào đó (ví dụ: hôm nay chỉ tập trung luyện ngồi thôi. Các nội dung khác là thừa).</p>

<p>Tôi bỏ ra một vài giờ đồng hồ (thậm chí cả ngày) để tập trung cho một dự án quan trọng. Tôi để điện thoại ở một phòng khác, đóng email, facebook, twitter.</p>

<p>Việc loại bỏ hoàn toàn các mối bận tâm là cách duy nhất tôi biết để tập trung sâu vào công việc, tránh những phân mảnh có thể khiến bạn làm việc nửa vời.</p>

<p>Bạn có thể đạt thêm bao nhiêu hiệu quả nữa nếu như bạn thực sự tập trung vào làm việc theo cách cần phải làm
và loại bỏ những công việc nửa vời?</p>

<h1>2. Ưu tiên trước hết cho các công việc quan trọng nhất</h1>

<p>Rối loạn và mất kiểm soát có xu hướng tăng dần theo thời gian. Đồng thời, các quyết định, lựa chọn được đưa ra trong ngày sẽ làm xói mòn trí lực của bạn. Dường như, bạn sẽ khó đưa ra được một quyết định tốt vào cuối ngày hơn so với khi mới bắt đầu công việc.</p>

<p>Tôi nhận thấy điều này đúng với các bài tập của tôi. Khi bài tập càng phát triển, tôi càng tốn ít trí lực để hoàn thành các khoa mục và các bài tập khó.</p>

<p>Vì những lý do đó, tôi luôn cố gắng đảm bảo rằng cái gì quan trọng cần làm, tôi sẽ làm trước. Nếu tôi có một bài báo quan trọng cần hoàn thành, tôi sẽ uống một cốc nước và bắt đầu viết ngay khi vừa thức dậy. Nếu có một bài tập khó cần thực hiện, tôi sẽ làm vào đầu buổi tập.</p>

<p>Nếu bạn luôn ưu tiên làm những việc quan trọng trước, bạn sẽ không bao giờ có ngày nào mà chưa thực hiện công việc quan trọng. Tuân thủ theo nguyên tắc này, bạn sẽ luôn kết thúc với một ngày làm việc hiệu quả, thậm chí khi mọi thứ nằm ngoài kế hoạch. Như vậy, <a href="http://jamesclear.com/productivity-tip">lời khuyên hữu ích cho bạn là hãy ưu tiên làm những công việc quan trọng nhất</a>.</p>

<h1>3. Giảm tầm mức, nhưng luôn theo lịch</h1>

<p>Trước đây tôi đã từng viết về tầm quan trọng của việc bám lịch thay vì bám hạn định. Đôi khi hạn định cũng có ý nghĩa riêng, nhưng tôi cho rằng khi làm một việc quan trọng trong thời gian dài, việc bám lịch sẽ có hiệu quả hơn nhiều.</p>

<p>Tuy nhiên, đối với bài tập ngày qua ngày, bám lịch nói dễ hơn làm. Khi hỏi bất kỳ ai đã lên kế hoạch luyện tập mỗi ngày thứ 2, thứ 4 và thứ 6, họ sẽ nói cho chúng ta biết về mức độ khó khăn của việc bám lịch như thế nào.</p>

<p>Để đối phó với những điều bận tâm phát sinh và vượt qua trở ngại dễ bị tác động, tôi đã thực hiện một sự thay đổi nhỏ về cách tiếp cận lịch của mình. Mục tiêu của tôi là xây dựng lịch trước, thay vì tầm mức, trái với thông lệ.</p>

<p>Ví dụ, giả sử hôm nay bạn dậy và dự kiến buổi chiều sẽ chạy 3 dặm. Tuy nhiên trong ngày hôm đó lịch trình của bạn bị xáo trộn và thời gian bắt đầu khó mà thực hiện được. Bây giờ bạn chỉ có 20 phút để chạy thôi.</p>

<p>Lúc này bạn có 2 lựa chọn:</p>

<p>Lựa chọn đầu tiên là nói &ldquo;tôi không đủ thời gian để tập hôm nay&rdquo; và bỏ khoảng thời gian đó vào việc khác. Đó là cách trước đây tôi thường thực hiện.</p>

<p>Lựa chọn thứ hai là, giảm tầm mức, nhưng vẫn theo lịch. Thay vì chạy 3 dặm, bạn chỉ chạy 1 dặm hoặc làm 5 lượt chạy nhanh. Nhưng bạn vẫn theo lịch và luyện tập. Tôi thấy rằng sử dụng phương pháp tiếp cận này mang lại thành công về lâu dài hơn lựa chọn đầu tiên.</p>

<p>Hàng ngày, tác động của việc thực hiện 5 lượt chạy nhanh không lớn, đặc biệt khi bạn đã lên kế hoạch chạy 3 dặm. Nhưng tác động luỹ kế của việc bám lịch sẽ rất lớn. Bất kể hoàn cảnh nào, mức độ bài tập ra sao, bạn đều biết rằng sẽ phải thực hiện bài tập của ngày hôm nay. Đó là cách mà mục tiêu nhỏ bé của ngày hôm nay có thể trở thành thói quen trong cả cuộc đời.</p>

<p>Hãy hoàn thành những thứ của ngày hôm nay, thậm chí tầm mức của nó nhỏ hơn dự kiến.</p>

<h1>Những mẹo quản lý thời gian thực sự hiệu quả</h1>

<p>Có hàng nghìn ứng dụng quản lý thời gian và các thiết bị giúp tăng hiệu suất công việc. Lịch, lời nhắc và danh sách công việc cần làm là những thứ bạn sẽ tìm thấy nhiều hơn so với điều bạn biết là phải làm gì với chúng. Nhưng theo kinh nghiệm của tôi, các cách quản lý thời gian hiệu quả và thực tế ở trên thật đơn giản.</p>

<p>Để có một cuộc sống khoẻ mạnh và năng suất, tôi cố gắng tập trung vào 3 điều:</p>

<ul>
<li><p>Loại bỏ công việc nửa vời, tập trung sâu.</p></li>
<li><p>Ưu tiên trước hết cho những việc quan trọng nhất.</p></li>
<li><p>Bám theo lịch và hình thành thói quen, cho dù tầm mức thực hiện có ra sao.</p></li>
</ul>


<p>Còn bạn, bạn đã làm gì để quản lý thời gian tốt hơn và tăng hiệu suất công việc ở nơi làm việc, ở nhà hay phòng gym?</p>

<p>Lược dịch từ: <a href="http://jamesclear.com/time-management-tips">3 Time Management Tips That Actually Work</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trải nghiệm người dùng (UX) 101 cho các công ty khởi nghiệp]]></title>
    <link href="http://blog.teracy.com/2017/03/12/trai-nghiem-nguoi-dung-101-cho-cac-cong-ty-khoi-nghiep/"/>
    <updated>2017-03-12T09:41:00+00:00</updated>
    <id>http://blog.teracy.com/2017/03/12/trai-nghiem-nguoi-dung-101-cho-cac-cong-ty-khoi-nghiep</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/03/12/ux-cho-cong-ty-khoi-nghiep.jpeg" title="UX cho công ty khởi nghiệp" ></p>

<p>&ldquo;<em>Khách hàng không quan tâm đến giải pháp của bạn, họ quan tâm đến vấn đề của họ.</em>&rdquo; &ndash; Dave McClure</p>

<p><strong>1. Ưu tiên tính hữu ích trước, tính sử dụng sau:</strong> Dụng cụ lột vỏ chuối có phải là một sản phẩm hữu
ích không? Sản phẩm &amp; dịch vụ phải có tính hữu ích trước khi được đưa vào sử dụng. Sản phẩm cần có giá
trị tiện ích rõ ràng khi đáp ứng nhu cầu về thể chất hoặc tâm lí của con người.</p>

<p><em>Tại sao sản phẩm của bạn hữu ích?</em></p>

<p><strong>2. Trọng tâm:</strong> Có điểm gì chung giữa Instagram, Dropbox, Basecamp, và Airbnb? Tất cả các ứng dụng
đều có nhiệm vụ riêng và thực hiện tốt chức năng!</p>

<p>Khổng Tử có câu &ldquo;<em>Nếu đuổi theo hai con thỏ, bạn sẽ chẳng bắt được con nào.</em>&rdquo;</p>

<p>Mỗi sản phẩm có một điểm mạnh riêng và phải xác định được trọng điểm để làm cho sản phẩm có sức hút.
Những công ty khởi nghiệp thường có xu hướng thêm quá nhiều tính năng, khiến cho sản phẩm không có
điểm nhấn, không những không hữu ích mà còn không khả dụng, thế thì làm sao có thể thu hút được người mua.</p>

<p><em>Nhiệm vụ quan trọng mà bạn cam kết thực hiện đối với người dùng sản phẩm của bạn là gì?</em></p>

<!-- more -->


<p><strong>3. Sản phẩm có mức giá tối thiểu</strong>: Người ta thường nói vế các sản phẩm có tính khả dụng tối thiếu,
tuy nhiên chất lượng của chúng thường rất kém. Không phải vì các sản phẩm này do những người không đủ
năng lực thực hiện mà bởi vì các sản phẩm này được phát hành sớm, không xuất phát từ quan điểm của
người mua hay người sử dụng. Không phải vì các sản phẩm này không hữu dụng, mà bởi vì các sản phẩm
này có những chức năng mà người dùng thực sự không dùng tới.</p>

<p>Vì vậy, hãy bỏ những sản phẩm có tính khả thi cực tiểu đi và bắt đầu với một sản phẩm chỉ cần khách
hàng sẵn sàng trả tiền mua. Bắt đầu với một sản phẩm chỉ cần người sử dụng yêu thích!</p>

<p><em>Lý do lớn khiến khách hàng sẽ trả tiền để sử dụng sản phẩm của bạn là gì? Điều gì thực sự làm nên
linh hồn sản phẩm của bạn?</em></p>

<p><strong>4. Trải nghiệm người dùng không chỉ là giao diện người dùng:</strong> Nếu bạn cho rằng giao diện trông bắt
mắt sẽ là một trải nghiệm người dùng tuyệt vời, thì bạn đã nhầm.</p>

<p>Trải nghiệm người dùng (UX) thực chất tập trung vào tính hữu ích, tính khả dụng, và có ý nghĩa với
người sử dụng trong khi giao diện người dùng và thiết kế hình ảnh đảm bảo rằng sản phẩm cuối cùng có
&ldquo;vẻ ngoài&rdquo; bắt mắt.</p>

<p><em>Sản phẩm của bạn thiên về tính hữu ích, tính khả dụng và có ý nghĩa hay thiên về hình thức bắt mắt?</em></p>

<p><strong>5. Trải nghiệm người dùng là tất cả thuộc về người dùng:</strong> Trải nghiệm người dùng tập trung vào tính
hữu ích, tính khả dụng, và có ý nghĩa đối với người dùng. Vì vậy, nếu bạn không thấu hiểu người dùng,
bạn không thể làm thiết kế sản phẩm có ý nghĩa.</p>

<p>Không bao giờ là quá muộn để tìm kiếm những nhu cầu thật sự của người sử dụng, hãy đi và quan sát những
gì người dùng làm trong ngày hoặc đề nghị cho bạn xem những gì họ làm. Bạn sẽ biết nhiều hơn về cách
làm thế nào để thiết kế sản phẩm của bạn một cách hoàn toàn khác biệt. Hãy nhớ rằng, người dùng chắc
chắn không phải là bà, là bố, là bạn gái, hay đồng nghiệp của bạn!</p>

<p><em>Liệu bạn đã tiếp xúc với ít nhất 10 người dùng thực tế và có tiềm năng chưa?</em></p>

<p><strong>6. Sử dụng công cụ đồng cảm Empathy</strong>: Nhiều CEO khởi nghiệp tin rằng Axure và Photoshop là những
công cụ trải nghiệm người dùng hữu ích nhất. Điều thú vị là, tất cả nhà khởi nghiệp đều lưu tâm về
giao diện người dùng chứ không phải trải nghiệm người dùng!</p>

<p>Đã khi nào bạn nghe về một công cụ tuyệt vời có tên Empathy chưa? Empathy được các chuyên gia sáng
tạo hàng đầu trên toàn thế giới sử dụng để thiết kế các sản phẩm tuyệt vời.</p>

<p>Vâng, tôi đang nói về sự đồng cảm của con người đơn thuần. Đồng cảm là khả năng nhận ra những trải
nghiệm cảm xúc của người khác &ndash; người dùng. Bạn đồng cảm khi bạn cảm được những điều mà người khác đang
cảm nhận, đó là những biểu cảm, hi vọng, khát khao và nỗi đau của họ.</p>

<p>Nếu cô lập trong cách làm, bạn sẽ chỉ tạo ra  những sản phẩm mà không ai muốn sử dụng. Khi bạn đồng
cảm với người dùng, bạn sẽ làm ra các sản phẩm tuyệt vời.</p>

<p><em>Bạn có thể kể 5 câu chuyện người dùng tuyệt vời vể sản phẩm của bạn?</em></p>

<p><strong>7. Định hình concept trên giấy</strong>: Khi concept được xây dựng bằng một công cụ điểm ảnh chính xác
hoàn hảo, phản hồi về nó từ người dùng chỉ là màu sắc, phông chữ và bố cục, chứ chẳng bao giờ đề cập
tới concept.</p>

<p>Tuy nhiên, khi concept được phác hoạ trên giấy hoặc bảng trắng, người dùng sẽ phản hồi về lợi ích và
tính hữu dụng của sản phẩm, đó là điều bạn thực sự cần! Nguyên mẫu được phác thảo trên giấy nhanh chóng,
dễ dàng, liên hồi, và chi phí bằng 0. Thêm vào đó, bạn nhận được thông tin phản hồi về các khái niệm
sản phẩm.</p>

<p><em>Khi đã định hình xong ý tưởng sản phẩm, sẽ là lúc bạn cần sử dụng đến các công cụ prototyping ban
đầu để tạo ra các wireframes chi tiết.</em></p>

<p><strong>8. Thiết kế liên hồi</strong>: Người làm marketing sử dụng các phép mô phỏng thị trường và phần mềm để kiểm
thử. Người thiết kế cũng cần phải tiến hành kiểm thử để phát hiện vấn đề và hiệu chỉnh. Trong nghề
thiết kế, việc kiểm thử được thực hiện với những người dùng thực ở các giai đoạn khác nhau của nguyên mẫu.</p>

<p>Các nhà thiết kế giỏi nhất thế giới luôn tuân thủ theo chu trình khép kín là thiết kế > kiểm thử người
dùng > thiết kế. Nếu bạn không kiểm thử với người sử dụng thực, bạn sẽ không biết thiết kế có sai sót gì.</p>

<p>Kiểm thử sớm và kiểm thử thường xuyên sẽ cho bạn sự tự tin để xây dựng một sản phẩm thực sự hữu ích
và khả dụng. Hãy từ bỏ thiết kế sơ khai nếu chúng không hiệu quả, đừng ngần ngại thiết kế lại. Liên
hồi, liên hồi và liên hồi.</p>

<p><strong>9. Khảo sát vô ích</strong>: Thật dễ khi hỏi người dùng với những câu hỏi &ldquo;Bạn thích gì?&rdquo;, &ldquo;Điểm tốt và
xấu của sản phẩm này là gì?&rdquo;, hoặc &ldquo;tôi có thể cải thiện sản phẩm bằng cách nào?&rdquo;</p>

<p>Tất cả các câu hỏi trên sẽ cung cấp cho bạn ý kiến ​​của người sử dụng &ndash; rất cảm tính, không hề tốt đối
với một sản phẩm mới. Vì vậy, hỏi ý kiến khách hàng là điều bạn KHÔNG BAO GIỜ phải làm!</p>

<p>Nếu khảo sát là những ý kiến ​​cảm tính, hãy ném kết quả đó vào thùng rác, đó là vị trí của chúng! Thứ
bạn cần là tìm hiểu hành vi người dùng.</p>

<p>&ldquo;<em>Thật sự rất khó để thiết kế sản phẩm bởi các nhóm tập trung. Hầu hết người ta không biết mình muốn
gì cho đến khi bạn cho họ thấy sản phẩm.</em>&rdquo; &ndash; Steve Jobs</p>

<p><strong>10. Làm thế nào để kiểm thử với người dùng</strong>: Để hiểu hành vi người dùng, nó khá là đơn giản.
Thực hiện theo 7 bước đơn giản này, và bạn sẽ hiểu rõ hành vi của người sử dụng trong bất cứ thời điểm nào:</p>

<ol type="a">
<li><p>Tạo một danh sách từ 3-5 nhiệm vụ quan trọng mà người dùng sẽ làm thường xuyên khi sử dụng sản phẩm
của bạn. Các nhiệm vụ đó đại loại như tạo một hóa đơn, gửi lại hóa đơn, kiểm tra xem một hóa đơn đã
được thanh toán chưa, và gửi lời nhắc nhở khi chậm thanh toán.</p></li>
<li><p>Mời người dùng thực tới văn phòng của bạn, mỗi lần một người, và làm cho họ thật thoải mái.</p></li>
<li><p>Cho người dùng thấy màn hình đầu tiên và yêu cầu họ hoàn thành nhiệm vụ 1. Khuyến khích họ luôn nói
với bạn những gì họ đang làm.</p></li>
<li><p>Chờ đợi và quan sát kỹ người dùng làm việc, không trả lời câu hỏi liên quan đến cách sử dụng của
sản phẩm. Sau khi hoàn thành, có thể thành công hoặc gặp khó khăn, hãy đưa cho người dùng nhiệm vụ 2.</p></li>
<li><p>Sau mỗi nhiệm vụ, đặt câu hỏi về lý do tại sao người dùng thực hiện theo cách đó, không hỏi về lí
do thích hay không thích.</p></li>
<li><p>Cuối cùng, tặng một món quà nhỏ cho người sử dụng, có thể là một tách cà phê và một ít bánh quy.</p></li>
<li><p>Đừng lo lắng về việc phân tích, tâm trí của bạn được kết nối với một số ý tưởng để giải quyết vấn đề!</p></li>
</ol>


<p>Bây giờ bạn đã thuộc nhóm người hiểu được mặt tốt của kiểm thử tính khả dụng (UT), hứa với tôi là bạn
sẽ làm điều này thường xuyên với sản phẩm của bạn.</p>

<p>Bạn có thể sử dụng WebEx cho người dùng từ xa. Và bạn không cần đến nguyên mẫu thật, bạn có thể sử
dụng nguyên mẫu trên giấy dễ dàng chỉ cần tiếp tục đẩy màn hình tiếp theo trên màn hình hiện tại.</p>

<p><strong>11. Phân tích kết hợp với kiểm thử tính khả dụng</strong>: Phân tích là một cách tuyệt vời để biết người
dùng đến từ đâu, những gì người dùng đã làm, và nơi mà người dùng rời đi. Phân tích là một điểm khởi
đầu để xác định khả năng sử dụng.</p>

<p>Tuy nhiên, phân tích sẽ không cần thiết khi bạn muốn hiểu lý do cho hành vi của người sử dụng: tại sao
người dùng đến, tại sao người dùng làm những việc họ đang làm, và tại sao người dùng lại không làm việc
gì đó. Kiểm thử tính khả dụng là một công cụ tốt để hiểu được lý do của hành vi người dùng, bây giờ
bạn đã trở nên chuyên nghiệp!</p>

<p><strong>12. Tôi phụ thuộc vào phản hồi người dùng</strong>: Người dùng gọi điện thoại hoặc gửi email khi họ gặp vấn
đề không thể giải quyết thấu đáo. Hầu hết người dùng không bận tâm đến việc gửi phản hồi, họ chỉ từ
bỏ sản phẩm của bạn. Bạn sẽ không bao giờ có thể tìm thấy hiệu quả sử dụng lớn hoặc giải pháp thay thế
nhiệm vụ với phản hồi người dùng.</p>

<p>Kiểm thử tính khả dụng giúp bạn gần gũi hơn với người sử dụng và hiểu các vấn đề thực tế rất sớm. Bạn
sẽ giải quyết được một lượng lớn các vấn đề trước khi phát hành sản phẩm, giúp bạn tránh được rất nhiều
vấn đề đau đầu sau này.</p>

<p><strong>13. Phác hoạ cấu trúc khung sườn (Wireframes) bằng Keynote hoặc Powerpoint</strong>: Tôi đã thực hiện nguyên
mẫu trên giấy và tôi đã thử nghiệm chúng &ndash; người dùng yêu thích sản phẩm của tôi, bây giờ liệu tôi có
thể sử dụng các công cụ tạo mẫu UX?</p>

<p>Bạn có thể sử dụng, đây là thời điểm để sử dụng tất cả các công cụ tạo mẫu tốt nhất. Vấn đề quan trọng
trong giai đoạn này là thông tin phản hồi từ các bên liên quan &ndash; khách hàng, người sử dụng, chuyên gia&hellip;
Vì vậy, chọn một công cụ sẽ giúp thu thập phản hồi rất tốt.</p>

<p>Các công cụ cung cấp cho bạn giá trị tối đa trong giai đoạn này là Keynote (trên Mac) hoặc PowerPoint.
Bạn có thể chi tiết hoá thiết kế của bạn rất tốt bằng cả hai công cụ. Điểm tốt nhất là bạn có thể gửi
đến nhiều người cùng lúc để xem xét một cách dễ dàng, và bất cứ ai trong nhóm của bạn cũng có thể cùng xem xét.</p>

<p><strong>14. 5 câu hỏi giao diện người dùng cần hỏi</strong>: Tuân thủ các nguyên tắc thiết kế và luôn theo sát thiết
kế trực quan tốt nhất.</p>

<p>Đừng quên hỏi 5 câu hỏi sau đây trong mỗi màn hình tương tác với người dùng để có được một sản phẩm
thực sự hữu dụng:</p>

<ol type="a">
<li><p>Người dùng đang cần thông tin gì để hoàn thành nhiệm vụ/ nhiệm vụ phụ / lĩnh vực này?</p></li>
<li><p>Cần làm gì để có thể cung cấp các thông tin còn thiếu?</p></li>
<li><p>Các bước tiếp theo khả dĩ nhất mà người dùng sẽ thực hiện là gì?</p></li>
<li><p>Chúng ta có thể giúp đỡ / hướng dẫn người dùng thực hiện bước dự tính tiếp theo bằng cách nào?</p></li>
<li><p>Người dùng đang ở đâu và sẽ được gì sau khi hoàn thành nhiệm vụ này?</p></li>
</ol>


<p>Dịch từ: <a href="https://medium.com/start-up-vision/ux-101-for-startups-dc849621262f#.9m3w1g4rc">UX 101 for startups
</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upcoming event: Productive development environment with teracy-dev]]></title>
    <link href="http://blog.teracy.com/2017/02/17/upcoming-event-productive-development-environment-with-teracy-dev/"/>
    <updated>2017-02-17T09:41:00+00:00</updated>
    <id>http://blog.teracy.com/2017/02/17/upcoming-event-productive-development-environment-with-teracy-dev</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/02/17/opentour01-productive-development-environment-teracy-dev.jpg" title="Productive development environment with teracy-dev" ></p>

<p>We are very excited about an upcoming event with the topic &ldquo;Productive development environment with teracy-dev&rdquo;
presented by Hoat Le, Co-founder, and CEO of Teracy. The event will be held on Thursday, February
23 at 6:30 PM &ndash; 9:30 PM at Toong Hoang Dao Thuy (25T2 Hoang Dao Thuy, Ha Noi). This is
the first event in the series of OpenTour&rsquo;s activities.</p>

<p>OpenTour is started from the idea of ​​collaboration, and help each other of three open source communities in
Vietnam, including OpenCPS, Vietnam OpenStack, and Docker Hanoi. OpenTour is a series of activities
and events aiming at building Vietnamese FOSS ecosystem, building a network of FOSS experts to promote
the use, application and development of FOSS in Vietnam, especially for ​​ICT enterprises
and training institutions, on the base of absorbing ideas and activity patterns of the FOSS community
in the world, and through shared activities and promoting.</p>

<!-- more -->


<p><strong>Agenda</strong>:</p>

<ul>
<li><p>Introduce about OpenTour</p></li>
<li><p>teracy-dev: <a href="http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/">the only truly universal productive development platform with Docker on macOS, Linux, and Windows for developers</a>.</p>

<ul>
<li><p>Introduce about teracy-dev</p></li>
<li><p>The existing problems that many developers are struggling:</p>

<ul>
<li><p>The problems when there was no Docker yet</p></li>
<li><p>The problems when there was no teracy-dev yet</p></li>
<li><p>The approaches and solutions for these problems with teracy-dev</p></li>
<li><p>The 4-year story of teracy-dev</p></li>
<li><p>The Docker workflow with teracy-dev</p></li>
</ul>
</li>
<li><p>teracy-dev demo with the real projects</p></li>
<li><p>Questions and Answers</p></li>
</ul>
</li>
</ul>


<p>Join us! To have more details and register to join the event, please see the details at <a href="https://www.facebook.com/events/979555312146106/.">https://www.facebook.com/events/979555312146106/.</a>
It&rsquo;s our honor to have your presence at this event. See you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev v0.5.0-b1 release]]></title>
    <link href="http://blog.teracy.com/2017/02/14/teracy-dev-v0-5-0-b1-release/"/>
    <updated>2017-02-14T12:41:00+00:00</updated>
    <id>http://blog.teracy.com/2017/02/14/teracy-dev-v0-5-0-b1-release</id>
    <content type="html"><![CDATA[<p>We&rsquo;re very happy to announce our so long awaiting major release of teracy-dev, the v0.5.0-b1 release
that introduces lots of features and changes, high performance with Docker workflow as the default.</p>

<!-- more -->


<h2>v0.5.0-b1</h2>

<p>This is the beta 1 release of v0.5.0, what does it mean? By following the
<a href="http://dev.teracy.org/docs/semantic_versioning.html">semantic versioning guide</a>, it means:</p>

<blockquote><p>features completed, only minor bugs are expected. Avoid refactoring here, just fix bugs</p></blockquote>


<p>This v0.5.0-b1 release is tested with all our projects and our clients&#8217; projects, so we can guarantee
that the release has a very high quality and stability that you can use it for everyday projects.</p>

<p>We&rsquo;re still lacking lots of documentation guides for users to explore and leverage all the supported
features more easily.</p>

<h2>Changes</h2>

<p>This major release includes lots of features and improvements:</p>

<ul>
<li>high performance on Windows, especially file syncing</li>
<li>Docker workflow out of the box, can use any versions of docker, docker-compose</li>
<li>support all type of provisioners configurations</li>
<li>use public_network by default</li>
<li>config override the object within array</li>
<li>Vagrantfile-ext support</li>
<li>use rsync as the default sync mechanism (with the support from vagrant-gatling-rsync and
vagrant-rsync-back plugins)</li>
<li>reverse proxy support with /etc/hosts update for auto domain management</li>
<li>auto vagrant plugins installation support</li>
</ul>


<p>There are more that you should explore yourselves when using <code>teracy-dev</code> for a while.</p>

<h2>What&rsquo;s next?</h2>

<p>We&rsquo;re working hard to add more documentations and guides. We&rsquo;ll fix bugs if any.</p>

<p>After v0.5.0 final is release, we&rsquo;ll take on the next major release v0.6.0 that follow our
<a href="http://blog.teracy.com/2016/08/19/teracy-dev-vision/">teracy-dev&rsquo;s vision</a>:</p>

<blockquote><p>teracy-dev is the best universal development tool for everyone.</p></blockquote>


<p>We&rsquo;ll take all the feedback from v0.5.0 usage to continue making <code>teracy-dev</code> better and greater.</p>

<p>Don&rsquo;t hesitate to use <a href="https://github.com/teracyhq/dev">teracy-dev v0.5.0-b1</a> for your everyday
projects from today by getting started with <a href="http://dev.teracy.org/docs/getting_started.html">http://dev.teracy.org/docs/getting_started.html</a></p>

<p>If you have any feedbacks or problems, you&rsquo;re welcome to create issues for the project at
<a href="https://github.com/teracyhq/dev/issues">https://github.com/teracyhq/dev/issues</a></p>

<p>Enjoy and happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nguyên tắc thiết kế sản phẩm]]></title>
    <link href="http://blog.teracy.com/2017/02/05/nguyen-tac-thiet-ke-san-pham/"/>
    <updated>2017-02-05T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2017/02/05/nguyen-tac-thiet-ke-san-pham</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/02/05/nguyen-tac-thiet-ke-san-pham.png" title="Nguyên tắc thiết kế sản phẩm" >
&ldquo;<em>Các chi tiết không chỉ là chi tiết. Nó tạo nên thiết kế.</em>&rdquo; &ndash; Charles Eames</p>

<h1>01. Tính hữu dụng là nhiệm vụ</h1>

<p>Nếu sản phẩm của bạn không hữu dụng, nếu con người không tìm được cách sử dụng sản phẩm đó, như vậy
thiết kế của sản phẩm đã thất bại. Sản phẩm của bạn phải giúp con người tạo ra những điều có giá trị
trong cuộc sống của họ. Giá trị này thông qua việc sử dụng có thể trở nên thiết thực (Đồng hồ Timex
của tôi có thể báo thời gian), có thể là giá trị xã hội (Đồng hồ Rolex của tôi gây ấn tượng với bạn
bè tôi), hoặc giá trị về cảm xúc (đồng hồ của tôi là món quà từ vợ/chồng của tôi). Vòng đời sử dụng
của sản phẩm bao gồm khả năng biết về tính hữu dụng của sản phẩm, một trải nghiệm tốt khi lần đầu tiên
sử dụng sản phẩm, khả năng sử dụng sản phẩm và thành công theo thời gian.</p>

<!-- more -->


<h1>02. Trải nghiệm chính là sản phẩm</h1>

<p>Khi bạn có sản phẩm thì sẽ có trải nghiệm của người sử dụng sản phẩm đó. Thật dễ dàng để thấy được
sự khác biệt từ xa, nhưng đối với người sử dụng sản phẩm của bạn, các sản phẩm luôn giống nhau. Mọi
tương tác đều là vấn đề và trở thành môt phần trải nghiệm sản phẩm. iPod nguyên bản chính là một ví dụ
kinh điển: trải nghiệm của iPod bao gồm mọi thứ từ việc cầm iPod lên và cảm nhận trọng lượng của thiết
bị cho đến việc tìm kiếm nhạc với nút điều khiển hình tròn, đến việc đồng bộ với máy tính của bạn và
việc mua nhạc từ cửa hàng iTunes. Tất cả những tương tác này cùng nhau tạo nên toàn bộ trải nghiệm
sản phẩm và cuối cùng đó là những gì mà khách hàng đã mua.</p>

<h1>03. Giải quyết các vấn đề còn tồn tại</h1>

<p>Khi chúng ta nỗ lực tạo ra những sản phẩm thay đổi thế giới, chúng ta thường tạo ra một vài thứ mà
trên thế giới chưa bao giờ nhìn thấy. Nhưng việc đổi mới sản phẩm không phải là về sản phẩm mới sẽ giải
quyết vấn đề mới. Đổi mới sản phẩm là sản phẩm mới sẽ giải quyết các vấn đề đang tồn tại tốt hơn các
sản phẩm hiện nay đang làm. Lấy Google Search, Netflix và Facebook làm ví dụ. Những dịch vụ phổ biến
này đơn giản là giải quyết các vấn đề đang tồn tại tốt hơn so với chúng trước đây.</p>

<h1>04. Tìm kiếm sự đầu tư</h1>

<p>Các tính năng của sản phẩm tốt nhất là các tính năng sẽ được sử dụng. Cách thức tốt nhất để dự đoán
liệu một tính năng sẽ được sử dụng đó là đã có người đầu tư vào lĩnh  vực đó. Đã có ai đầu tư
tiền bạc, thời gian, hay công sức để giải quyết vấn đề này chưa? Đây là các chỉ số cho thấy vấn đề
đáng được giải quyết. Nếu mọi người nói họ có một vấn đề nhưng lại không đầu tư để giải quyết vấn đề
đó. Như vậy, vấn đề đó không thực sự nằm trong top danh sách ưu tiên của họ. Vì vậy hãy tìm kiếm
đầu tư hiện tại trước khi bổ sung một sản phẩm hoặc tính năng mới.</p>

<h1>05. Các tính năng mẫu của công cụ thực</h1>

<p>Một cách để bạn có thể chắc chắn có người đang đầu tư vào vấn đề đó là tìm kiếm công cụ để sử dụng. Các
công cụ là đối tượng của thế giới thực mà con người sử dụng để hoàn thành một công việc. Hãy suy nghĩ
đến những ghi chú được dính xung quanh màn hình máy tính. Các công cụ thường xuyên bị va đập, giống
như việc đặt băng dính trong lên Iphone để bảo vệ màn hình hoặc một bảng tính Excel giúp tổ chức thông
tin. Khi bạn trải qua một công cụ và coi công cụ đó như vàng và đề nghị chủ sở hữu công cụ đó nói cho
bạn biết tất cả thông tin về công cụ đó, công cụ đó trực tiếp chuyển thành các tính năng hữu ích.</p>

<h1>06. Làm cho phù hợp và hoàn thành vấn đề</h1>

<p>Chúng ta xây dựng được niềm tin với người dùng khi một vấn đề nào đó có vẻ đúng, khi các giao diện đã
được đánh bóng tới độ chính xác từng pixel, khi việc viết quảng cáo là hoàn toàn rõ ràng, khi các thương
hiệu trở nên chuyên nghiệp. Thông điệp ngầm là “những người dùng này thực sự quan tâm đến việc họ sẽ
làm gì&hellip;chỉ cần chú ý chi tiết thôi&#8221;. Khi đó họ sẽ mang thêm cơ hội thành công cho sản phẩm của chúng ta.</p>

<h1>07. Chất lượng của phát hành tạo lên kỳ vọng</h1>

<p>Việc phát hành thiết lập nên kỳ vọng. Điều này trở thành phổ biến để phát hành sản phẩm một cách nhanh
nhất có thể và sau đó lặp lại dựa trên những phản hồi từ người dùng. Điều này rất đáng khen ngợi; Không có sự
thay thế cho việc sử dụng thực tế. Nhưng dù bạn phát hành cái gì đi nữa, cũng cần đảm bảo rằng đó
là sự nỗ lực hết mình của bạn. Nếu tất cả những phát hành của bạn mới hoàn thành được 80% dù đó là
cái mà mọi người mong đợi. Mỗi lần như vậy, kỳ vọng của họ cũng sẽ giảm dần mỗi lần phát hành vì niềm
tin của họ suy yếu dần. Tuy nhiên nếu mỗi sản phẩm trong số các sản phẩm phát hành của bạn, bất kể là
sản phẩm đó nhỏ như thế nào nhưng có chất lượng cao nhất, nhưng những người sử dụng sản phẩm của bạn
sẽ biết rằng sản phẩm đó rất đáng để họ bỏ thời gian để chú ý. Thậm chí, họ còn rất háo hức mong chờ
sản phẩm đó.</p>

<h1>08. Phát hành sản phẩm càng nhỏ thì sản phẩm càng tốt</h1>

<p>Hiện tại, thật dễ dàng để xây dựng các tính năng. Công cụ phát triển đã bổ sung thêm các tính năng
nhanh hơn so với trước đây. Tuy nhiên, phạm vi tính năng luôn luôn là vấn đề cũ. Mọi tính năng mà bạn
bổ sung là bất đồng trong giao diện và là một gánh nặng bổ sung. Tuy nhiên, nếu sản phẩm của bạn thực
sự được tập trung và không cố gắng thực hiện nhiều hơn và bạn sẽ nói không đối với nhiều tính năng
hơn là bạn nói có.</p>

<h1>09. 10% cuối cùng của sản phẩm là khó làm nhất</h1>

<p>Sự khác nhau giữa một sản phẩm tốt và lý tưởng là ở 10% cuối cùng. Mọi người đều có 90% giống nhau&hellip;
các tính năng cốt lõi giống nhau, giá và cốt truyện tương tự nhau. Nhưng 10% cuối cùng là sự khác biệt
thực sự. Đây là phần để phân biệt bạn với những đối thủ cạnh tranh của bạn. Đó là máu, mồ hôi và nước
mắt để làm chi tiết sản phẩm. Và điều này có thể lấy đi 50% thời gian của bạn. Tuy nhiên, thời gian
không phải là cái mà bạn sẽ đo đếm. Bạn sẽ đo đếm sự khác biệt giữa tốt và lý tưởng.</p>

<h1>10. Biết rõ đối thủ cạnh tranh của bạn là ai</h1>

<p>Email và Excel là 2 đối thủ phần mềm lớn nhất của nhau từ trước đến giờ: mọi người sử dụng hai phần
mềm này để làm mọi thứ. Chúng tôi chưa nghĩ về việc coi hai phần mềm này là đối thủ cạnh tranh vì
chúng không cạnh tranh trực tiếp để thay thế. Thật dễ dàng để làm theo các phân tích đặc điểm của
sản phẩm tạo ra trong mỗi ngành công nghiệp. Nhưng các đặc điểm này hiếm khi bao quát đầy đủ lĩnh
vực cạnh tranh. Do đó tìm kiếm các đối thủ cạnh tranh gián tiếp thường nguy hiểm như việc tìm các
đối thủ cạnh tranh trực tiếp. Ví dụ, điện thoại có máy ảnh là một đối thủ cạnh tranh gián tiếp nhưng
là đối thủ “chết người” với máy ảnh kỹ thuật số và máy quay video cầm tay. Bạn cần phải biết ai là
đối thủ cạnh tranh trực tiếp và gián tiếp của bạn để tạo ra sự đổi mới thực sự của sản phẩm.</p>

<h1>11. Sử dụng thực tế và mong muốn</h1>

<p>Thường xuyên có sự khác nhau giữa việc bạn muốn mọi người sử dụng sản phẩm của bạn để làm gì và thực
tế nó được sử dụng để làm gì. Đừng lầm lẫn giữa hai việc này. Hãy trung thực về cách mọi người sử dụng
sản phẩm của bạn. Trong một vài trường hợp, sản phẩm sẽ không phải là cái bạn dự định làm. Đây là
điều đáng lưu ý. Mặt khác, người sử dụng sản phẩm không đúng cách vì họ không học sử dụng đúng cách
và cần đến sự trợ giúp. Kịch bản tệ nhất là khi mọi người đang sử dụng một sản phẩm không đúng cách mà
lại không có sự trợ giúp của bạn &ndash; một nhà thiết kế hiểu biết.</p>

<h1>12. Giá trị cá nhân đi trước giá trị xã hội</h1>

<p>Thật dễ dàng để mong chờ giá trị xã hội của phần mềm. Ooh, nếu chúng ta xây dựng đúng giá trị thì khi
đó mọi người sẽ chia sẻ với bạn bè của họ! Tuy nhiên mọi người hiếm khi sử dụng phần mềm chỉ đơn thuần
vì nó mang tính xã hội. Họ sử dụng phần mềm vì phần mềm đó trước hết cung cấp một vài giá trị cá nhân
mà họ có thể sử dụng chúng mà không cần sự tham gia của người khác. (Điều này có thể bao gồm những
giá trị khác nhưng hành động chia sẻ thường chỉ đứng ở vị trí thứ hai).</p>

<h1>13. Người sử dụng không phải là nhà thiết kế sản phẩm</h1>

<p>Người sử dụng luôn có những ý kiến bất tận về sản phẩm của bạn, nhưng họ không phải là nhà thiết kế.
Bạn mới là người thiết kế. “Khi mọi người nói với bạn cái gì sai hoặc không hoạt động với họ, hầu như
họ luôn luôn đúng. Khi họ nói với bạn một cách chính xác những gì họ nghĩ
là sai và làm thế nào để giải quyết chúng, họ hầu như luôn luôn sai.” Câu trích dẫn này của Neil
Gaiman là đúng về những người rất có ý thức nhận biết một vấn đề tồn tại nhưng không biết cách giải
quyết vấn đề đó (nếu họ biết cách giải quyết vấn đề, họ đã không có vấn đề gì!) Vì vậy, đừng vội bỏ
qua vấn đề một cách nhanh chóng, hãy chắc chắn rằng bạn đã đào sâu hơn để hiểu vấn đề một cách cơ bản,
điều này có vẻ như không liên quan. Một nhà thiết kế mù quáng đi theo ý tưởng của những người sử dụng
sẽ nhanh chóng mất đi khả năng tự báo cáo một cách chính xác. Đừng khó chịu với người dùng về vấn đề này.
Đây là bản chất của người sử dụng.</p>

<h1>14. Hành vi mà bạn đã nhìn thấy là hành vi để bạn thiết kế</h1>

<p>Bất kể bạn lên kế hoạch như thế nào, mọi người thường cư xử theo các cách thức không thể dự kiến trước.
Đừng bỏ qua hành vi, chấp nhận hành vi mà bạn nhìn thấy là hành vi để bạn thiết kế dù điều đó là cố ý
hay không. Nếu có một vài thứ mà bạn không thể lên kế hoạch, việc đương nhiên mà bạn cần làm là tập
trung hơn vào những tương tác cốt lõi, làm cho các tương tác càng chặt chẽ càng tốt để tập trung vào
các nỗ lực của người sử dụng.</p>

<h1>15. Sản phẩm lý tưởng được tập trung vào một vấn đề duy nhất</h1>

<p>Thông thường mọi người thường sáng tạo sản phẩm với hy vọng hấp dẫn tất cả mọi người. Nhưng sản phẩm
tốt nhất là sản phẩm hấp dẫn theo cách đặc biệt cho những người đang cố gắng làm một điều gì đó đặc
biệt… họ là chuyên gia trong một vấn đề cụ thể. Đó là trực giác ngược lại để tập trung vào thị trường
nhỏ nhưng hành trình đến thị trường lớn sẽ bắt đầu từ đây.</p>

<h1>16. Sản phẩm đột phá giống như đồ chơi</h1>

<p>Các sản phẩm đột phá thường bắt đầu trông giống như một món đồ chơi. Các sản phẩm không có vẻ nhiều,
nhưng cái mà các sản phẩm có là một ngưỡng nhiều hữu dụng hơn theo cách nào đó so với những sản phẩm
hiện tại. Có thể các sản phẩm rẻ hơn, dễ sử dụng hơn hoặc có tính chất cộng tác hơn. Điều này có vẻ
không có sự đánh bóng hay sự trưởng thành hoặc cơ sở khách hàng lớn hơn và
vì vậy sản phẩm xuất hiện giống một món đồ chơi. Và khía cạnh khiêm tốn này chính xác là lý do tại
sao thường quá muộn khi người thiết kế nhận ra rằng sản phẩm này được mọi người quan tâm.</p>

<h1>17. Việc định vị sản phẩm là rất quan trọng</h1>

<p>Cách mọi người nghĩ về sản phẩm của bạn là vô cùng quan trọng để họ chấp nhận và sử dụng sản phẩm.
Cách mà bạn định vị sản phẩm của mình, cách mà bạn nói về sản phẩm, mô tả sản phẩm, so sánh sản phẩm
đó với các sản phẩm khác, cho mọi người một khuôn khổ để hiểu về sản phẩm và làm thế nào có thể sử
dụng chúng. Bạn có thể định vị sản phẩm như là một mục sản phẩm mới hoặc như một sự cải tiến trong
các hạng mục hiện có. Điều này thường tạo cảm giác định vị sản phẩm dựa trên hạng mục hiện có… mọi
người thường tìm hiểu bằng cách so sánh với các sản phẩm khác mà họ  đã biết.</p>

<h1>18. Sản phẩm phù hợp với thị trường là khi mọi người bán hàng hộ bạn</h1>

<p>Sản phẩm phù hợp với thị trường (Product market fit) là một thuật ngữ vui, nhưng ở đây chính là cách
thức cụ thể để nghĩ về
sản phẩm. Khi mọi người hiểu và sử dụng sản phẩm của bạn đủ để họ công nhận giá trị của nó đã là một
thắng lợi lớn. Nhưng khi họ bắt đầu chia sẻ các trải nghiệm tích cực của họ với những người khác,
khi bạn có thể tái tạo trải nghiệm đó với người sử dụng mới đã được nghe những trải nghiệm từ những
người dùng hiện tại, như vậy bạn đã có được sản phẩm phù hợp với thị trường. Và
khi điều này xảy ra thì một số điều kì diệu cũng xảy ra. Điều bất ngờ đó là khách hàng của bạn sẽ trở thành
người bán hàng cho bạn.</p>

<p>Dịch từ: <a href="http://bokardo.com/principles-of-product-design/">Principles of Product Design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tư duy thiết kế: Cẩm nang cho sự đổi mới (Phần 2)]]></title>
    <link href="http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2/"/>
    <updated>2017-01-04T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/tu-duy-thiet-ke.jpeg" title="Tư duy thiết kế" ></p>

<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1/">Phần 1</a></p>

<h1>Giai đoạn ba: Tạo ra ý tưởng</h1>

<p>Sau khi xây dựng sự đồng cảm và tái xác định những thách thức, vấn đề hoặc nhu cầu, đã đến lúc chúng ta cần tư duy hành động.</p>

<p>Theo quan điểm của tôi, tạo ra ý tưởng là phần tốt nhất của quá trình này vì nó thú vị và hấp dẫn.
Giai đoạn tạo ra ý tưởng có hai phần rõ ràng:</p>

<p><strong>1. Phân kỳ (Tạo Lựa chọn)</strong></p>

<p>Nhóm cùng nghiên cứu đa ngành là những người xây dựng sự đồng cảm và tái định nghĩa vấn đề, cả nhóm tập hợp lại vào thời gian đã xác định trước để &ldquo;tuôn&rdquo; ra những ý tưởng mà không đưa ra phán xét gì về những ý tưởng đó. Tại sao lại vậy? Bởi vì khi tập trung vào số lượng và áp dụng giải pháp chưa xác định để tìm kiếm sự đổi mới thực sự. Để thực hiện điều này, hãy làm theo các quy tắc của kỹ thuật động não:</p>

<!-- more -->


<ul>
<li><p>Trì hoãn đánh giá</p></li>
<li><p>Lựa chọn số lượng</p></li>
<li><p>Một cuộc trò chuyện tại một thời điểm</p></li>
<li><p>Nhìn trực quan</p></li>
<li><p>Xây dựng trên đầu trang của những ý tưởng khác (&ldquo;Có, và &hellip;&rdquo;)</p></li>
<li><p>Bám sát chủ đề</p></li>
<li><p>Khuyến khích những ý tưởng điên rồ</p></li>
</ul>


<p>Trong tất cả các phiên Tư duy thiết kế tôi đã trải qua, các đội đã có thể nảy ra hơn 100 ý tưởng chỉ trong một giờ.</p>

<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/phien-dong-nao.jpeg" title="phiên động não" ></p>

<p><em>Kỹ thuật động não (phân kỳ) trong quá trình đào tạo Tư duy Thiết kế tại Brazil</em></p>

<p><strong>2. Hội tụ (Hãy lựa chọn)</strong></p>

<p>Trong hàng nghìn ý tưởng để lựa chọn, các đội sẽ chọn ra ý tưởng mà họ sẽ thực hiện. Kỹ thuật tốt là bỏ phiếu bằng hình dán: mỗi thành viên trong nhóm nhận được một tập các nhãn dán và từng cá nhân mỗi thành viên trong nhóm đánh dấu các ý tưởng mà họ muốn thực hiện. Sau khi quá trình này hoàn tất, sẽ dễ dàng để lựa chọn các ý tưởng một cách dân chủ.</p>

<p>Điều quan trọng là phải có hai giai đoạn rõ ràng và riêng biệt: 1 giờ cho kỹ thuật động não (phân kỳ) và 1 giờ để quyết định lựa chọn (hội tụ).</p>

<h1>Giai đoạn bốn: Nguyên mẫu</h1>

<p>Hãy xây dựng để suy nghĩ và cảm nhận. Một nguyên mẫu biến một ý tưởng thành một cái gì đó hữu hình và &ldquo;có thể thử nghiệm được&rdquo;.</p>

<p>&ldquo;Một nguyên mẫu đáng giá hàng ngàn cuộc họp&rdquo;, câu nói được phát biểu ở IDEO.</p>

<p>Có ba phần trong giai đoạn này:</p>

<ol>
<li><p>Cảm hứng   &ndash;   &ldquo;Nó có thể là gì?&rdquo;</p></li>
<li><p>Tiến triển   &ndash;   &ldquo;Nó sẽ trở thành gì?&rdquo;</p></li>
<li><p>Phê chuẩn   &ndash;   &ldquo;Nó sẽ là gì?&rdquo;</p></li>
</ol>


<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/nguyen-mau.jpeg" title="Nguyên mẫu" ></p>

<p>Nguyên mẫu là một công cụ tuyệt vời để giúp bạn xác định thành công hay thất bại, học hỏi nhanh chóng. Cái giá phải trả khi thất bại sớm (trong giai đoạn đầu của dự án) sẽ rẻ hơn nhiều so với sau này, sau khi rất nhiều nguồn lực được phân bổ và thực hiện các nhiệm vụ. Chúng tôi xây dựng nguyên mẫu để tìm hiểu, giải quyết những ý tưởng mâu thuẫn nhau, bắt đầu cuộc hội thoại và quản lý quá trình xây dựng.</p>

<p>Sự cuốn chiếu, biểu tượng, lớp, thư viện, là một số ví dụ về các nguyên mẫu, chúng tôi đã tạo ra để kiểm tra, xác nhận và học hỏi nhanh.</p>

<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/nguyen-mau-ban-dau-cho-cong-cu-Repeat-Grid.gif" title="Nguyên mẫu ban đầu cho công cụ Repeat Grid" ></p>

<p><em>Một nguyên mẫu ban đầu cho các công cụ Lặp lại lưới</em></p>

<h1>Giai đoạn Năm: Thử nghiệm</h1>

<p>Khi nguyên mẫu được tạo ra, cần thử nghiệm chúng với những con người thật. Chúng ta thử nghiệm để tinh chỉnh các nguyên mẫu và các giải pháp, để tìm hiểu thêm về người sử dụng, và để thử nghiệm và tinh chỉnh POV của chúng ta.</p>

<p>Khi thử nghiệm, cho phép người dùng thử nghiệm với nguyên mẫu của bạn, hãy quan sát và lắng nghe. Nếu có thể dễ dàng thực hiện những điều chỉnh nhỏ thì hãy làm và kiểm thử lại. Hãy luôn tiếp cận người dùng của bạn và quan trọng nhất là không bao giờ quá trung thành với những ý tưởng của bạn.</p>

<p>Một ví dụ tốt với Adobe XD là những câu chuyện xung quanh các lớp (layers). Ban đầu, chúng tôi giả định rằng chúng tôi có thể cung cấp một mô hình tinh thần mới, mà không có sự xuất hiện của các lớp. Một số người yêu thích điều này và một số thì lại ghét. Điều thú vị là, sau khi chúng tôi vận chuyển XD không có lớp, cuối cùng một số người bắt đầu nhận ra họ không cần lớp. Nhưng sau nhiều cuộc điều tra và thử nghiệm với cộng đồng và khách hàng, chúng tôi kết luận rằng lớp có thể giúp, đặc biệt là để xuất ra, các biểu tượng và truy cập vào các đối tượng trong các tổ hợp phức tạp.</p>

<p>Kết quả là, chúng tôi sẽ vận chuyển lớp trong Adobe XD sau này trong năm 2016. Và chúng tôi nghĩ rằng chúng tôi đã làm cho sản phẩm thông minh hơn bằng cách tuân theo một khái niệm mà chúng tôi gọi là &ldquo;Các lớp địa phương&rdquo;. Nhưng vào cuối ngày, khách hàng sẽ cho chúng tôi biết liệu chúng tôi đã làm đúng hay không, và chúng tôi sẽ học hỏi, lặp lại và xoay quanh vấn đề.</p>

<p>Phương pháp phân tích cũng có tác dụng   &ndash;   chúng cung cấp cho bạn CÁI GÌ, chứ không phải là TẠI SAO. Chúng rất hữu ích để xác nhận phương pháp tiếp cận khác nhau. Chúng tôi có một nhóm rất tài năng làm phân tích cho Adobe XD, nhưng thay vì chỉ thu thập các con số, họ luôn luôn bắt đầu với một câu hỏi, ví dụ:  &ldquo;Có ai đang thành công với chế độ thiết kế (Design Mode) không? Sự thành công chính là khi khách hàng sử dụng các công cụ lưới lặp lại với hình ảnh lấy từ Công cụ tìm kiếm &rdquo;.  Sau khi nhìn vào các con số, nếu người dùng không thành công, chúng tôi thay đổi quá trình đang làm, hoặc chính các công cụ, và kiểm tra lại. Luôn luôn cố gắng trả lời các câu hỏi ban đầu.</p>

<p>Dựa vào phân tích, nghiên cứu định lượng và thử nghiệm, chúng tôi chạy một chương trình riêng phát hành trước với khoảng 800 nhà thiết kế. Đối với nghiên cứu định tính và thử nghiệm, bên cạnh các cuộc họp khách hàng, chúng tôi có một Hội đồng Tư vấn khách hàng (CAB), với 38 nhà thiết kế từ các công ty như Google, Facebook, Airbnb, IDEO, Citi, NFL, EFM, LinkedIn, và tất nhiên, một vài người dùng đặc biệt, chẳng hạn như sinh viên, các nhà phát triển plugin và các nhà thiết kế từ cơ quan nhỏ. Chúng tôi tương tác với các thành viên CAB liên tục qua Slack và  thường xuyên liên lạc, thử nghiệm nguyên mẫu từ rất sớm và thu thập thông tin phản hồi trực tiếp.</p>

<p>Tại mỗi vòng lặp, khi kiểm thử hoàn tất, thì hãy quay lại một trong các giai đoạn trước và tiếp tục lặp lại, mỗi giai đoạn thực hiện tại một thời điểm.</p>

<p>Và đừng bao giờ quên: tin tưởng quá trình và tận hưởng niềm vui!</p>

<h1>Kết luận</h1>

<p>Tư duy Thiết kế là một phương pháp hoặc quy trình bắt đầu với một thách thức thiết kế, chuyển sang giai đoạn đồng cảm (phỏng vấn, quan sát hay trải nghiệm), sau đó đến định nghĩa (hay tái định nghĩa) vấn đề hoặc thách thức, nắm bắt các ý tưởng sáng tạo (phân kỳ đầu tiên và hội tụ sau ), sử dụng nguyên mẫu (xây dựng để suy nghĩ và học hỏi nhanh) và tiếp tục với thử nghiệm.</p>

<p>Đối với Adobe XD, chúng tôi tin rằng nếu chúng tôi tiếp tục lắng nghe, tư duy, sáng tạo, phê chuẩn, học tập, và luôn luôn cởi mở và minh bạch thì chúng tôi sẽ kết thúc với đúng tổng số lượng giá trị khách hàng (customer value) và chúng tôi sẽ tạo ra một giải pháp mà các nhà thiết kế yêu thích.</p>

<p>(HẾT!)</p>

<p>Dịch từ: <a href="https://medium.com/@demianborba/design-thinking-a-manual-for-innovation-e0576b34eff6#.9ae4fd5dk">Design thinking: A manual for innovation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev - the only truly universal productive development platform with Docker on macOS, Linux and Windows]]></title>
    <link href="http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/"/>
    <updated>2016-12-20T11:13:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows</id>
    <content type="html"><![CDATA[<p>Docker is great to work with, it solves a lot of problems on development, distribution, and production
deployment.</p>

<p>Why Docker?  You can find the answer here:</p>

<ul>
<li><a href="http://thenewstack.io/why-did-docker-catch-on-quickly-and-why-is-it-so-interesting/">http://thenewstack.io/why-did-docker-catch-on-quickly-and-why-is-it-so-interesting/</a></li>
<li><a href="http://thenewstack.io/hypervisors-container-era/">http://thenewstack.io/hypervisors-container-era/</a></li>
<li><a href="https://blog.codeship.com/why-docker/">https://blog.codeship.com/why-docker/</a></li>
</ul>


<p>Docker works great on Linux, however, it&rsquo;s very challenging to make it work universal and consistent on
Mac and Windows. There are lots of efforts to solve this problem, from Docker themselves and from
Docker community, too. However, we haven&rsquo;t achieved that stage yet (until <code>teracy-dev</code>).</p>

<!-- more -->


<p>These are some of the problems that Docker community has to deal with on Mac and Windows:</p>

<ul>
<li><p>No consistent universal development environment and workflow on Linux, Windows, Mac. This is a very
important factor for team collaboration so that anyone from any OS platforms could collaborate and help
each other with no differences in the development environment.</p></li>
<li><p>Mounted volumes on VirtualBox use vboxsf, which is extremely slow. This is true for Boot2Docker and
Vagrant default file sync mechanism on Virtualbox.</p></li>
<li><p>Native Docker applications offered by Docker:</p>

<ul>
<li>Slow on Mac: <a href="https://github.com/docker/for-mac/issues/77">https://github.com/docker/for-mac/issues/77</a></li>
<li>Only recent latest versions of Window 10 (&ldquo;Build 10586 or later&rdquo;) are supported</li>
<li>Slow on Windows: <a href="https://github.com/docker/for-win/issues/188">https://github.com/docker/for-win/issues/188</a></li>
</ul>
</li>
<li><p>File watching is broken on VirtualBox since vboxsf does not trigger the inotify file watching
mechanism. <code>nodemon</code>, hello?</p></li>
</ul>


<p>There are a lot of Docker community projects trying to solve those problems:</p>

<ul>
<li><a href="https://github.com/brikis98/docker-osx-dev">https://github.com/brikis98/docker-osx-dev</a></li>
<li><a href="https://github.com/blinkreaction/boot2docker-vagrant">https://github.com/blinkreaction/boot2docker-vagrant</a></li>
<li><a href="https://github.com/codekitchen/dinghy">https://github.com/codekitchen/dinghy</a></li>
<li><a href="https://github.com/leighmcculloch/docker-unison">https://github.com/leighmcculloch/docker-unison</a></li>
<li><a href="https://github.com/gansbrest/hodor">https://github.com/gansbrest/hodor</a></li>
<li><a href="https://github.com/adlogix/docker-machine-nfs">https://github.com/adlogix/docker-machine-nfs</a></li>
<li>others&hellip;</li>
</ul>


<p>However, those existing projects do not really resolve all the problems or do not reflect
our vision for a productive development platform.</p>

<p>You can check out our <a href="http://blog.teracy.com/2016/08/19/teracy-dev-vision/">vision for teracy-dev</a> for such the
productive development platform.</p>

<p>That is the reason why we created <code>teracy-dev</code>. We&rsquo;ve been using and loving it for more than 3 years
and counting.</p>

<p><code>teracy-dev</code> reflects our vision for a truly universal productive development platform that anyone can
use to develop software easily. It&rsquo;s very easy to customize any OS that you can use
for your VM. It brings development and production environment closer and closer.</p>

<p>It is very important for a distributed team like us to work with everyone from different teams all
over the world on different projects with different stacks and <code>teracy-dev</code> helps us a lot.</p>

<p>Moreover, <code>teracy-dev</code> is not tightly coupled with anything, you&rsquo;re free to choose anything to build
up your development VM machine. You can choose different OS platforms, choose different software packages to
be automatically installed with the help of different configuration management tools. It&rsquo;s up
to you to choose anything other than default settings.</p>

<p>With default settings, <code>teracy-dev</code> chooses Ubuntu as the base OS with <code>docker</code> and <code>docker-compose</code>
installed to start developing software with Docker right away after <code>$ vagrant up</code>.</p>

<p>teracy-dev v0.5.0 is leveraging Docker for development as we believe in the future of containers
and Docker.</p>

<p>Let&rsquo;s have some comparisons between <code>teracy-dev</code> and other solutions:</p>

<table>
<thead>
<tr>
<th>   Criteria                         </th>
<th> teracy-dev </th>
<th> docker-osx-dev </th>
<th> Docker Toolbox </th>
<th> Docker native app</th>
</tr>
</thead>
<tbody>
<tr>
<td>same workflow on Linux, Mac, Windows</td>
<td>    ✅      </td>
<td>       ❌       </td>
<td>     ❌        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>native speed on mounted volumes     </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ❌        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>2-way file sync                     </td>
<td>    ✅      </td>
<td>       ❌       </td>
<td>     ✅        </td>
<td>       ✅          </td>
</tr>
<tr>
<td>file watching (inotify)             </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ❌        </td>
<td>       ✅          </td>
</tr>
<tr>
<td>open source                         </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ✅        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>customization                       </td>
<td>    ✅      </td>
<td>       🚫       </td>
<td>     🚫        </td>
<td>       ❌          </td>
</tr>
</tbody>
</table>


<p>✅: fully support</p>

<p>❌: no or partial support</p>

<p>🚫: can be achieved but not encouraged</p>

<p>Let me explain the criteria:</p>

<ul>
<li><p>&ldquo;same workflow on Linux, Mac, Windows&rdquo;: the usage should be the same on Mac, Linux, Windows.
Docker native app only supports >= Windows 10, that&rsquo;s why it&rsquo;s marked as ❌.</p></li>
<li><p>&ldquo;native speed on mounted volumes&rdquo;: the speed should be as fast and native as on Linux</p></li>
<li><p>&ldquo;2-way file sync&rdquo;: for syncing back and forth on mounted volumes, this is mandatory for development</p></li>
<li><p>&ldquo;file watching (inotify)&rdquo;: for auto reload when files change</p></li>
<li><p>&ldquo;customization&rdquo;: you have full control and are encouraged to change anything that you want to
suit your need, no hidden stuff, no lock-in and can still upgrade seamlessly.</p></li>
</ul>


<p>Let&rsquo;s see what the same workflow means when developing a simple hello world <code>nodejs</code> application
from scratch with teracy-dev by watching the following videos:</p>

<p>On Linux (Ubuntu):</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/ze8p9imprgk" frameborder="0" allowfullscreen></iframe>


<p>On Windows:</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/2200zvxIdAs" frameborder="0" allowfullscreen></iframe>


<p>On macOS:</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/XF-FQQKG8PA" frameborder="0" allowfullscreen></iframe>


<p>They all contain the same steps, that&rsquo;s the meaning of the &ldquo;same workflow&rdquo;.</p>

<p><code>teracy-dev</code> is not perfect, though. There are some improvements that we&rsquo;d like to address.</p>

<p>The first thing we&rsquo;d like to improve is to reduce the setup time. It takes time (around 20-30 mins)
to download the vagrant box (Ubuntu 16.04) for the first time. This is for the first time only, however.
After the first time, you can destroy and provision the same VM within some minutes. We could use
some other smaller boxes (for example, boot2docker base box) but we&rsquo;d like to stick to the most popular
Linux OS that is widely used in production. We try to make development and production environment as
close as possible. This is by default, you can choose different base boxes as you wish.</p>

<p><code>teracy-dev</code> v0.5.0 is under preview stage, we need to add more documentation and get more community
feedback.</p>

<p><code>teracy-dev</code> is created to give back to open source community as we learn and get a lot from our amazing
open source community.</p>

<p>And we need you, please try and let us know your feedback and we&rsquo;ll together fix any problems.</p>

<p>You should get started with <code>teracy-dev</code> here: <a href="http://dev.teracy.org/docs/develop/getting_started.html">http://dev.teracy.org/docs/develop/getting_started.html</a></p>

<p>In summary, <code>teracy-dev</code> brings <code>Docker</code> closer to <code>Vagrant</code> = love.</p>

<p>Thank you and happy hacking with <a href="https://github.com/teracyhq/dev">teracy-dev</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nhà thiết kế không nên viết code. Họ nên nghiên cứu về nghiệp vụ.]]></title>
    <link href="http://blog.teracy.com/2016/12/09/nha-thiet-ke-khong-nen-viet-code-ho-nen-nghien-cuu-ve-nghiep-vu/"/>
    <updated>2016-12-09T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/09/nha-thiet-ke-khong-nen-viet-code-ho-nen-nghien-cuu-ve-nghiep-vu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/12/09/designer-should-not-code.jpg" title="các nhà thiết kế không nên viết code, nên tập trung nghiên cứu nghiệp vụ" ></p>

<p>Ngày nay càng ngày càng có nhiều công ty tìm kiếm các lãnh đạo thiết kế giỏi. Họ được biết rằng công ty của họ cần tập trung nhiều hơn vào tư duy thiết kế và quan tâm đến việc áp dụng các nguyên tắc thiết kế tập trung hơn nữa. Tuy nhiên, khi những công ty này nói chuyện với các nhà thiết kế, họ nghe về các kỹ năng &ndash; về sự nhất quán thương hiệu, và thiết kế bóng bảy, những người thiết kế có thể viết code, hướng dẫn phong cách, tạo mẫu và thử nghiệm &ndash; là công việc của người thiết kế.</p>

<p>Tất cả những điều này đều rất tốt &ndash; thậm chí là bắt buộc. Nhưng với chúng ta, để hiểu một cách đúng đắn, cách tốt nhất để xây dựng doanh nghiệp là chúng ta phải tập trung vào cái làm cho doanh nghiệp thành công. Nói chung, trước tiên chúng ta phải hiểu nghiệp vụ đã. Sau đó, chúng ta sẽ hiểu hơn công việc ở đâu là quan trọng (và cần thực thi ở đâu).</p>

<!-- more -->


<p>Thay vì xem các nhà thiết kế là những người cần phải có thì hãy giải thích mục tiêu nghiệp vụ quan trọng với họ theo những cách cơ bản nhất. Tôi nghĩ những gợi ý của chúng ta về thiết kế sẽ có trọng lượng hơn nếu chúng ta có thể có những cuộc trao đổi sâu sắc, và sẽ có thể đưa ra những gợi ý đáng giá về các nguyên tắc nghiệp vụ cốt lõi.</p>

<h1>Hiện tại chúng ta đang ở đâu</h1>

<p>Có rất nhiều nhà thiết kế đã bắt đầu suy nghĩ nghiêm túc về việc quyết định của họ ảnh hưởng đến công ty ra sao. Nói chung, sự tập trung của chúng ta vào phân tích và nghiên cứu người dùng cũng đã giúp rất nhiều trong việc mang đến niềm tin lớn hơn cho tiếng nói của người thiết kế. Chúng ta cũng đã thấy nhiều ví dụ tuyệt vời của các công ty hàng đầu về thiết kế và các nhà thiết kế ảnh hưởng đến cốt lõi của các doanh nghiệp lớn như Airbnb, Pocket, Facebook, Google, Slack, và vô số công ty khác nữa.</p>

<p>Tôi cho rằng những công ty này thành công như hiện nay bởi vì họ có những người thiết kế tập trung vào nghiệp vụ mà công ty cần hơn là tập trung vào việc mỗi điểm ảnh sẽ trông hoàn hảo như thế nào.</p>

<h1>Chuyển đổi sự tập trung của chúng ta</h1>

<p>Vậy chúng ta nên bắt đầu tư duy về việc ảnh hưởng của thiết kế tới kinh doanh như thế nào?</p>

<p>Có thể là nên ra ngoài và học quản trị kinh doanh (MBA). (Tất cả những nhà thiết kế mà tôi biết đều đã làm điều này và đang tích cực đóng góp vào giá trị cốt lõi của doanh nghiệp). Nhưng thậm chí có thể làm những điều đơn giản hơn. Có thể là nói chuyện với đội kinh doanh để tìm hiểu tình hình thị trường. Có thể là nói chuyện với đội vận chuyển và thực hiện để hiểu tại sao các đơn hàng thường bị chậm một ngày. Có thể đọc qua việc lên kế hoạch cho quý 1 và tìm ra những sáng kiến quan trọng cho những quý không có gì làm ngoài việc tái cấu trúc file css. Có thể cần phải tham gia một lớp học buổi tối về kinh tế. Hay có lẽ chỉ cần dành thời gian buổi tối để tìm kiếm trên google về cách gây quỹ và cách bảng giá trị vốn hoá (Cap table) hoạt động như thế nào thay vì làm thế nào để sử dụng các plugin phác họa mới nhất.</p>

<p>Có thể chúng ta nên dành thời gian để tìm hiểu về các nguyên tắc kinh doanh &ndash; làm thế nào để lựa chọn mô hình kinh doanh, làm thế nào để quản lý nhóm, làm thế nào để tiến hành phân tích cạnh tranh, làm thế nào để thực hiện dự án&hellip;</p>

<p>Có thể chúng ta nên cố gắng tìm hiểu những vấn đề mà CEO hay VP gặp phải và cố gắng sử dụng thiết kế để giúp họ giải quyết vấn đề của họ? Có lẽ chúng ta nên cố gắng tìm ra những vấn đề làm họ thức dậy vào ban đêm và giúp họ giải quyết vấn đề đó &ndash; thay vì giải quyết vấn đề của chúng ta.</p>

<h1>Tương lai</h1>

<p>Tôi muốn nói rằng chúng ta không nên chuyển giao những trải nghiệm thiết kế nghèo nàn. Chúng ta phải tiếp tục phát triển và tập trung vào tay nghề của mình. Nếu chúng ta không làm vậy thì chúng ta sẽ bị thụt lùi. Nhưng cũng hãy bắt đầu hiểu doanh nghiệp chúng ta đang làm việc và chúng cần gì để phát triển. Nếu chúng ta có thể làm điều đó, chúng ta sẽ tiếp tục đạt được nhiều ảnh hưởng hơn và sẽ tiếp tục tạo ra những sản phẩm có sự ảnh hưởng lớn hơn &ndash; cho cả công ty của chúng ta và cho cả những người dùng sản phẩm.</p>

<p>Dịch từ: <a href="https://medium.com/@joshuantaylor/designers-shouldn-t-code-they-should-study-business-dc3e7e203d39#.cp5ipre7v">Desiger shouldn&rsquo;t code. They should study business</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 2)]]></title>
    <link href="http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2/"/>
    <updated>2016-12-06T10:50:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/26/principles.jpg" title="Nguyên tắc thiết kế" ></p>

<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1/">Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 1)</a></p>

<h1>10. Vấn đề nhất quán</h1>

<p>Tiếp theo nguyên tắc trên, các yếu tố của màn hình không nên xuất hiện nhất quán với nhau, trừ khi chúng vận hành giống nhau. Những yếu tố có hành vi giống nhau thì nên trông giống nhau. Tuy nhiên điều này cũng quan trọng đối với thành phần khác nhau thì xuất hiện khác nhau. Khi nỗ lực để  làm cho nhất quán, các nhà thiết kế học việc thường làm mờ đi sự khác nhau quan trọng bằng cách sử dụng biện pháp trực quan giống nhau (thường là để sử dụng lại mã nguồn) trong khi  việc sử dụng các biện pháp trực quan khác nhau thì phù hợp hơn.</p>

<!-- more -->


<h1>11. Những phân cấp trực quan mạnh hoạt động tốt nhất</h1>

<p>Một hệ thống phân cấp trực quan mạnh được thực hiện khi có thứ tự xem rõ ràng các yếu tố trực quan trên màn hình. Đó là khi người sử dụng xem các mặt hàng giống nhau theo thứ tự giống nhau trong mỗi lần xem. Phân cấp trực quan yếu cung cấp ít manh mối về nơi để người dùng nên nhìn vào và cuối cùng là cảm giác lộn xộn và khó hiểu. Trong môi trường đầy biến động, rất khó để duy trì một hệ thống phân cấp trực quan mạnh bởi vì trọng lượng hình ảnh là tương đối: khi tất cả mọi thứ màu đậm thì sẽ không có gì là nổi bật nữa. Nếu một yếu tố trực quan nặng đơn lẻ được thêm vào một màn hình, người thiết kế có thể cần phải thiết lập lại các trọng lượng hình ảnh của tất cả các yếu tố để đạt được hệ thống phân cấp mạnh một lần nữa. Hầu hết mọi người không chú ý đến hệ thống phân cấp trực quan nhưng nó là một trong những cách dễ nhất để củng cố (hoặc làm suy yếu) một thiết kế.</p>

<h1>12. Sự tổ chức thông minh làm giảm tải trọng nhận thức (Cognitive load)</h1>

<p><em>“Cognitive load mô tả gánh nặng của con người về trí nhớ ngắn hạn khi phải làm các nhiệm vụ phức tạp.”</em></p>

<p>Như John Maeda đã nói trong cuốn sách Simplicity (Sự đơn giản) của ông, sự tổ chức các yếu tố màn hình một cách thông minh có thể làm cho những thứ số nhiều xuất hiện như là số ít. Điều này giúp mọi người hiểu giao diện của bạn dễ dàng hơn và nhanh hơn, bởi vì bạn đã mô tả các mối quan hệ vốn có của nội dung trong thiết kế của bạn. Nhóm tập hợp lại với nhau như là các yếu tố, thể hiện mối quan hệ tự nhiên qua vị trí và sự định hướng. Bằng việc tổ chức một cách thông minh, bạn sẽ làm cho nội dung ít tải trọng nhận thức (Cognitive load) hơn đối với người sử dụng&hellip; những người mà không phải suy nghĩ về việc các yếu tố có liên quan như thế nào bởi vì bạn đã làm điều đó cho họ. Đừng buộc người sử dụng phải tìm những điều này&hellip; mà hãy cho họ thấy bằng cách thiết kế những mối quan hệ đó trong màn hình của bạn.</p>

<h1>13. Đừng xác định mà hãy làm nổi bật với màu sắc</h1>

<p>Màu sắc của những vật thể thay đổi bởi vì ánh sáng thay đổi. Chúng ta sẽ thấy một cái cây được phác thảo vào ban ngày khác với lúc hoàng hôn. Như trong thế giới tự nhiên, nơi mà màu sắc là một thứ có rất nhiều sắc thái, màu sắc không nên xác định nhiều trong một giao diện. Nó có thể hỗ trợ, được sử dụng để làm nổi bật, được sử dụng để hướng dẫn sự chú ý, nhưng không nên  là sự khác biệt duy nhất của sự vật. Đối với trường hợp phải đọc lâu hoặc nhiều giờ sử dụng màn hình mở rộng, hãy sử dụng màu sắc nhẹ nhàng hoặc làm tối màu nền, giữ màu sắc tươi sáng hơn cho màu nhấn của bạn. Tất nhiên cũng cần có thời gian cho màu nền sôi động nữa, chỉ cần chắc chắn rằng nó phù hợp với khán giả của bạn.</p>

<h1>14. Sự tiết lộ dần dần</h1>

<p>Chỉ hiển thị những gì cần thiết trên mỗi màn hình. Nếu mọi người đang thực hiện một lựa chọn, hãy hiển thị đầy đủ thông tin để cho phép họ lựa chọn, sau đó đi vào chi tiết trên màn hình tiếp theo. Tránh việc giải thích quá mức hoặc hiển thị tất cả cùng một lúc. Khi có thể, hãy hoãn các quyết định lại ở màn hình tiếp theo bằng việc tiết lộ thông tin khi cần thiết. Điều này sẽ giữ cho những tương tác của bạn trở nên rõ ràng hơn.</p>

<h1>15. Trợ giúp tức thời</h1>

<p>Trong các giao diện lý tưởng, việc trợ giúp là không cần thiết vì giao diện có thể nắm bắt và sử dụng được. Bước dưới đây, thực tế, là một bước mà trong đó sự trợ giúp là trực tiếp và theo ngữ cảnh, chỉ có sẵn vào thời gian và địa điểm cần thiết, được giấu đi ở tất cả các thời điểm khác. Việc yêu cầu mọi người đến giúp đỡ và tìm câu trả lời cho câu hỏi của họ đặt ra cho họ nhiệm vụ phải biết những gì họ cần. Thay vì xây dựng ở nơi cần trợ giúp&hellip; chỉ cần đảm bảo rằng nó không còn liên quan đến những người đã biết làm thế nào để sử dụng giao diện của bạn.</p>

<h1>16. Một điểm rất quan trọng: trạng thái số không</h1>

<p>Trải nghiệm đầu tiên với một giao diện vô cùng quan trọng, nhưng các nhà thiết kế lại thường bỏ qua điều này. Để giúp người dùng của chúng ta tốt nhất trong việc đạt được tốc độ với thiết kế của chúng ta, thì thiết kế ở trạng thái số không là tốt nhất, trạng thái mà tại đó chưa có gì xảy ra. Trạng thái này không phải là một khung trống&hellip; Nó sẽ đưa ra những chỉ đạo và hướng dẫn để đạt được tốc độ. Phần lớn sự cọ sát của các tương tác là trong bối cảnh ban đầu&hellip; Một khi người ta hiểu các quy tắc mà họ có thì khả năng thành công sẽ cao hơn nhiều.</p>

<h1>17. Thiết kế lớn là vô hình</h1>

<p>Một tính chất kỳ lạ của thiết kế lớn là nó thường không được chú ý bởi những người sử dụng nó. Lý do cho điều này là nếu thiết kế thành công người sử dụng có thể tập trung vào những mục tiêu của riêng mình chứ không phải là giao diện&hellip; khi họ hoàn thành mục tiêu của họ, họ sẽ hài lòng và không cần phải suy nghĩ về tình hình. Là một nhà thiết kế, điều này có thể là khó khăn bởi vì chúng ta nhận được ít lời tán thưởng khi các thiết kế của chúng ta tốt. Nhưng các nhà thiết kế lớn thường hài lòng với thiết kế được sử dụng tốt&hellip; và biết rằng người sử dụng hài lòng thường im lặng.</p>

<h1>18. Xây dựng trên những lĩnh vực thiết kế khác</h1>

<p>Thiết kế đồ họa hình ảnh, kiểu chữ (typography), copywriting, kiến ​​trúc thông tin và sự hiển thị&hellip; tất cả những lĩnh vực này là một phần của thiết kế giao diện. Chúng có thể được đề cập đến hoặc được chuyên môn môn hoá. Không nên lún vào những cuộc nội chiến hoặc coi thường những lĩnh vực khác: hãy thu thập những điều hữu ích từ những lĩnh vực khác cho công việc của bạn và tiếp tục sử dụng chúng. Ghi nhớ cả những hiểu biết từ những lĩnh vực dường như không liên quan&hellip; những gì chúng ta có thể học được từ việc xuất bản, viết mã, đóng sách, trượt ván, chữa cháy, karate?</p>

<h1>19. Những giao diện tồn tại để được sử dụng</h1>

<p>Như trong hầu hết các lĩnh vực thiết kế, thiết kế giao diện thành công khi mọi người đang sử dụng những gì bạn đã thiết kế. Giống như một chiếc ghế xinh đẹp mà không thoải mái để ngồi vào thì thiết kế là thất bại khi mọi người không lựa chọn sử dụng nó. Do đó, thiết kế giao diện có thể được xem như là tạo ra một môi trường sử dụng giống như tạo ra một vật có giá trị sử dụng. Giao diện để thoả mãn cái tôi người thiết kế là chưa đủ: nó phải được sử dụng!</p>

<p>(HẾT!)</p>

<p>Bài dịch từ <a href="http://bokardo.com/principles-of-user-interface-design/">Principles of User Interface Design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tư duy thiết kế: Cẩm nang cho sự đổi mới (Phần 1)]]></title>
    <link href="http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1/"/>
    <updated>2016-11-22T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/tu-duy-thiet-ke.jpeg" title="Tư duy thiết kế" ></p>

<p>Liệu có một công thức nào để tạo ra các sản phẩm sáng tạo hay không? Trải nghiệm hay là dịch vụ? Tôi
đang không nói đến việc cải tiến dần dần một cách thuần túy mà là một sự đổi mới mang tính đột phá.</p>

<p>Nếu bạn có nghi ngờ thì cũng là điều dễ hiểu, tôi cũng đã từng hoài nghi khi tôi bắt đầu nghiên cứu
của mình về khoa học đằng sau đổi mới cách đây nhiều năm. Sự thật về sự đổi mới là tất cả đều phụ
thuộc yếu tố con người. Cuối cùng, chúng ta là những người tạo ra những đổi mới cho mọi người. Là
một trong những giám đốc sản phẩm làm việc trên <a href="http://www.adobe.com/products/experience-design.html">Adobe Experience Design</a> (Adobe XD) ở San Francisco, tôi rất vui được chia sẻ với các bạn phương pháp mà
tôi rất yêu thích, sử dụng, <a href="http://designthinkingnow.com/#/about/english">giảng dạy</a>, và học
hỏi mỗi ngày tại nơi làm việc, và trong cuộc sống.</p>

<!-- more -->


<p>Khi bạn đọc bài viết này, tôi khuyến khích bạn áp dụng phương pháp &ldquo;tư duy cầu tiến&rdquo; (growth mindset)
và để tâm trí của bạn tiếp thu những quan điểm mới. Carol Dweck, tác giả của cuốn &ldquo;Tư duy: Tâm lý học
mới của sự thành công&rdquo; (Mindset: The New Psychology of Success), mô tả &ldquo;tư duy cầu tiến&rdquo; là nỗ lực
cộng với việc học bằng sự phát triển và thành công. Điều này có nghĩa là nếu bạn đặt nỗ lực đúng chỗ
và học từ những sai lầm của bạn, bạn sẽ thành công.</p>

<h1>Quá trình tư duy thiết kế</h1>

<p>Quá trình hay phương pháp này đã được phát triển bởi <a href="https://www.ideo.org/">IDEO</a> và được giảng
dạy tại: <a href="http://dschool.stanford.edu/">Viện Thiết kế tại Đại học Stanford</a>. Phương pháp liên quan
đến sự hợp tác lớn và lặp đi lặp lại thường xuyên. Phương pháp có năm giai đoạn rất rõ ràng: Thông
Cảm, Xác Định, Tưởng Tượng, Nguyên Mẫu và Thử Nghiệm.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/qua-trinh-tu-duy-thiet-ke.jpeg" title="Quá trình tư duy thiết kế" ></p>

<p>Mục tiêu cuối cùng của quá trình này là tạo ra một sản phẩm, dịch vụ, hoặc trải nghiệm mà người ta
muốn (sự mong muốn), có tiềm năng thực sự để trở thành hữu dụng (tính khả năng), và có thể dễ dàng
hoặc thuận tiện xây dựng về công nghệ (tính khả thi).</p>

<p>Điều quan trọng là hãy tập trung vào một giai đoạn tại một thời điểm và lặp lại nhanh.</p>

<p>Để mô tả từng giai đoạn của quá trình tư duy thiết kế, chúng ta hãy sử dụng Adobe XD làm ví dụ.
Như mô tả của <a href="https://twitter.com/vincent_hardy">Vincent Hardy, Giám đốc Kỹ thuật của Adobe</a> trong
bài viết của mình về xác định beta, đội Adobe XD của chúng tôi có một lịch trình phát hành rất tích
cực, trong đó cứ 2 tuần sẽ có một bản build trước khi phát hành, và hàng tháng sẽ có các bản phát
hành công khai. Chúng tôi duy trì một <a href="https://adobexd.uservoice.com/">trang web UserVoice</a> nơi mà người
sử dụng có thể sắp xếp các lỗi và đề xuất tính năng mới, trong đó cung cấp cho chúng tôi cơ hội để
học hỏi nhanh, xác nhận, ưu tiên, và thay đổi bất cứ khi nào cần thiết.</p>

<p>Chúng tôi có một đội ngũ có nhiều kỹ năng và chuyên môn sâu (T-shaped) bao gồm các nhà thiết kế,
các kỹ sư, quản lý lập trình, nhân viên marketing và các giám đốc sản phẩm giống như tôi.</p>

<p>Một người có nhiều kỹ năng và chuyên môn sâu &ldquo;T-shaped&rdquo; là một người rất giỏi ở một lĩnh vực nào đó,
nhưng cũng có thể đảm nhận các vai trò khác nhau trong nhóm, đòi hỏi người đó phải luôn luôn thích
tìm hiểu và đặc biệt có sự thấu hiểu.</p>

<p><strong>Tất cả mọi thứ trong thiết kế tư duy bắt đầu từ một thách thức thiết kế</strong></p>

<p>Thách thức thiết kế của chúng tôi trước khi Adobe XD được tạo ra là:</p>

<p><em>&ldquo;Photoshop và Illustrator không phải được thiết kế ban đầu cho những thách thức UX của hiện tại.&rdquo;</em></p>

<p>Điều thú vị trong quá trình tư duy  thiết kế của chúng tôi chính là, trước khi chúng tôi bắt đầu nghĩ
về những ý tưởng để &ldquo;giải quyết&rdquo; vấn đề này, chúng tôi ra ngoài và nói chuyện với mọi người.</p>

<h1>Giai đoạn một: Đồng cảm</h1>

<p>Đồng cảm là khả năng đặt mình vào vị trí của người khác để bắt đầu &ldquo;nhìn thấy&rdquo; những thứ thông qua đôi
mắt của người khác.</p>

<p>Có 3 cách để xây dựng sự đồng cảm: 1) các cuộc phỏng vấn, 2) quan sát và 3) trải nghiệm.</p>

<p><strong>1) Phỏng vấn</strong></p>

<p>Chúng tôi thường xuyên có các cuộc họp khách hàng, nơi chúng tôi khảo sát quy trình công việc hiện
tại, tìm hiểu suy nghĩ của mỗi nhà thiết kế về môi trường mà họ làm việc, các điểm chưa hài lòng, kỳ
vọng và các vấn đề khác. Các cuộc phỏng vấn của chúng tôi không chỉ giới hạn tại Hoa Kỳ mà chúng tôi
còn tiến hành phỏng vấn ở các bộ phận khác trên thế giới. Thật hấp dẫn khi chứng kiến cách mọi người
xem xét và giải quyết những thách thức khác nhau. Điều quan trọng là tham gia buổi phỏng vấn trong
vai trò trung lập. Ngay cả khi bạn nghĩ rằng bạn biết câu trả lời, hãy hỏi tại sao.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/phong-van-khach-hang.jpeg" title="Các nhà quản lý sản phẩm Adobe XD phỏng vấn khách hàng ở Châu Âu" ></p>

<p>Có một chương trình khung thú vị do Sakichi Toyoda phát triển đã được sử dụng tại Toyota trong suốt
thời kì phát triển các phương pháp sản xuất của mình. Phương pháp này chỉ ra rằng nếu bạn hỏi
&ldquo;Tại sao?&rdquo;  5 lần, bạn có thể tiếp cận được nguyên nhân của bất kỳ vấn đề. Điều đó giống như bạn là
một đứa trẻ tò mò luôn háo hức muốn biết tại sao mọi thứ lại như vậy.</p>

<p>Chiến lược tốt để thực hiện các cuộc phỏng vấn là thiết lập mối quan hệ, kết nối mạnh mẽ với người
được phỏng vấn, thay vì tác động đến câu trả lời. Đừng bao giờ hỏi, <em>&ldquo;Điều này là tốt, phải không?&rdquo;</em>
Thay vào đó, hãy hỏi <em>&ldquo;Bạn nghĩ gì về điều này?&rdquo;</em> Thậm chí hãy hỏi câu hay hơn, <em>&ldquo;Hãy kể cho tôi một
câu chuyện mà bạn đã gặp trở ngại khi làm việc với X.&rdquo;</em> Tìm kiếm qua câu chuyện là một kỹ thuật rất
mạnh mẽ mà có thể cung cấp cho bạn rất nhiều thông tin có giá trị. Ví dụ, nếu bạn cần phải hiểu những
gì đang thịnh hành với thanh thiếu niên, thử hỏi họ những gì họ sẽ mua với $150.</p>

<p>Kể chuyện và tìm kiếm những câu chuyện trong cuộc phỏng vấn là một cách tốt để thiết lập mối quan hệ
và kết nối. Mới đây <a href="https://itunes.apple.com/us/podcast/human-tech/id1097159316?mt=2">Human Tech</a>
đã trình bày một nghiên cứu đo hoạt động não trong các câu chuyện. Nghiên cứu cho thấy rằng trong
thời gian đỉnh cao của một câu chuyện, hoạt động não của người nghe cũng tương tự và liên hệ chặt
chẽ với hoạt động não của người kể chuyện &ndash; tạo ra sự kết nối thực sự giữa hai người.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/quy-trinh-phong-van.jpeg" title="Quy trình phỏng vấn" ></p>

<p>Khi bạn hỏi một câu hỏi, hãy dành thời gian để người dùng của bạn được suy nghĩ. Im lặng cũng có thể
chấp nhận! Thậm chí ngay cả khi im lặng có vẻ kì cục, nhưng tuyệt đối không được gián đoạn hoặc gây ảnh
hưởng đến người được phỏng vấn.</p>

<p>Nhìn chung, quá trình thiết kế tư duy thiên vể chất lượng hơn số lượng. Điều này có nghĩa là có thể
ít người hơn trong cuộc phỏng vấn của bạn, nhưng hãy lựa chọn những người mà bạn nghĩ rằng có thể
đại diện cho người dùng khác nhau của sản phẩm hoặc dịch vụ của bạn. Chúng tôi đang tìm kiếm những
hiểu biết sâu sắc, không phải đơn thuần chỉ là sự thật.</p>

<p>Tôi thấy cái nhìn sâu sắc cũng chính là một cái nhìn hiểu biết sâu sắc về một cái gì đó. Điều đó
giống như là các nơ-ron thần kinh của bạn đang chờ bạn xác định và kích hoạt các phần thông tin khi
kết nối với nhau, làm cho có ý nghĩa. Đó là khoảnh khắc bạn đột nhiên &ldquo;khám phá ra&rdquo;.</p>

<p>Khái niệm của người sử dụng đặc biệt cũng có thể đem lại lợi ích nghiên cứu cho bạn. Ví dụ, nếu bạn
cần phải phỏng vấn người sử dụng giỏ mua hàng, cũng phỏng vấn một người đàn ông vô gia cư, người đó
sử dụng xe như một phương tiện di chuyển xung quanh hoặc thu thập vật liệu tái chế &ndash; thì đó là một
người sử dụng đặc biệt. Người dùng đó sẽ cung cấp cho bạn những hiểu biết quan trọng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/phong-van-nguoi-dung-dac-biet.jpeg" title="Phỏng vấn người dùng đặc biệt" ></p>

<p><strong>2) Quan sát</strong></p>

<p>Hãy giao nhiệm vụ cho người dùng của bạn và chỉ cần ngồi quan sát. Nếu bạn hỏi, &ldquo;Anh có gặp vấn đề
gì khi mua những thứ từ Amazon?&rdquo; có thể bạn sẽ nhận được câu trả lời, &ldquo;Không vấn đề gì cả, rất dễ
dàng để mua những thứ đó.&rdquo; Nhưng nếu bạn quan sát một người sử dụng nó từ phía sau họ, bạn sẽ thấy
các vấn đề khi họ mua hàng.</p>

<p>Gần đây, tại Adobe, chúng tôi tổ chức hội thảo trải nghiệm (experience-athon) nội bộ lần đầu tiên, ở đây chúng tôi
đã giao cho người thiết kế Adobe một nhiệm vụ và chỉ đứng nhìn. Có sự tham dự của các kỹ sư sản phẩm
và những người thiết kế trong nhóm XD. Rất nhanh chóng, chúng tôi đã xác định được nhiều vấn đề cần
phải giải quyết tốt hơn, và chúng tôi đã làm việc để giải quyết những vấn đề này.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/kinh-nghiem-Adobe-xd.jpeg" title="hội thảo trải nghiệm của Adobe XD ở San Francisco" ></p>

<p>Chúng tôi tin rằng điều quan trọng là các thành viên ở các lĩnh vực khác nhau trong đội Adobe XD
(thiết kế, kỹ thuật và giám đốc sản phẩm) được tiếp xúc với thông tin phản hồi từ khách hàng trực
tuyến của chúng tôi từ <a href="https://adobexd.uservoice.com/">Uservoice</a> và
<a href="https://twitter.com/adobexd">Twitter)</a>, tại các hội nghị, các cuộc họp mặt, và các cuộc tiếp xúc
khách hàng để tất cả các khía cạnh của sản phẩm đều đáp ứng được yêu cầu của khách hàng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/doi-Adobe-voi-khach-hang.jpeg" title="Đội Adobe XD với khách hàng tại Adobe MAX 2015" ></p>

<p><strong>3) Trải nghiệm</strong></p>

<p>Hãy sử dụng những gì khách hàng của bạn sử dụng. Đó có thể là sản phẩm của bạn, hoặc có thể là của
một đối thủ cạnh tranh. Điều này sẽ giúp bạn trực tiếp trải nghiệm những điều khó chịu hay cảm giác
vui sướng khi sử dụng sản phẩm.</p>

<p>Tôi kiểm tra tất cả các thiết kế và các công cụ tạo mẫu mà tôi có thể. Không chỉ để xây dựng mô hình
tinh thần mới, mà còn để xác định, giống như một nhà nhân chủng học, rằng liệu một người sử dụng gợi ý
một tính năng nào đó đó có bị ảnh hưởng trực tiếp bởi một công cụ hay dịch vụ hiện có. Áp dụng tư
duy mới và tránh mô hình tinh thần hiện có có lẽ một trong những điều khó thực hiện nhất.</p>

<p>Thực tế thú vị: nhà thiết kế và giám đốc sản phẩm của Adobe sử dụng Adobe XD để thiết kế Adobe XD
&ndash; đó là một kiểu ứng dụng! Điều này cũng cho chúng ta cơ hội cảm nhận những gì người dùng của chúng
ta cảm nhận.</p>

<p>Trong giai đoạn Đồng cảm, bạn có thể sử dụng một số công cụ mạnh mẽ, chẳng hạn như công cụ Empathy Maps,
với công cụ này bạn có thể liệt kê những gì một người nói + làm (rõ ràng) và suy nghĩ + cảm giác (ẩn).</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/giai-doan-dong-cam.jpeg" title="Giai đoạn đồng cảm" ></p>

<p>Sau khi giải nén dữ liệu từ các cuộc phỏng vấn, quan sát, và / hoặc trải nghiệm, bạn có thể tách các
nhu cầu rõ ràng (nói và làm) từ những nhu cầu ẩn (suy nghĩ và cảm nhận). Sau đó là nơi bạn có thể tìm
thấy những hiểu biết sâu sắc.</p>

<h1>Giai đoạn hai: Xác định</h1>

<p>Sau khi đã xây dựng sự đồng cảm, đến lúc cần xem xét lại thách thức thiết kế ban đầu và tái xác định
các vấn đề.</p>

<p>Để xác định, hoặc tái xác định vấn đề hoặc thách thức, một quan điểm (PoV) công thức có thể tính như
sau: PoV = tính cách + nhu cầu + cái nhìn sâu sắc.</p>

<p>Ví dụ:</p>

<p><em>&ldquo;Sam, một nhà thiết kế cao cấp yêu thích việc làm hài lòng người sử dụng với các thiết kế giải quyết
các vấn đề thực tế và nhìn đẹp, cần thiết kế, tạo mẫu và xác nhận nhanh hơn, bởi vì anh ta cảm thấy
đang lãng phí quá nhiều thời gian vào các bước lặp đi lặp lại. Toàn bộ chuyển từ công cụ đến công cụ
đều không thành công!&rdquo;</em>&#8221;</p>

<p>Nhu cầu là những cảm xúc và chiều sâu. Cái nhìn sâu sắc là những điều bất ngờ, kết quả phỏng vấn,
quan sát, mâu thuẫn đều có thể được sử dụng trong các giải pháp.</p>

<p>Khi bạn sử dụng phương pháp đặt con người làm trung tâm của việc tìm kiếm cho một nhu cầu thực sự,
bạn có một lợi thế cạnh tranh.</p>

<p>Tôi thích cụm từ, &ldquo;Tư Duy Thiết Kế là việc tìm hiểu nhu cầu nhiều hơn việc giải quyết vấn đề.&rdquo; Vì vậy,
cần có một công cụ tìm hiểu nhu cầu!</p>

<p>Sau khi chúng tôi đã trải qua quá trình đồng cảm với Adobe XD, chúng tôi đã xác định được một vài
điều quan trọng:</p>

<ul>
<li><p>Khi Photoshop và Illustrator ban đầu được tạo ra, các nhà thiết kế đã không phải đối mặt với những
thách thức UX giống như những thách thức mà họ phải đối mặt ngày hôm nay.</p></li>
<li><p>Có những công cụ khác nhau giải quyết các phần khác nhau của vấn đề. Có những công cụ thiết kế cho
độ chính xác thấp (kiến trúc thông tin và wireframes), các công cụ thiết kế cho độ chính xác cao, và
các công cụ chuyên biệt cho tạo mẫu, vv. Người dùng phải chuyển từ công cụ này sang công cụ khác để
thiết kế, tạo mẫu, và xác nhận.</p></li>
<li><p>Có rất nhiều sự bất đồng trong quá trình đồng cảm, đặc biệt là sau khi thử nghiệm một nguyên mẫu,
khi sự thay đổi là cần thiết. Và sự xung đột giới hạn sự sáng tạo. Chúng tôi thấy rằng các nhà thiết
kế đi nhanh hơn và thích khám phá các lựa chọn khác nhau, lặp lại và tiến nhanh.</p></li>
<li><p>Hầu hết các công cụ được sử dụng bởi các nhà thiết kế phải chịu ảnh hưởng từ việc mất kiểm soát
phạm vi dự án, xây dựng các tính năng phía trên các tính năng khác, không duy trì một cái nhìn toàn
diện, có lỗi và đôi khi chậm.</p></li>
</ul>


<p>Vì vậy chúng ta rất dễ dàng có thể xác định một số trụ cột XD:</p>

<ul>
<li><p>Thiết kế với tốc độ của tư tưởng</p></li>
<li><p>Hiệu suất và chất lượng</p></li>
<li><p>Quy trình công việc có ý nghĩa</p></li>
<li><p>Giao diện theo ngữ cảnh</p></li>
</ul>


<p>Với ý tưởng đó, chúng tôi đã bắt đầu với những điều sẽ trở thành Thiết kế Trải nghiệm Adobe, hoặc
như chúng tôi chỉ đơn giản gọi nó là Adobe XD.</p>

<p>(<a href="http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2/">PHẦN 2</a>)</p>

<p>Dịch từ: <a href="https://medium.com/@demianborba/design-thinking-a-manual-for-innovation-e0576b34eff6#.9ae4fd5dk">Design thinking: A manual for innovation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URIs tốt sẽ không bao giờ thay đổi]]></title>
    <link href="http://blog.teracy.com/2016/11/11/URIs-tot-se-khong-bao-gio-thay-doi/"/>
    <updated>2016-11-11T11:33:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/11/URIs-tot-se-khong-bao-gio-thay-doi</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/11/broken.jpg" title="Việc thay đổi cấu trúc URI thường đem lại trải nghiệm không tốt cho người dùng." >
Theo bạn URIs (đường dẫn) thế nào là tốt? Những URIs nào sẽ bị thay đổi theo thời gian? Đường dẫn không tự thay đổi chỉ có con người khiến nó thay đổi.
Theo lý thuyết thì không có lý do gì để mọi người thay đổi URI (hoặc là ngừng duy trì các tài liệu), nhưng thực tế thì lại có muôn vàn lý do mà dưới đây là một vài ví dụ.</p>

<!-- more -->


<ul>
<li><p><strong>Chúng tôi sắp xếp lại nội dung trang web để đem lại trải nghiệm tốt hơn.</strong></p>

<p>Có phải như bạn cảm thấy không thể duy trì URIs cũ như hiện tại? Nếu vậy, bạn đã chọn quy tắc đặt URI thật tệ. Hãy suy nghĩ về những URI mới để bạn có thể giữ chúng tồn tại sau khi thiết kế lại lần tới nhé.</p></li>
<li><p><strong>Chúng tôi có quá nhiều tài liệu đến mức không thể nào kiểm tra được cái nào đã cũ, cái nào là bí mật và hợp lệ và vì vậy chúng tôi nghĩ tốt hơn hết là thay đổi toàn bộ URIs để cấp phát lại từ đầu.</strong></p>

<p>Hmm, có lẽ tôi có thể đồng cảm với việc này &ndash; W3C đã từng trải qua thời kỳ như vậy khi mà chúng tôi đã phải sàng lọc cẩn thận quyền truy cập của từng tại liệu trước khi cho phép nó được truy cập rộng rãi. Cách giải quyết là mọi tài liệu cần được hoạch định trước &ndash; hãy quy ước rõ và lưu trữ các thông tin của tài liệu đại loại như tài liệu được phân phối như thế nào, ngày tạo tài liệu và khi nào tài liệu đấy hết hiệu lực.</p></li>
<li><p><strong>Uhm, chúng tôi thấy rằng chúng tôi phải chuyển các file đến thư mục khác.</strong></p>

<p>Đây là một trong những lý do vụng về nhất. Có vẻ có nhiều người không biết rằng các máy chủ Web đều cho phép bạn tùy chỉnh rất linh hoạt mối quan hệ giữa đường dẫn và file thực tế được sử dụng trên hệ thống. Hãy nghĩ rằng URI là một tập các tên trừu tượng, được sắp xếp một cách gọn gàng sau đó hãy gán nó vào những file/ứng dụng cụ thể trong hệ thống của bạn và sau đó hãy cấu hình máy chủ web một tẹo để thể hiện việc gán ghép đấy.
John không còn duy trì tài liệu này nữa, giờ thì chỉ Jane làm thôi.
Hãy nghĩ lại đi, tại sao tên của John lại nằm trên URI? Nó nằm trong thư mục của John nên phải có John trên URI à?</p></li>
<li><p><strong>Trước đây tôi dùng CGI script còn giờ thì chúng tôi chuyển sang dùng một chương trình khác.</strong></p>

<p>Việc bạn cứ phải chạy theo cấu trúc URI của một kiểu chương trình/Framework này và rồi sau đó thay đổi nó chỉ vì bạn sử dụng một chương trình khác nghe thật là điên rồ. Ngoài ra việc bạn không cấu hình lại được URI cho phần mềm đấy còn để lộ thông tin về cách thức hoạt động của máy chủ của bạn cho người khác thấy (kiểu như bạn dùng máy chủ kiểu gì, phần mềm nào) và điều đó cũng hơi nguy hiểm đấy. Tóm lại là rất bất hợp lý nếu bạn thay đổi cơ chế hoạt động và tất cả các đường dẫn đều phải thay đổi dù nội dung của bạn không thay đổi gì.</p>

<p>Lấy ví dụ cho điều này là trang thông tin khoa học quốc gia (Hoa kỳ).</p>

<p>  <a href="http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl">http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl</a></p>

<p>Đây là trang tìm kiếm tài liệu của trang thông tin khoa học, rõ ràng đây không có vẻ là URI được thiết kế cho việc tồn tại trong&hellip; vài năm! &ldquo;cgi&rdquo;, &ldquo;oldbrowse&rdquo; và &ldquo;.pl&rdquo; đã để lộ cách thức làm việc của cơ chế bên dưới. Tuy nhiên URI của kết quả tìm kiếm của trang thông tin khoa học quốc gia thì ổn hơn rất nhiều.</p>

<p>  <a href="http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm">http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm</a></p>

<p>Với phần đầu là &ldquo;pubs/1998&rdquo; cho ta gợi ý để biết rằng đó là tài liệu cũ từ năm 1998, cho dù thêm 100 năm nữa vào năm 2098 tài liệu thì có thể khác nhưng URI dạng này vẫn sẽ hợp lệ và NSF cho dù vẫn lưu trữ tài liệu cũ thì vẫn sẽ không phải lúng túng về URI này.</p></li>
<li><p><strong>Tôi không nghĩ rằng URLs sẽ phải cố định &ndash; chỉ có URNs mới cần cố định.</strong></p>

<p>Đây có lẽ là một trong những tác dụng phụ tồi tệ nhất của các thảo luận URN. Một số người dường như nghĩ rằng các không gian tên có thể được kéo dài ra và rằng chúng có thể làm cho các link lỏng lẻo như họ muốn, và khi đó &ldquo;URN sẽ xử lý được hết những điều này&rdquo;. Nếu bạn là một trong những người này thì tôi đã làm bạn vỡ mộng mất rồi.</p>

<p>Hầu hết các chương trình URN mà tôi thấy nó giống như ID tác giả theo sau hoặc là ngày hoặc là một chuỗi ký tự bất kỳ mà bạn chọn, hoặc đơn giản chỉ là một chuỗi ký tự. Cái này trông giống như một HTTP URI. Nói cách khác, nếu bạn nghĩ tổ chức của bạn sẽ có thể tạo ra các URN tồn tại mãi mãi, rồi chứng minh điều đó bằng cách tạo ra ngay các URN và sử dụng chúng thay cho các HTTP URI. Sẽ Không có vấn đề gì về HTTP làm cho URI của bạn không ổn định cả, vì đó là tổ chức của bạn mà. Hãy thực hiện một cơ sở dữ liệu để ánh xạ được URN tài liệu vào trong tên file hiện tại, và cho phép máy chủ trang web của bạn sử dụng nó để lấy được các tập tin.
Nếu bạn đã hiểu được điều này, và trừ khi bạn có tiền, thời gian và các địa chỉ liên hệ để thực hiện thiết kế phần mềm, thì khi đó bạn có thể đưa ra một số lý dó sau:</p></li>
<li><p><strong>Chúng tôi muốn điều đó nhưng chúng tôi không có công cụ.</strong></p>

<p>Tôi có thể hiểu và hoàn toàn đồng ý về lý do này. Bạn cần phải làm gì để máy chủ web luôn sử dụng một URI cố định và trả về đúng dữ liệu cho dù bạn có sử dụng hệ thống nào, lưu trữ ra sao tại bất kỳ thời điểm nào. Liệu bạn có cho rằng bạn có thể lưu URI ngay trong chính bản thân tài liệu như là một cách để đối chiếu và liên tục cập nhập cơ sở dữ liệu để khiến URI luôn đúng. Bạn sẽ muốn lưu trữ mối quan hệ giữa các phiên bản khác nhau và bản dịch của tài liệu đó. Ngoài ra bạn còn cần lữu trữ thông tin checksum để đảm bảo tính toàn vẹn của dữ liệu theo thời gian. Và như bạn thấy đấy, máy chủ web về cơ bản không phải là công cụ có thể cung cấp những điều đấy cho bạn. Khi bạn tạo một tài liệu mới, trình soạn thảo sẽ hỏi bạn URI thay vì nói cho bạn biết URI như thế nào.</p>

<p>Bạn cũng cẩn có thể thay đổi được một vài thứ như ai là chủ sở hữu của tài liệu, quyền truy câp ra sao&hellip; mà không phải thay đổi gì về URI.</p>

<p>Tại W3C chúng tôi sử dụng Jigedit (máy chủ Jigsaw dùng để chỉnh sửa tài liệu) để hỗ trợ việc theo dõi các phiên bản của tài liệu và chúng tôi đang thử nghiệm với các công cụ để tạo tài liệu. Nếu bạn là người viết công cụ, máy chủ thì hãy nhớ nhé.</p></li>
</ul>


<h1>Tại sao tôi phải quan tâm</h1>

<p>  Khi bạn thay đổi URI trang web của bạn, bạn sẽ không bao giờ biết được ai vẫn đang giữ URI cũ và khi một ai đó click vào URI nhưng nó không tồn tại thì thường họ sẽ mất niềm tin vào trang web đấy. Thiệt hại sẽ là hiển nhiên khi để người sử dụng phàn nàn về những đường link như thế.</p>

<h1>Vậy tôi phải bằt đầu từ đâu? Thiết kế URIs?</h1>

<p>  Nếu bạn muốn URI của bạn sẽ vẫn đúng đắn sau 2 năm hay 200 năm tới, thì hãy suy nghĩ về nó thật kỹ. URIs thay đổi khi một vài thông tin trong bản thân nó thay đổi. Thiết kế URI như thế nào thật sự là rất quan trọng. Và việc đầu tiên là hay loại bỏ bớt các thông tin không cần thiết ra khỏi URI.</p>

<p>  Ngày khởi tạo của tài liệu là một tham số sẽ không bao giờ thay đổi và nó rất hữu ích cho việc phân loại truy nhập từ hệ thống mới hay hệ thống cũ. Về cơ bản đấy là khởi đầu tốt cho một thiết kế URI ổn định.</p>

<p>  Có một ngoại lệ ở đây chính là URI dùng cho &ldquo;mới nhất&rdquo; hay trang &ldquo;nhất&rdquo;, ví dụ như URI ở dưới đây:</p>

<p>  <a href="http://www.pathfinder.com/money/moneydaily/latest/">http://www.pathfinder.com/money/moneydaily/latest/</a></p>

<ul>
<li><p><strong>Cái gì nên bỏ ra khỏi URI</strong></p>

<p>Hmm, ngoại trừ ngày tháng thì những phần khác chỉ tổ khiến mọi thứ rắc rối hơn thôi. Ví dụ:</p>

<ul>
<li><strong>Sử dụng tên tác giả</strong> &ndash; tác giả có thể thay đổi theo từng phiên bản của tài liệu, chỉ cần tác giả thay đổi thì URI của tài liệu xem như là đã không đúng nữa.</li>
<li><strong>Dùng tiêu đề của tài liệu</strong> &ndash; Ban đầu thì có vẻ tốt nhưng dần dần nó sẽ bị thay đổi rất nhanh khi tài liệu được cập nhật.</li>
<li><strong>Trạng thái của tài liệu</strong> &ndash; trạng thái của tài liệu không nên được thiết lập trong URI, URI của tài liệu mới nhất cần được cố định bất chấp tài liệu có trạng thái như thế nào đi nữa.</li>
<li><strong>Thông tin truy nhập</strong> &ndash; Tại W3C, chúng tôi chia quyền truy cập trang web thành 3 mục chính, nội dung dành cho chúng tôi, nội dung dành cho các thành viên và những nội dung công cộng. Ban đầu sử dụng URI riêng cho từng quyền truy nhập có vẻ ổn nhưng khi chúng tôi chuyển tài liệu từ quyền truy nhập này sang truy nhập khác thì link cũ sẽ không còn tồn tại và gây nên lỗi.</li>
<li><strong>Đuôi của file truy nhập</strong> &ndash; Đây là lỗi thường gặp &ldquo;.cgi&rdquo; &ldquo;.html&rdquo; là những thứ sẽ thay đổi theo thời gian. Bạn có chắc là bạn sẽ vẫn dùng html hay cgi hay php trong 20 năm tới? Thay vì sử dụng tên file và đuôi của nó trực tiếp thì bạn có thể sử dụng các biện pháp như: Sử dụng database để lưu trữ file, dùng mod rewrite để thay đổi cấu trúc URL tự động, sử dụng mod_spelling của Apache để tự động điền đuôi file, sửa lỗi chính tả&hellip;</li>
<li><strong>Đường dẫn chỉ ổ đĩa</strong> &ndash; !!? à vâng, nhưng tôi đã từng thấy rồi đấy thưa các bạn.</li>
</ul>


<p>Một URI đơn giản và tốt có thể ở dạng như sau:</p>

<p><a href="http://www.w3.org/1998/12/01/chairs">http://www.w3.org/1998/12/01/chairs</a></p></li>
<li><p><strong>Phân loại tài liệu theo từng đề mục:</strong></p>

<p>Đây là một con dao 2 lưỡi mà đôi khi rất khó để tránh khỏi. Thường thì việc sử dụng đề mục trong URI khi bạn phân loại tài liệu dựa vào đặc tính tài liệu mà bạn đang làm việc. Các đặc tính sẽ dần thay đổi theo thời gian, ở W3C chúng tôi đang muốn đổi &ldquo;MarkUp&rdquo; thành &ldquo;Markup&rdquo; và rồi chúng tôi lại đổi thành &ldquo;HTML&rdquo;, bạn thấy đấy, các khái niệm sẽ dần thay đổi theo thời gian. Ví dụ như liệu sau này chúng ta có còn sử dụng &ldquo;Stylesheet&rdquo;, liệu có còn khái niệm &ldquo;Lịch sử truy nhập&rdquo; trong trình duyệt nữa không!?</p>

<p>Vận hành và quản lý trang web của một tổ chức là rất khó, mà thật ra tổ chức cái gì cũng vậy. Giải pháp trung hạn của bạn có thể sẽ trở thành trở ngại lớn trong dài hạn.</p>

<p>Thêm vấn đề nữa của việc phân loại này là mỗi người sẽ có cách phân loại riêng của mình, sự liên kết giữa các khái niệm là không cố định theo từng cá nhân và nó sẽ tiềm ẩn nguy cơ rất lớn khi bạn phân loại theo mô hình cây như vậy. Tóm lại, nếu bạn phân loại theo chủ đề trong URI nghĩa là bạn đang sử dụng một kiểu phân loại như vậy và việc phân loại này sẽ bị thay đổi trong tương lai và điều đó sẽ khiến URI bị hỏng.</p></li>
<li><p><strong>Đừng quên cả việc thiết kế tên miền nữa nhé</strong></p>

<p>Những lưu ý về URI ở trên không chỉ giới hạn trong phần địa chỉ mà còn trong cả tên miền. Nếu bạn có máy chủ riêng cho những thứ của bạn, hãy nhớ việc phân chia sử dụng subdomain sẽ tiềm ẩn nguy cơ khiến nhiều URI không còn tồn tại trong tương lai. Nhiều quản trị hệ thống cảm thấy thoải mái hơn khi phân chia mọi thứ theo domain con như kiểu &ldquo;cgi.pathfinder.com&rdquo;, &ldquo;lists.w3.org&rdquo; nhưng hãy cẩn trọng và suy nghĩ thật kỹ khi sử dụng nhiều hơn một tên miền cho trang web của bạn. Vận dụng khéo léo việc tạo ra các trang chuyển hướng sẽ giúp bạn quản lý tốt hơn.</p>

<h1>Kết luận</h1>

<p>Thiết kế và sử dụng URIs nhất quán trong 2, 20 hay thậm chí 200 năm chắc chắn là không đơn giản. Tuy nhiên vì các đồng chí quản trị cứ hay đưa ra những quyết định khiến cho họ lâm vào rắc rối trong tương lai. Thường thì do họ sử dụng những công cụ có sẵn và công cụ đấy lại có tầm nhìn quá ngắn hạn và bản thân họ cũng không thấy được những vấn đề lớn trong tương lai khi các URI của họ bị thay đổi. Thông điệp ở đây là, hay cố gắng thiết kế URI làm sao cho dù mọi thứ thay đổi (công nghệ, hệ thống, con người, các tham số, thuộc tính) thì URI của bạn vẫn luôn cố định và tất nhiên là truy cập được :).</p></li>
</ul>


<p> Lược dịch từ: <a href="https://www.w3.org/Provider/Style/URI.html">Cool URIs don&rsquo;t change</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to develop and deploy React applications easily and fast with Webpack, ES6+ and Docker]]></title>
    <link href="http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker/"/>
    <updated>2016-11-07T07:18:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>React is an awesome library to work with, however, we must pick up other libraries to build up a
robust application such as redux, redux-connect, server side rendering, redux-form, etc. After that,
we must organize the application structure with best practices to develop and deploy it. Doing all
these tasks requires some good experiences, so it&rsquo;s very difficult for a newbie. Good news is that there
are many starter boilerplate projects out there for us to choose. And today we&rsquo;d like to introduce
you a starter React boilerplate for faster development and deployment.</p>

<!-- more -->


<p>There is a good starter React boilerplate with the following outstanding batteries included:</p>

<ul>
<li>Universal rendering (both client and server side rendering from the same client side code)</li>
<li>Babel for ES6+ for writing modern JS syntax today</li>
<li>Webpack for bundling, hot module reloading</li>
<li>Redux, Redux Dev Tools, redux-form, React Router</li>
<li>ESLint consistent style checking</li>
<li>Unit testing</li>
<li>bootstrap and font-awesome</li>
<li>And many other cool things</li>
</ul>


<p>However, the project is not active anymore, so we decided to fork and update it a bit to work with
Docker easier and faster. Let&rsquo;s get started with
<a href="https://github.com/hoatle/react-redux-universal-hot-example">https://github.com/hoatle/react-redux-universal-hot-example</a> then.</p>

<h2>Prerequisites</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-prerequisites.gif" title="React Project Prerequisites" ></p>

<p>Make sure you have the following softwares installed:</p>

<ul>
<li>git</li>
<li>docker</li>
<li>docker-compose</li>
</ul>


<p>Make sure that docker and docker-compose are available by checking <code>git version</code>, <code>docker info</code> and
<code>docker-compose version</code> as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git version
</span><span class='line'>git version 2.10.2
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker info
</span><span class='line'>Containers: 9
</span><span class='line'>Running: 1
</span><span class='line'>Paused: 0
</span><span class='line'>Stopped: 8
</span><span class='line'>Images: 216
</span><span class='line'>Server Version: 1.12.1
</span><span class='line'>Storage Driver: aufs
</span><span class='line'>Root Dir: /var/lib/docker/aufs
</span><span class='line'>Backing Filesystem: extfs
</span><span class='line'>Dirs: 244
</span><span class='line'>Dirperm1 Supported: <span class="nb">true</span>
</span><span class='line'>Logging Driver: json-file
</span><span class='line'>Cgroup Driver: cgroupfs
</span><span class='line'>Plugins:
</span><span class='line'>Volume: <span class="nb">local</span>
</span><span class='line'>Network: host bridge null overlay
</span><span class='line'>Swarm: inactive
</span><span class='line'>Runtimes: runc
</span><span class='line'>Default Runtime: runc
</span><span class='line'>Security Options: seccomp
</span><span class='line'>Kernel Version: 4.4.20-moby
</span><span class='line'>Operating System: Alpine Linux v3.4
</span><span class='line'>OSType: linux
</span><span class='line'>Architecture: x86_64
</span><span class='line'>CPUs: 2
</span><span class='line'>Total Memory: 1.953 GiB
</span><span class='line'>Name: moby
</span><span class='line'>ID: W2PL:SOAQ:Y24X:VTFK:2Z3X:3CON:HWRK:7EMB:E2D4:EAPJ:NSKY:YHJ2
</span><span class='line'>Docker Root Dir: /var/lib/docker
</span><span class='line'>Debug Mode <span class="o">(</span>client<span class="o">)</span>: <span class="nb">false</span>
</span><span class='line'>Debug Mode <span class="o">(</span>server<span class="o">)</span>: <span class="nb">true</span>
</span><span class='line'>File Descriptors: 20
</span><span class='line'>Goroutines: 34
</span><span class='line'>System Time: 2016-11-07T07:45:16.819335883Z
</span><span class='line'>EventsListeners: 1
</span><span class='line'>No Proxy: *.local, 169.254/16
</span><span class='line'>Username: hoatle
</span><span class='line'>Registry: https://index.docker.io/v1/
</span><span class='line'>Insecure Registries:
</span><span class='line'>127.0.0.0/8
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose version
</span><span class='line'>docker-compose version 1.8.0, build f3628c7
</span><span class='line'>docker-py version: 1.9.0
</span><span class='line'>CPython version: 2.7.9
</span><span class='line'>OpenSSL version: OpenSSL 1.0.2h 3 May 2016
</span></code></pre></td></tr></table></div></figure>


<p>If you get the similar output, you&rsquo;re good to go to the next step.</p>

<h2>Git clone the project</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-clone.gif" title="React Project Git Clone" ></p>

<p>We&rsquo;re developing a React application named: &ldquo;my-app&rdquo;. Let&rsquo;s clone the starter project first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p ~/teracy-dev/workspace
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/teracy-dev/workspace
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/hoatle/react-redux-universal-hot-example.git my-app
</span></code></pre></td></tr></table></div></figure>


<h2>Development</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>Docker is really awesome to create an isolated consistent development and deployment environment and
it&rsquo;s super fast, too. We&rsquo;re leveraging Docker and Docker workflow for all our projects at Teracy,
both internal and outsourcing projects.
After cloning the starter project, let&rsquo;s start developing with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/teracy-dev/workspace/my-app
</span><span class='line'><span class="nv">$ </span>docker-compose pull <span class="o">&amp;&amp;</span> docker-compose up
</span></code></pre></td></tr></table></div></figure>


<p>If you get the following error output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ERROR: <span class="k">for </span>dev Cannot start service dev: driver failed programming external connectivity on endpoint myapp_dev_1 <span class="o">(</span>e2105083bdacaf5bb0684aa7a34ae0dc92b20cc748a31491368c7afa3e51da30<span class="o">)</span>: Error starting userland proxy: Bind <span class="k">for </span>0.0.0.0:3000 failed: port is already allocated
</span><span class='line'>ERROR: Encountered errors <span class="k">while </span>bringing up the project.
</span></code></pre></td></tr></table></div></figure>


<p>then make sure the port 3000 is available for &ldquo;my-app&rdquo; to use.</p>

<p>If you get the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose pull <span class="o">&amp;&amp;</span> docker-compose up
</span><span class='line'>Pulling dev <span class="o">(</span>hoatle/react-redux-universal-hot-example:dev_latest<span class="o">)</span>...
</span><span class='line'>dev_latest: Pulling from hoatle/react-redux-universal-hot-example
</span><span class='line'>43c265008fae: Already exists
</span><span class='line'>af36d2c7a148: Already exists
</span><span class='line'>143e9d501644: Already exists
</span><span class='line'>df720fc8e4f1: Already exists
</span><span class='line'>eae19baa28ff: Already exists
</span><span class='line'>9004de327d6a: Already exists
</span><span class='line'>753292cc4b91: Already exists
</span><span class='line'>21edf49ccd04: Pull <span class="nb">complete</span>
</span><span class='line'>5571a198d5e5: Pull <span class="nb">complete</span>
</span><span class='line'>12965aa2aa24: Pull <span class="nb">complete</span>
</span><span class='line'>cd5c00a0e311: Pull <span class="nb">complete</span>
</span><span class='line'>5b4a21012860: Pull <span class="nb">complete</span>
</span><span class='line'>Digest: sha256:947e1889ff53d65cd2e9dd3357d45cf8714504995564e0a7183a5ff13a605ac0
</span><span class='line'>Status: Downloaded newer image <span class="k">for </span>hoatle/react-redux-universal-hot-example:dev_latest
</span><span class='line'>Creating myapp_dev_1
</span><span class='line'>Attaching to myapp_dev_1
</span><span class='line'>dev_1 | yarn install v0.16.1
</span><span class='line'>dev_1 | success Already up-to-date.
</span><span class='line'>dev_1 | Done in 0.31s.
</span><span class='line'>dev_1 | npm info it worked <span class="k">if </span>it ends with ok
</span><span class='line'>dev_1 | npm info using npm@3.10.8
</span><span class='line'>dev_1 | npm info using node@v6.9.1
</span><span class='line'>dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~predev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | &gt; numerologist-app@0.1.0-SNAPSHOT dev /opt/app
</span><span class='line'>dev_1 | &gt; concurrent --kill-others <span class="s2">&quot;npm run watch-client&quot;</span> <span class="s2">&quot;npm run start-dev&quot;</span> <span class="s2">&quot;npm run start-dev-api&quot;</span>
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | Warning: <span class="s2">&quot;concurrent&quot;</span> <span class="nb">command </span>is deprecated, use <span class="s2">&quot;concurrently&quot;</span> instead.
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info it worked <span class="k">if </span>it ends with ok
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm info using npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm info using node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> it worked <span class="k">if </span>it ends with
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> ok
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> using node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> it worked <span class="k">if </span>it ends with
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> ok
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~start-dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT start-dev /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> &gt; better-npm-run start-dev
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> Executing script: start-dev
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> to be executed: node ./bin/server.js
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~prewatch-client: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~watch-client: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT watch-client /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> &gt; better-npm-run watch-client
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev-api: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~start-dev-api: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT start-dev-api /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> &gt; better-npm-run start-dev-api
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Executing script: watch-client
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> to be executed: node webpack/webpack-dev-server.js
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> Executing script: start-dev-api
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> to be executed: node ./bin/api.js
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> <span class="o">==</span>&gt; 🚧 Webpack development server listening on port 3001
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> ----
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> <span class="o">==</span>&gt; 🌎 API is running on port 3030
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> <span class="o">==</span>&gt; 💻 Send requests to http://localhost:3030
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> ----
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> <span class="o">==</span>&gt; ✅ React Redux Example is running, talking to API server on 3030.
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> <span class="o">==</span>&gt; 💻 Open http://0.0.0.0:3000 in a browser to view the app.
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Hash: 4bfaa3d4b9c381888d2a
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Version: webpack 1.13.3
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Time: 44424ms
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Asset Size Chunks Chunk Names
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> af7ae505a9eed503f8b8e6982036873e.woff2 77.2 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> f4769f9bdb7466be65088239c12046d1.eot 20.1 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> fa2772327f55d8198301fdb8bcfc8158.woff 23.4 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> e18bbf611f2a2e43afc071aa2f4e1512.ttf 45.4 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 89889688147bd7575d6327160d64e760.svg 109 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 674f50d287a8c48dc19ba404d20fe713.eot 166 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 448c34a56d699c29117adc64c43affeb.woff2 18 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> fee66e712a8a08eef5805a46892932ad.woff 98 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> b06871f281fee6b241d60582ae9369b9.ttf 166 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 912ec66d7572ff821749319396470bde.svg 444 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> c29770d03d2e95e3ea5899d57c6cfeab.jpg 92.2 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> main-4bfaa3d4b9c381888d2a.js 9.61 MB 0 <span class="o">[</span>emitted<span class="o">]</span> main
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> webpack built 4bfaa3d4b9c381888d2a in 44424ms
</span></code></pre></td></tr></table></div></figure>


<p>Then it&rsquo;s good to go, open <a href="http://localhost:3000">http://localhost:3000</a> to see the starter project home page.</p>

<p>Try to make some changes to the source code, you should see the changes reflected immediately without
any page reloading, this is called hot module reloading, a really awesome feature to boost development
productivity.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-instant-changes.gif" title="React Project Instant Changes" ></p>

<h2>Deployment</h2>

<p>We&rsquo;re going to deploy the Docker image. There are guides that you can follow:</p>

<ul>
<li>Deploy on Heroku: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md</a></li>
<li>Simple deployment with docker-compose: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md</a></li>
</ul>


<p>There are many production best practices that we should improve for the starter project.</p>

<h2>CI (continuous integration) and CD (continuous delivery)</h2>

<p>By using CI and CD systems like travis-ci and gitlab-ci, we could stick to the following process:</p>

<ul>
<li>Pull request (merge request) is sent &ndash;> CI checks.</li>
<li>Code changes &ndash;> CI checks.</li>
<li>CI checking is passed, then CD starts.</li>
<li>CD will deploy automatically, for example, to Heroku or other providers or your in-house data
center.</li>
</ul>


<p>You can update all of these steps by adjusting the following files accordingly:</p>

<ul>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml</a></li>
</ul>


<p>At the CI checking step, we build Docker images (both development and production images):</p>

<ul>
<li><a href="https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/">https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry">https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry</a></li>
</ul>


<p>The development images install all development stuff (excluding the source code) so that
all the developers should have the same development environment as long as they&rsquo;re using the same
development image.</p>

<p>The production (distribution) images install and package all runtime stuff so that everyone could
run the applications right away with the same runtime environment.</p>

<p>You can see these CI systems in action:</p>

<ul>
<li><a href="https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds">https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines">https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines</a></li>
</ul>


<p>Building on travis-ci is super fast and it&rsquo;s very slow on gitlab-ci. However, using gitlab is free
for unlimited projects, it includes Docker registry for free, too.</p>

<p>You can install gitlab on your server, it should be faster but you have to pay for the devops
maintenance cost.</p>

<p>If you could pay for Docker Hub, Github and Travis-CI, it&rsquo;s super fast and convenient for development
without the devops maintenance cost.</p>

<p>Or even better, ping us for consulting :&ndash;).</p>

<h2>react-boilerplate introduction</h2>

<p><code>react-redux-universal-hot-example</code> is a good start, however, there are still many improvements that
we&rsquo;d like to add, for example:</p>

<ul>
<li>Better code and component organization convention. The Angular 2 convention is a really great
inspiration for this.</li>
<li>Update dependencies to latest versions.</li>
<li>Build the deployment Docker that should include runtime stuff only, not development stuff.</li>
<li>Server side code should be production ready and optimized.</li>
</ul>


<p>And there are more to do. So we intent to create a better <code>react-redux-universal-hot-example</code> version,
we call it <code>react-boilerplate</code>.</p>

<p>The project is located at: <a href="https://github.com/teracyhq/react-boilerplate">https://github.com/teracyhq/react-boilerplate</a> . We&rsquo;ll announce v0.1.0 as soon
as possible when it&rsquo;s ready. So stay tuned! At present we should use <code>react-redux-universal-hot-example</code>.</p>

<h2>React application consulting and developing service</h2>

<p>We&rsquo;re offering React application consulting and developing service.</p>

<p>If you want React development and production deployment help, don&rsquo;t hesitate to ping us. We&rsquo;re
eager to help you to develop world-class React applications with better and better developer experience
and production deployment.</p>

<h2>Learn more</h2>

<p>You should learn more about React at:</p>

<ul>
<li><a href="http://exploringjs.com/es6/">http://exploringjs.com/es6/</a></li>
<li><a href="https://github.com/veggiemonk/awesome-docker">https://github.com/veggiemonk/awesome-docker</a></li>
<li><a href="https://github.com/enaqx/awesome-react">https://github.com/enaqx/awesome-react</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example#about">https://github.com/hoatle/react-redux-universal-hot-example#about</a></li>
</ul>


<p>Hopefully, this is a good start for React newbies to explore the whole new world of modern web
application development.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cách tiếp cận tinh gọn để thẩm định sản phẩm (Phần 3)]]></title>
    <link href="http://blog.teracy.com/2016/10/28/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-3/"/>
    <updated>2016-10-28T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/28/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-3</id>
    <content type="html"><![CDATA[<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-2/">Phần 2</a> và là phần cuối cùng của bài viết &ldquo;Cách tiếp cận tinh gọn để thẩm định sản phẩm&rdquo;.</p>

<h1>Thẩm Định Sự Sẵn Sàng Chi Trả Của Người Dùng</h1>

<p>Có rất nhiều cách để thẩm định sự sẵn sàng chi trả của người dùng, nhưng một trong những thách thức lớn nhất đó là chúng ta không thể hoàn toàn tin tưởng vào lời nói. Chúng ta đều biết những người nói &ldquo;Tất nhiên, tôi hoàn toàn muốn làm điều đó!&rdquo; nhưng sau đó họ không giữ lời đến thời điểm cam kết. Chúng ta muốn có được những khách hàng chi tiền sau khi họ nói càng nhiều càng tốt.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/tham-dinh-su-san-sang-chi-tra.jpg" title="Thẩm định sự sẵn sàng chi trả" ></p>

<h2>CÁCH XÂY DỰNG MỘT TRANG WEB THẨM ĐỊNH</h2>

<p>Trang web chỉ cần có 1 trang duy nhất là cũng đủ để xác nhận, đặc biệt được coi là một bước đầu tiên. Nhưng nếu bạn muốn dần dần bổ sung thêm nhiều trang và nội dung để tăng tính chính xác và tìm hiểu thêm thì đó cũng là một lựa chọn.</p>

<p>Nếu bạn là dân kỹ thuật, bạn có thể tự thiết kế và lập trình trang web của mình, nhưng tốt hơn hết là hãy sử dựng công cụ xây dựng trang web có sẵn mẫu.</p>

<!-- more -->


<p>Dưới đây là một vài lựa chọn tốt để bạn xây dựng trang web thẩm định:</p>

<ul>
<li><a href="https://www.squarespace.com/">Squarespace</a> có một số thiết kế khá bắt mắt.</li>
<li><a href="https://webflow.com/">Webflow</a> cho phép rất nhiều tùy biến và phù hợp để thiết kế những trang web có 1 trang duy nhất.</li>
<li><a href="http://quickmvp.com/">QuickMVP</a> là một bộ công cụ rất hữu ích giúp tạo các landing pages để thẩm định các ý tưởng và sản phẩm. Nó đơn giản hóa quy trình tạo landing page, thiết lập quảng cáo và thu thập các số liệu thống kê.</li>
</ul>


<p>Bạn chắc chắn muốn có một vài thành phần trong trang web đơn giản của bạn.</p>

<ul>
<li>Hãy giải thích một cách rõ ràng và chính xác tính năng sản phẩm của bạn.</li>
<li>Làm nổi bật những lợi điểm bán hàng độc nhất</li>
<li>Giải quyết bất kỳ vấn đề quan trọng nào mà người dùng gặp phải trong quá trình kiểm thử. Nếu họ lo lắng về bảo mật, hiệu suất hay sự thoải mái thì hãy trình bày giải pháp của bạn với họ.</li>
<li>Hãy thu hút, lôi kéo người dùng đến khu vực kiểm tra và thanh toán trong trang web của bạn. Điều này cũng cần rõ ràng và dứt khoát, như là &ldquo;Mua ngay chỉ với $99!&rdquo;.</li>
<li>Hãy đảm bảo rằng trang thanh toán có biểu mẫu thu thập email, do đó bạn có thể thu thập được địa chỉ của các khách hàng tiềm năng. <a href="http://mailchimp.com/">MailChimp</a> là một lựa chọn tốt cho bạn.</li>
<li>Thay vì xác nhận đơn đặt hàng của người dùng, bạn nên phô ra trang &ldquo;Sorry&rdquo; giải thích với họ tại sao bạn tiến hành các thí nghiệm. Bằng cách này họ sẽ không bị kỳ vọng sai khi nhận sản phẩm.</li>
<li>Chạy phân tích trên trang web của bạn để theo dõi xem mọi người tương tác với trang web của bạn như thế nào. Bạn có thể dùng công cụ <a href="https://analytics.google.com/analytics/web/">Google Analytics</a>, nó rất đơn giản và miễn phí.</li>
</ul>


<p>Khi trang web thẩm định đi vào hoạt động, bạn sẽ cần thu hút nhiều người truy cập. Hãy cẩn trọng một chút khi làm điều này trong mạng lưới bạn bè và gia đình của bạn. Bạn đừng để rơi vào tình cảnh mọi người đưa ra phản hồi tích cực, đăng ký vào trang web của bạn chỉ vì họ biết bạn.</p>

<p>Kỹ thuật tốt nhất để mang đến lượng traffic chủ quan đến trang web của bạn đó là chi một ít tiền cho <a href="https://www.facebook.com/business/products/ads">Facebook Ads</a> hoặc chiến dịch quảng cáo của <a href="https://www.google.com/adwords/?subid=vn-en-or-ot-aw-c-dyn-www.smashingmagazine.com!o2">Google AdWords</a>.</p>

<p>Có thể bạn sẽ cần chi khoảng 100$ &ndash; 500$ cho vụ quảng cáo để có đủ người dùng truy nhập vào trang web của bạn để thẩm định. Chi phí này dường như cũng là khá tốn kém, đó cũng là lý do vì sao chúng tôi để giai đoạn thẩm định này ở gần cuối bài. Hãy suy nghĩ kỹ theo cách này, 100$ &ndash; 500% là chi phí an toàn và ít rủi ro hơn so với chi tiêu hàng ngàn đô la xây dựng một trang web thực sự. Hơn nữa, nếu ý tưởng sản phẩm mạnh mẽ thì số tiền này cũng không bị lãng phí. Bạn sẽ xây dựng được một danh sách lớn những người dùng quan tâm đến sản phẩm của bạn &ndash; có thể là những người sẽ đăng ký cho sản phẩm khi nó thực sự ra mắt.</p>

<p><a href="https://www.facebook.com/business">Facebook</a> và <a href="https://www.google.com/adwords/?subid=vn-en-or-ot-aw-c-dyn-www.smashingmagazine.com!o2">Google AdWords</a> có khả năng nhắm mục tiêu rất cao, cho phép bạn trình bày giải pháp của mình đến đúng đối tượng mà bạn muốn trong giai đoạn &ldquo;Thẩm định vấn đề&rdquo;. Bạn cũng có thể tối ưu quảng cáo của mình bằng cách xem xét kỹ các dữ liệu từ những quảng cáo ban đầu như: số lần click, like và share và nơi người dùng tương tác với nó. Bắt đầu một chiến dịch quảng cáo trên Google AdWords hoặc Facebook thực sự rất đơn giản. Chúng tôi sẽ không chỉ ra các bước cài đặt quảng cáo này ở đây, bạn có thể tìm kiếm bằng Google để biết làm thế nào tạo một chiến dịch quảng cáo nhanh.</p>

<p>Chúng tôi khuyên bạn nên để ý đến một vài số liệu:</p>

<ul>
<li><a href="https://www.smashingmagazine.com/2009/05/optimizing-conversion-rates-its-all-about-usability/">Tỷ lệ chuyển đổi</a></li>
<li>Có bao nhiêu khách đã cố gắng để mua được sản phẩm?</li>
<li>Tổng số &ldquo;bán hàng&rdquo;</li>
<li>Tìm hiểu xem doanh số bán hàng đến từ đâu (về mặt địa lý).</li>
<li>Tỷ lệ bỏ giỏ hàng</li>
</ul>


<p>Trong một gian hàng online thực tế, tỷ lệ rời bỏ giỏ hàng khoảng 60 &ndash; 80% (<a href="http://baymard.com/lists/cart-abandonment-rate">trung bình là 68%</a>). Điều này có nghĩa là sẽ có 7 trong số 10 người đến phần kiểm tra thanh toán nhưng không hoàn tất việc thanh toán.</p>

<p>Để tìm hiếu kỹ vấn đề này hơn, chúng tôi gợi ý bạn những điều sau đây:</p>

<ul>
<li><strong><a href="https://www.smashingmagazine.com/2010/06/the-ultimate-guide-to-a-b-testing/">A/B test</a></strong>: Thử nghiệm với các tiêu đề và nội dung khác nhau để xem chúng ảnh hưởng đến chuyển đổi như thế nào. Tuy nhiên, các phát hiện của bạn sẽ chỉ có ý nghĩa thống kê nếu như bạn hướng được hàng nghìn lượt truy cập vào trang web của bạn.</li>
<li><strong>Nói chuyện với khách hàng</strong>: Khi bạn thu thập địa chỉ email của ai đó, bạn sẽ có thể gửi tin nhắn hoặc bản tin cho họ và giải thích sản phẩm của bạn đang tiến triển thế nào. Tuy nhiên, bạn cũng có thể tiếp cận trực tiếp với họ và hỏi họ một vài câu hỏi để hiểu nhu cầu và động cơ của họ.</li>
</ul>


<h2>BẮT ĐẦU DỊCH VỤ CHĂM SÓC KHÁCH HÀNG</h2>

<p>Nguyên tắc cơ bản của dịch vụ chăm sóc khách hàng là trước khi thực sự xây dựng một phần mềm nào đó, bạn nên giả lập dịch vụ và tự thực hiện đặt đơn hàng.</p>

<p>Hãy xem một ví dụ khác từ thế giới thực. Giả sử chúng ta xây dựng <a href="https://hellopingpong.com/">PingPong</a> để giúp người dùng thu thập thông tin phản hồi và thực hiện các cuộc phỏng vấn. Công nghệ phía sau sản phảm này thực sự không phức tạp chút nào, nhưng đòi hỏi phải đầu tư vào thiết kế và phát triển để tung ra một sản phẩm hiệu quả. Rất nhiều công việc cần làm để có một sản phẩm thành công, nhưng ở giai đoạn đầu này, chúng ta vẫn còn nhiều giả định chưa được thẩm định về việc người dùng thực sự muốn gì.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/pingpong.png" title="Pingpong" ></p>

<p>Thay vì thực hiện tất cả mọi việc và xây dựng một dịch vụ mà người dùng có thể đăng ký trực tiếp và sử dụng, thì chúng ta sẽ  đi theo con đường chăm sóc khách hàng. Vì vậy, cách duy nhất đối với khách hàng trả tiền để đăng ký đó là ngay bây giờ chúng ta phải đồng ý với họ sẽ tự thực hiện đơn hàng của họ. Cuối cùng thì sản phẩm sẽ được tiếp nhận và thực hiện các việc này một cách tự động. Tất nhiên sẽ luôn luôn có rủi ro đó là dịch vụ hướng dẫn này sẽ không thể bao quát được hết các nhu cầu và bạn sẽ phải chuyển xuống cho khách hàng; đây là một vấn đề khác mà bạn cần giải quyết và đó là một vấn đề nghiêm trọng của bạn.</p>

<p>Điều này có thể giống như một cam kết về thời gian rất lớn, nhưng thực tế nó mang đến rất nhiều bài học quan trọng. Chúng tôi sẽ tự chạy dịch vụ ngay khi bắt đầu và xây dựng những mối quan hệ sâu sắc với một vài khách hàng đầu tiên của mình.  Bởi vì chúng tôi giao tiếp với họ nhiều, chúng tôi sẽ hỏi họ những câu hỏi liên quan đến nhu cầu và mong đợi của họ, sau đó sử dụng thông tin phản hồi của họ để tinh chỉnh mô hình kinh doanh của chúng tôi trước khi chúng tôi xây dựng một sản phẩm đầy đủ. Đây là một cách rất hay để thẩm định chính xác xem người dùng sẵn sàng chi trả cho cái gì và để tối đa hóa giá trị người dùng.</p>

<p>Thêm nữa, thực hiện dịch vụ chăm sóc khách hàng có nghĩa là bạn sẽ có thể kiếm tiền ngay lập tức.</p>

<h2>GIẢ LẬP LANDING PAGE</h2>

<p>Cách tốt nhất để thẩm định mà không có sự tham gia của những người không thực sự muốn trả tiền mua sản phẩm của bạn đó là xây dựng một trang web tiếp thị giả mạo.</p>

<p>Kỹ thuật này có vẻ như hơi gây ra hiểu lầm chút. Nhưng miễn là bạn không lấy tiền của mọi người cho những gì mà bạn không cung cấp cho họ, thường thì mọi người sẽ hiểu được động cơ của bạn.</p>

<p>Hãy xem <a href="https://checkmaid.com/">Check Maid</a>, dịch vụ trực tuyến để tìm kiếm và đặt dịch vụ lau dọn nhà cửa. Khi nhóm tạo trang web lần đầu, thực sự họ vẫn chưa đi vào kinh doanh. Người sáng lập Check Maid ông Alex Brola nói:</p>

<p><em>&ldquo;Chúng tôi thẩm định ý tưởng của mình mà không có lấy một nhân viên dọn dẹp vệ sinh nào cả. Chúng tôi đưa ra trang web, tạo một biểu mẫu đặt dịch vụ, số điện thoại và chạy một vài quảng cáo <a href="pay-per-clicks">trả tiền theo số lượt nhấp chuột</a> thông qua Google và Bing, và xem tỷ lệ chuyển đổi như thế nào để chúng tôi quyết định có thực sự cần những người người dọn vệ sinh hay không.&rdquo;</em></p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/gia-lap-landing-page.png" title="Gỉa lập landing page" ></p>

<p>Việc thẩm định sự sẵn sàng chi trả bằng cách sử dụng landing page giả lập sẽ thực sự là cái mà bạn phải quan tâm. Nếu bạn làm nó sai, bạn có thể phá hủy thương hiệu của bạn và làm cho người dùng vô cùng thất vọng.</p>

<p>Điều quan trọng là trình bày nội dung tiếp thị và hiển thị rõ ràng đường link &ldquo;Đăng ký&rdquo; hoặc &ldquo;Mua ngay&rdquo;. Khi người dùng click vào đường link này, bạn sẽ hiển thị một thông điệp giải thích tại sao dịch vụ vẫn chưa hoạt động, và đề nghị họ nhập địa chỉ email của họ để nhận thông tin cập nhật khi sản phẩm được tung ra. Hơn nữa, ý tưởng tốt là sẽ có phần thưởng cho những người dùng đầu tiên bằng cách nói với họ rằng họ sẽ được giảm giá hoặc những phần thưởng khác dành cho những người ủng hộ đầu tiên.</p>

<p>Chúng tôi khuyên bạn không nên đi đi xa hơn ngoài việc lưu trữ địa chỉ email của họ (để bạn có thể liên lạc với họ sau này) và có thể thông tin về khu vực họ ở nếu như có liên quan đến sản phẩm của bạn (để đánh giá nhu cầu sử dụng theo vùng). Hãy để họ biết được sản phẩm vẫn chưa được hoàn thành càng sớm càng tốt. Nhiều điều luật, đặc biệt là ở Châu Âu, cấm  quảng cáo gây hiểu lầm &ndash; thật cẩn thận để không thanh toán hay tiết lộ thông tin cá nhân nhạy cảm một cách nhầm lẫn.</p>

<p>Nếu bạn muốn tránh một trang langding page giả lập, bạn có thể lựa chọn theo cách chăm sóc khách hàng, cách này về mặt đạo đức mà nói thì ít nhạy cảm hơn và thường là một giải pháp thay thế rất tốt.</p>

<h1>Thẩm Định Một Vài Ý Tưởng</h1>

<p>Bây giờ bạn đã biết làm thế nào để thẩm định một ý tưởng của sản phẩm, cũng hãy tìm hiểu xem làm thế nào chúng ta có thể khám phá một vài ý tưởng sản phẩm:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/tham-dinh-mot-so-y-tuong.jpg" title="Thẩm định sản phẩm tinh gọn" ></p>

<p>Hãy xem 6 ý tưởng của chúng tôi được chỉ ra như thế nào khi chúng tôi đưa chúng vào trong quy trình thẩm định tinh gọn:</p>

<ol>
<li>Ý tưởng này thất bại ngay từ đầu vì chúng tôi không thể thẩm định được vấn đề.</li>
<li>Ý tưởng này thẩm định được vấn đề nhưng không thể xây dựng được thị trường.</li>
<li>Ý tưởng này thất bại khi thẩm định vấn đề.</li>
<li>Ý tưởng này thẩm định được vấn đề và thị trường nhưng nó lại không thể thẩm định được sản phẩm.</li>
<li>Đây là một vấn đề xoay quanh ý tưởng 4. Có thể nguyên mẫu đầu tiên của chúng tôi bị thất bại, vì vậy chúng tôi quyết định xây một nguyên mẫu mới. Lần này chúng tôi có thể học hỏi được vài điều từ những sai lầm của mình và thực hiện bước tiếp cận khác. Ý tưởng này thẩm định được sản phẩm, nhưng lại thất bại khi thẩm định sự sẵn sàng trả tiền mua sản phẩm của người dùng.</li>
<li>Ý tưởng cuối cùng là thẩm định cả 4 giai đoạn. Trong số những ý tưởng này thì đây là ý tưởng mà chúng ta cần tìm hiểu và phát triển xa hơn nữa.</li>
</ol>


<p>Bạn sẽ thấy, nhiều ý tưởng tuyệt vời của bạn bị thất bại ngay từ đầu trong quy trình này. Việc tìm ra vấn đề mà bạn cố gắng giải quyết đơn giản không phải là vấn đề của người dùng thực sự vô cùng phổ biến. Nhưng với sự kiên trì và lặp đi lặp lại, cuối cùng bạn sẽ có được ý tưởng sản phẩm được thẩm định.</p>

<p>Bạn có thể chú ý thấy rằng tính khả thi thẩm định ở mỗi giai đoạn khá thấp. Bạn có thể cần phải tinh chỉnh lại ý tưởng ban đầu của mình để giải quyết vấn đề cấp bách hơn mà bạn mới phát hiện ra. Điều này cũng thật tuyệt. Thực tế bạn luôn được khuyến khích như thế. Sự linh hoạt và luôn suy nghĩ thông thoáng về việc điều chỉnh ý tưởng có thể được trả xứng đáng nếu như làm đúng. Và đó cũng là lý do vì sao quy trình thẩm định tinh gọn đẩy bạn đến thất bại sớm và nhanh chóng trước khi bạn bị gắn chặt với ý tưởng hay sản phẩm của mình.</p>

<p>Lưu ý rằng các tiêu chí trên cùng với trình tự của chúng, tất cả đơn giản chỉ là hướng dẫn mang tính gợi ý. Mục tiêu cuối cùng là thật tinh gọn như có thể, và bạn sẽ đứng ở vị trí tốt nhất để quyêt định ý tưởng của mình có ý nghĩa gì.</p>

<h1>Tiếp Theo Là Gì?</h1>

<p>Thậm chí nếu bạn đã thẩm định xong tất cả các vấn đề thì cũng không thể đảm bảo được rằng sản phẩm của bạn sẽ thành công. Quy trình thẩm định chỉ mới là bắt đầu thôi. Tuy nhiên nếu bạn thực hiện đầy đủ quy trình này và hoàn thành tất cả các giai đoạn, thì bạn đã có một vị thế tốt rồi đấy.</p>

<p>Mục tiêu của quy trình thẩm định tinh gọn là giảm chi phí và thời gian lập trình. Đó là cách tốt nhất để bạn luôn tập trung, để tối thiểu hóa chi phí và tối đa hóa cơ hội thành công khi sản phẩm của bạn được tung ra.</p>

<p>Nếu bạn muốn tìm hiểu thêm thông tin, bạn có thể đọc <a href="http://theleanstartup.com/">Khởi nghiệp tinh gọn</a> (The Lean Startup) của Eric Reiss. Như tên cuốn sách đã gợi ý, &ldquo;Thẩm định tinh gọn&rdquo; thực sự ảnh hưởng lớn đến cách làm việc tinh gọn.</p>

<p>Bây giờ bạn đã thẩm định, bạn đã sẵn sàng để bắt đầu suy nghĩ về việc làm thế nào để biến sản phẩm thành hiện thực. Hãy bước nhanh lên, nhưng cũng hãy cẩn trọng nhé. Thường xuyên nói chuyện với người dùng của bạn và duy trì quy trình thật tinh gọn. Chúng tôi hi vọng bạn sẽ làm được những điều lớn lao trong tương lai.</p>

<p>Chúc bạn may mắn!</p>

<p>Dịch từ: <a href="https://www.smashingmagazine.com/2016/07/a-lean-approach-to-product-validation/">A lean apprroach to product validation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 1)]]></title>
    <link href="http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1/"/>
    <updated>2016-10-26T10:50:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/26/principles.jpg" title="Nguyên tắc thiết kế" ></p>

<p>Thiết kế không đơn giản chỉ là lắp ghép, xếp theo thứ tự hay thậm chí là sửa đổi. Thiết kế chính là hàm chứa giá trị và ý nghĩa, là sự minh hoạ, đơn giản hoá, làm sáng tỏ, chỉnh sửa, tạo giá trị, kịch tính, thuyết phục và thậm chí là lôi cuốn.</p>

<h1>01. Sự rõ ràng là điều quan trọng nhất</h1>

<p>Sự rõ ràng là điều quan trọng đầu tiên và cũng là quan trọng nhất của bất kỳ một giao diện nào. Một giao diện được thiết kế hiệu quả đó là mọi người phải có thể nhận biết được nó là gì, biết được vì sao họ nên sử dụng nó, biết được giao diện giúp họ tương tác với những gì, dự đoán được điều gì sẽ xảy ra khi họ sử dụng nó và sau đó là tương tác với giao diện thành công. Một giao diện có thể có chứa sự bí ẩn hay chưa mang lại sự hài lòng cho người dùng, nhưng sẽ không có chỗ cho sự nhầm lẫn. Tính minh bạch đem đến niềm tin cho người dùng và làm người dùng muốn tiếp tục sử dụng trong tương lai. Trăm màn hình rõ ràng còn hơn một tổ hợp màn hình lộn xộn.</p>

<!-- more -->


<h1>02. Giao diện mang đến sự tương tác</h1>

<p>Giao diện mang đến sự tương tác giữa con người và thế giới của chúng ta. Giao diện có thể giúp làm sáng tỏ, mở rộng và cho phép các mối liên hệ, mang chúng ta lại với nhau, kéo chúng ta xa nhau, quản lý kỳ vọng của chúng ta, và cho chúng ta tiếp cận với các dịch vụ. Hành động thiết kế giao diện không phải là Nghệ Thuật. Bản thân giao diện không phải là những công trình bất hủ. Giao diện có vai trò riêng và hiệu quả của giao diện có thể đo đếm được. Tuy nhiên, giao diện không chỉ là các tiện ích. Các giao diện tốt nhất có thể truyền cảm hứng, phát triển và tăng cường mối quan hệ của chúng ta với thế giới.</p>

<h1>03. Giữ sự tập trung bằng mọi giá</h1>

<p>Chúng ta đang sống trong một thế giới liên tục bị sao nhãng bởi nhiều mối quan tâm khác nhau. Thật khó để đọc trong yên bình mà không có bất cứ thứ gì làm chúng ta mất tập trung, và hướng sự chú ý của ta vào những điều khác. Tập trung là điều quý giá. Đừng thiết kế ứng dụng của bạn có những yếu tố làm xao nhãng người dùng&hellip; hãy nhớ tại sao màn hình tồn tại ở nơi đầu tiên. Nếu có ai đang đọc thì hãy để họ đọc xong đã trước khi phô bày quảng cáo (nếu bạn phải đưa quảng cáo vào). Đề cao sự tập trung không chỉ độc giả của bạn sẽ hạnh phúc hơn, mà kết quả của bạn cũng sẽ sẽ tốt hơn. Khi sử dụng là mục tiêu chính, sự tập trung là điều kiện tiên quyết. Hãy giữ gìn sự tập trung bằng mọi giá.</p>

<h1>04. Giữ sự kiểm soát cho người dùng</h1>

<p>Con người cảm thấy thoải mái nhất khi họ được kiểm soát bản thân và môi trường của họ. Phần mềm thiếu đầu tư làm mất đi sự thoải mái của người dùng bằng cách bắt người dùng chú ý vào các tương tác không có kế hoạch, làm người dùng bị nhầm lẫn và mang đến kết quả bất ngờ. Giữ cho người dùng trong kiểm soát bằng cách thường xuyên hiện lên tình trạng hệ thống, bằng cách mô tả nhân quả (nếu bạn làm điều này thì điều gì sẽ xảy ra) và cho họ hiểu rõ điều gì sẽ xảy ra với mỗi sự thay đổi. Đừng lo lắng về việc diễn tả quá rõ ràng&hellip; rõ ràng gần như là không bao giờ.</p>

<h1>05. Thao tác trực tiếp là tốt nhất</h1>

<p>Giao diện tốt nhất không phải là tất cả khi chúng ta có thể trực tiếp thao tác với các vật thể trong thế giới của chúng ta. Bởi vì điều này không phải luôn luôn khả thi, và các vật thể thì ngày càng chứa đựng thông tin nên chúng ta đã tạo ra các giao diện để có thể tương tác với chúng. Thật dễ dàng để thêm nhiều lớp hơn mức cần thiết vào một giao diện như tạo ra các nút nhấn, chrome, các đồ họa, các tùy chọn, sự ưu tiên, các cửa sổ, các file đính kèm, và mã lệnh khác, để chúng ta kết thúc thực hiện thao tác với các yếu tố của giao diện người dùng thay vì những gì quan trọng. Thay vào đó, cố gắng cho mục tiêu ban đầu là sự thao tác trực tiếp&hellip; thiết kế một giao diện với một dấu chân nhỏ nhất có thể, ghi nhận cử chỉ, điệu bộ của con người nhiều nhất có thể. Theo lý tưởng, giao diện quá nhẹ đến mức người dùng có cảm giác thao tác trực tiếp với vật thể trong sự tập trung của họ.</p>

<h1>06. Một hành động chính cho mỗi màn hình</h1>

<p>Mỗi màn hình mà chúng ta thiết kế nên hỗ trợ cho một hành động duy nhất có giá trị thực sự cho người sử dụng nó. Điều này làm cho màn hình dễ tìm hiểu hơn, dễ sử dụng hơn, và dễ dàng hơn khi thêm vào hoặc phát triển khi cần thiết. Màn hình hỗ trợ hai hay nhiều hành động chính thì sẽ nhanh chóng gây
ra nhầm lẫn. Giống như một bài viết thì nên có một luận điểm rõ ràng và duy nhất, mỗi màn hình chúng ta thiết kế nên hỗ trợ cho một hành động rõ ràng và duy nhất đó là điều đúng đắn.</p>

<h1>07. Đặt những hành động phụ ở vị trí thứ yếu</h1>

<p>Những màn hình với một hành động chính duy nhất có thể có nhiều hành động phụ, nhưng chúng cần phải được giữ ở vị trí thứ yếu! Lý do bài viết của bạn tồn tại không phải là để mọi người có thể chia sẻ nó trên Twitter&hellip; nó tồn tại là để cho mọi người đọc và hiểu nó. Giữ những hành động phụ bằng cách làm cho chúng ít được nhìn thấy hơn hoặc hiển thị sau khi đã đạt được hành động chính.</p>

<h1>08. Đưa ra bước tiếp theo tự nhiên</h1>

<p>Có quá ít tương tác thì dễ dẫn đến kết thúc, vì vậy cần thiết kế bước tiếp theo cho mỗi tương tác của người dùng với giao diện của bạn một cách cẩn thận. Dự tính trước sự tương tác tiếp theo sẽ nên là gì và thiết kế để hỗ trợ nó. Giống như chúng ta mong muốn trong cuộc trò chuyện của con người với nhau, gợi mở cho sự tương tác tiếp sau đó. Đừng để một người bị treo, bị đơ vì họ đã làm những gì bạn muốn họ làm&hellip; đưa ra cho họ bước tiếp theo tự nhiên để giúp họ tiếp tục đạt được những mục tiêu tiếp theo của mình.</p>

<h1>09. Vẻ bề ngoài theo sau hành vi </h1>

<p>Con người thoải mái nhất với những điều mà hành xử theo cách chúng ta mong đợi. Những người khác, những con vật, đồ vật, phần mềm. Khi một ai đó hoặc một cái gì đó hành xử một cách nhất quán với sự mong đợi của chúng ta, chúng ta cảm thấy như chúng ta có một mối quan hệ tốt với họ. Để làm được điều này thì các thành phần được thiết kế nên trông giống như cách chúng vận hành. Hình thức theo sau chức năng. Trong thực tế điều này có nghĩa là mọi người có thể dự đoán một yếu tố giao diện sẽ vận hành như thế nào chỉ bằng cách nhìn nó. Nếu nó trông giống như một cái nút thì nó phải hoạt động như một cái nút. Đừng làm cho những điều cơ bản của sự tương tác trở nên ngộ nghĩnh&hellip; Hãy giữ sự sáng tạo của bạn cho những mối quan tâm bậc cao hơn.</p>

<p>(Mời các bạn xem tiếp <a href="http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2/">Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 2)</a>)</p>

<p>Bài dịch từ <a href="http://bokardo.com/principles-of-user-interface-design/">Principles of User Interface Design</a></p>
]]></content>
  </entry>
  
</feed>
