<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2017-02-06T02:28:20+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nguyên tắc thiết kế sản phẩm]]></title>
    <link href="http://blog.teracy.com/2017/02/05/nguyen-tac-thiet-ke-san-pham/"/>
    <updated>2017-02-05T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2017/02/05/nguyen-tac-thiet-ke-san-pham</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2017/02/05/nguyen-tac-thiet-ke-san-pham.png" title="Nguyên tắc thiết kế sản phẩm" >
&ldquo;<em>Các chi tiết không chỉ là chi tiết. Nó tạo nên thiết kế.</em>&rdquo; &ndash; Charles Eames</p>

<h1>01. Tính hữu dụng là nhiệm vụ</h1>

<p>Nếu sản phẩm của bạn không hữu dụng, nếu con người không tìm được cách sử dụng sản phẩm đó, như vậy
thiết kế của sản phẩm đã thất bại. Sản phẩm của bạn phải giúp con người tạo ra những điều có giá trị
trong cuộc sống của họ. Giá trị này thông qua việc sử dụng có thể trở nên thiết thực (Đồng hồ Timex
của tôi có thể báo thời gian), có thể là giá trị xã hội (Đồng hồ Rolex của tôi gây ấn tượng với bạn
bè tôi), hoặc giá trị về cảm xúc (đồng hồ của tôi là món quà từ vợ/chồng của tôi). Vòng đời sử dụng
của sản phẩm bao gồm khả năng biết về tính hữu dụng của sản phẩm, một trải nghiệm tốt khi lần đầu tiên
sử dụng sản phẩm, khả năng sử dụng sản phẩm và thành công theo thời gian.</p>

<!-- more -->


<h1>02. Trải nghiệm chính là sản phẩm</h1>

<p>Khi bạn có sản phẩm thì sẽ có trải nghiệm của người sử dụng sản phẩm đó. Thật dễ dàng để thấy được
sự khác biệt từ xa, nhưng đối với người sử dụng sản phẩm của bạn, các sản phẩm luôn giống nhau. Mọi
tương tác đều là vấn đề và trở thành môt phần trải nghiệm sản phẩm. iPod nguyên bản chính là một ví dụ
kinh điển: trải nghiệm của iPod bao gồm mọi thứ từ việc cầm iPod lên và cảm nhận trọng lượng của thiết
bị cho đến việc tìm kiếm nhạc với nút điều khiển hình tròn, đến việc đồng bộ với máy tính của bạn và
việc mua nhạc từ cửa hàng iTunes. Tất cả những tương tác này cùng nhau tạo nên toàn bộ trải nghiệm
sản phẩm và cuối cùng đó là những gì mà khách hàng đã mua.</p>

<h1>03. Giải quyết các vấn đề còn tồn tại</h1>

<p>Khi chúng ta nỗ lực tạo ra những sản phẩm thay đổi thế giới, chúng ta thường tạo ra một vài thứ mà
trên thế giới chưa bao giờ nhìn thấy. Nhưng việc đổi mới sản phẩm không phải là về sản phẩm mới sẽ giải
quyết vấn đề mới. Đổi mới sản phẩm là sản phẩm mới sẽ giải quyết các vấn đề đang tồn tại tốt hơn các
sản phẩm hiện nay đang làm. Lấy Google Search, Netflix và Facebook làm ví dụ. Những dịch vụ phổ biến
này đơn giản là giải quyết các vấn đề đang tồn tại tốt hơn so với chúng trước đây.</p>

<h1>04. Tìm kiếm sự đầu tư</h1>

<p>Các tính năng của sản phẩm tốt nhất là các tính năng sẽ được sử dụng. Cách thức tốt nhất để dự đoán
liệu một tính năng sẽ được sử dụng đó là đã có người đầu tư vào lĩnh  vực đó. Đã có ai đầu tư
tiền bạc, thời gian, hay công sức để giải quyết vấn đề này chưa? Đây là các chỉ số cho thấy vấn đề
đáng được giải quyết. Nếu mọi người nói họ có một vấn đề nhưng lại không đầu tư để giải quyết vấn đề
đó. Như vậy, vấn đề đó không thực sự nằm trong top danh sách ưu tiên của họ. Vì vậy hãy tìm kiếm
đầu tư hiện tại trước khi bổ sung một sản phẩm hoặc tính năng mới.</p>

<h1>05. Các tính năng mẫu của công cụ thực</h1>

<p>Một cách để bạn có thể chắc chắn có người đang đầu tư vào vấn đề đó là tìm kiếm công cụ để sử dụng. Các
công cụ là đối tượng của thế giới thực mà con người sử dụng để hoàn thành một công việc. Hãy suy nghĩ
đến những ghi chú được dính xung quanh màn hình máy tính. Các công cụ thường xuyên bị va đập, giống
như việc đặt băng dính trong lên Iphone để bảo vệ màn hình hoặc một bảng tính Excel giúp tổ chức thông
tin. Khi bạn trải qua một công cụ và coi công cụ đó như vàng và đề nghị chủ sở hữu công cụ đó nói cho
bạn biết tất cả thông tin về công cụ đó, công cụ đó trực tiếp chuyển thành các tính năng hữu ích.</p>

<h1>06. Làm cho phù hợp và hoàn thành vấn đề</h1>

<p>Chúng ta xây dựng được niềm tin với người dùng khi một vấn đề nào đó có vẻ đúng, khi các giao diện đã
được đánh bóng tới độ chính xác từng pixel, khi việc viết quảng cáo là hoàn toàn rõ ràng, khi các thương
hiệu trở nên chuyên nghiệp. Thông điệp ngầm là “những người dùng này thực sự quan tâm đến việc họ sẽ
làm gì&hellip;chỉ cần chú ý chi tiết thôi&#8221;. Khi đó họ sẽ mang thêm cơ hội thành công cho sản phẩm của chúng ta.</p>

<h1>07. Chất lượng của phát hành tạo lên kỳ vọng</h1>

<p>Việc phát hành thiết lập nên kỳ vọng. Điều này trở thành phổ biến để phát hành sản phẩm một cách nhanh
nhất có thể và sau đó lặp lại dựa trên những phản hồi từ người dùng. Điều này rất đáng khen ngợi; Không có sự
thay thế cho việc sử dụng thực tế. Nhưng dù bạn phát hành cái gì đi nữa, cũng cần đảm bảo rằng đó
là sự nỗ lực hết mình của bạn. Nếu tất cả những phát hành của bạn mới hoàn thành được 80% dù đó là
cái mà mọi người mong đợi. Mỗi lần như vậy, kỳ vọng của họ cũng sẽ giảm dần mỗi lần phát hành vì niềm
tin của họ suy yếu dần. Tuy nhiên nếu mỗi sản phẩm trong số các sản phẩm phát hành của bạn, bất kể là
sản phẩm đó nhỏ như thế nào nhưng có chất lượng cao nhất, nhưng những người sử dụng sản phẩm của bạn
sẽ biết rằng sản phẩm đó rất đáng để họ bỏ thời gian để chú ý. Thậm chí, họ còn rất háo hức mong chờ
sản phẩm đó.</p>

<h1>08. Phát hành sản phẩm càng nhỏ thì sản phẩm càng tốt</h1>

<p>Hiện tại, thật dễ dàng để xây dựng các tính năng. Công cụ phát triển đã bổ sung thêm các tính năng
nhanh hơn so với trước đây. Tuy nhiên, phạm vi tính năng luôn luôn là vấn đề cũ. Mọi tính năng mà bạn
bổ sung là bất đồng trong giao diện và là một gánh nặng bổ sung. Tuy nhiên, nếu sản phẩm của bạn thực
sự được tập trung và không cố gắng thực hiện nhiều hơn và bạn sẽ nói không đối với nhiều tính năng
hơn là bạn nói có.</p>

<h1>09. 10% cuối cùng của sản phẩm là khó làm nhất</h1>

<p>Sự khác nhau giữa một sản phẩm tốt và lý tưởng là ở 10% cuối cùng. Mọi người đều có 90% giống nhau&hellip;
các tính năng cốt lõi giống nhau, giá và cốt truyện tương tự nhau. Nhưng 10% cuối cùng là sự khác biệt
thực sự. Đây là phần để phân biệt bạn với những đối thủ cạnh tranh của bạn. Đó là máu, mồ hôi và nước
mắt để làm chi tiết sản phẩm. Và điều này có thể lấy đi 50% thời gian của bạn. Tuy nhiên, thời gian
không phải là cái mà bạn sẽ đo đếm. Bạn sẽ đo đếm sự khác biệt giữa tốt và lý tưởng.</p>

<h1>10. Biết rõ đối thủ cạnh tranh của bạn là ai</h1>

<p>Email và Excel là 2 đối thủ phần mềm lớn nhất của nhau từ trước đến giờ: mọi người sử dụng hai phần
mềm này để làm mọi thứ. Chúng tôi chưa nghĩ về việc coi hai phần mềm này là đối thủ cạnh tranh vì
chúng không cạnh tranh trực tiếp để thay thế. Thật dễ dàng để làm theo các phân tích đặc điểm của
sản phẩm tạo ra trong mỗi ngành công nghiệp. Nhưng các đặc điểm này hiếm khi bao quát đầy đủ lĩnh
vực cạnh tranh. Do đó tìm kiếm các đối thủ cạnh tranh gián tiếp thường nguy hiểm như việc tìm các
đối thủ cạnh tranh trực tiếp. Ví dụ, điện thoại có máy ảnh là một đối thủ cạnh tranh gián tiếp nhưng
là đối thủ “chết người” với máy ảnh kỹ thuật số và máy quay video cầm tay. Bạn cần phải biết ai là
đối thủ cạnh tranh trực tiếp và gián tiếp của bạn để tạo ra sự đổi mới thực sự của sản phẩm.</p>

<h1>11. Sử dụng thực tế và mong muốn</h1>

<p>Thường xuyên có sự khác nhau giữa việc bạn muốn mọi người sử dụng sản phẩm của bạn để làm gì và thực
tế nó được sử dụng để làm gì. Đừng lầm lẫn giữa hai việc này. Hãy trung thực về cách mọi người sử dụng
sản phẩm của bạn. Trong một vài trường hợp, sản phẩm sẽ không phải là cái bạn dự định làm. Đây là
điều đáng lưu ý. Mặt khác, người sử dụng sản phẩm không đúng cách vì họ không học sử dụng đúng cách
và cần đến sự trợ giúp. Kịch bản tệ nhất là khi mọi người đang sử dụng một sản phẩm không đúng cách mà
lại không có sự trợ giúp của bạn &ndash; một nhà thiết kế hiểu biết.</p>

<h1>12. Giá trị cá nhân đi trước giá trị xã hội</h1>

<p>Thật dễ dàng để mong chờ giá trị xã hội của phần mềm. Ooh, nếu chúng ta xây dựng đúng giá trị thì khi
đó mọi người sẽ chia sẻ với bạn bè của họ! Tuy nhiên mọi người hiếm khi sử dụng phần mềm chỉ đơn thuần
vì nó mang tính xã hội. Họ sử dụng phần mềm vì phần mềm đó trước hết cung cấp một vài giá trị cá nhân
mà họ có thể sử dụng chúng mà không cần sự tham gia của người khác. (Điều này có thể bao gồm những
giá trị khác nhưng hành động chia sẻ thường chỉ đứng ở vị trí thứ hai).</p>

<h1>13. Người sử dụng không phải là nhà thiết kế sản phẩm</h1>

<p>Người sử dụng luôn có những ý kiến bất tận về sản phẩm của bạn, nhưng họ không phải là nhà thiết kế.
Bạn mới là người thiết kế. “Khi mọi người nói với bạn cái gì sai hoặc không hoạt động với họ, hầu như
họ luôn luôn đúng. Khi họ nói với bạn một cách chính xác những gì họ nghĩ
là sai và làm thế nào để giải quyết chúng, họ hầu như luôn luôn sai.” Câu trích dẫn này của Neil
Gaiman là đúng về những người rất có ý thức nhận biết một vấn đề tồn tại nhưng không biết cách giải
quyết vấn đề đó (nếu họ biết cách giải quyết vấn đề, họ đã không có vấn đề gì!) Vì vậy, đừng vội bỏ
qua vấn đề một cách nhanh chóng, hãy chắc chắn rằng bạn đã đào sâu hơn để hiểu vấn đề một cách cơ bản,
điều này có vẻ như không liên quan. Một nhà thiết kế mù quáng đi theo ý tưởng của những người sử dụng
sẽ nhanh chóng mất đi khả năng tự báo cáo một cách chính xác. Đừng khó chịu với người dùng về vấn đề này.
Đây là bản chất của người sử dụng.</p>

<h1>14. Hành vi mà bạn đã nhìn thấy là hành vi để bạn thiết kế</h1>

<p>Bất kể bạn lên kế hoạch như thế nào, mọi người thường cư xử theo các cách thức không thể dự kiến trước.
Đừng bỏ qua hành vi, chấp nhận hành vi mà bạn nhìn thấy là hành vi để bạn thiết kế dù điều đó là cố ý
hay không. Nếu có một vài thứ mà bạn không thể lên kế hoạch, việc đương nhiên mà bạn cần làm là tập
trung hơn vào những tương tác cốt lõi, làm cho các tương tác càng chặt chẽ càng tốt để tập trung vào
các nỗ lực của người sử dụng.</p>

<h1>15. Sản phẩm lý tưởng được tập trung vào một vấn đề duy nhất</h1>

<p>Thông thường mọi người thường sáng tạo sản phẩm với hy vọng hấp dẫn tất cả mọi người. Nhưng sản phẩm
tốt nhất là sản phẩm hấp dẫn theo cách đặc biệt cho những người đang cố gắng làm một điều gì đó đặc
biệt… họ là chuyên gia trong một vấn đề cụ thể. Đó là trực giác ngược lại để tập trung vào thị trường
nhỏ nhưng hành trình đến thị trường lớn sẽ bắt đầu từ đây.</p>

<h1>16. Sản phẩm đột phá giống như đồ chơi</h1>

<p>Các sản phẩm đột phá thường bắt đầu trông giống như một món đồ chơi. Các sản phẩm không có vẻ nhiều,
nhưng cái mà các sản phẩm có là một ngưỡng nhiều hữu dụng hơn theo cách nào đó so với những sản phẩm
hiện tại. Có thể các sản phẩm rẻ hơn, dễ sử dụng hơn hoặc có tính chất cộng tác hơn. Điều này có vẻ
không có sự đánh bóng hay sự trưởng thành hoặc cơ sở khách hàng lớn hơn và
vì vậy sản phẩm xuất hiện giống một món đồ chơi. Và khía cạnh khiêm tốn này chính xác là lý do tại
sao thường quá muộn khi người thiết kế nhận ra rằng sản phẩm này được mọi người quan tâm.</p>

<h1>17. Việc định vị sản phẩm là rất quan trọng</h1>

<p>Cách mọi người nghĩ về sản phẩm của bạn là vô cùng quan trọng để họ chấp nhận và sử dụng sản phẩm.
Cách mà bạn định vị sản phẩm của mình, cách mà bạn nói về sản phẩm, mô tả sản phẩm, so sánh sản phẩm
đó với các sản phẩm khác, cho mọi người một khuôn khổ để hiểu về sản phẩm và làm thế nào có thể sử
dụng chúng. Bạn có thể định vị sản phẩm như là một mục sản phẩm mới hoặc như một sự cải tiến trong
các hạng mục hiện có. Điều này thường tạo cảm giác định vị sản phẩm dựa trên hạng mục hiện có… mọi
người thường tìm hiểu bằng cách so sánh với các sản phẩm khác mà họ  đã biết.</p>

<h1>18. Sản phẩm phù hợp với thị trường là khi mọi người bán hàng hộ bạn</h1>

<p>Sản phẩm phù hợp với thị trường (Product market fit) là một thuật ngữ vui, nhưng ở đây chính là cách
thức cụ thể để nghĩ về
sản phẩm. Khi mọi người hiểu và sử dụng sản phẩm của bạn đủ để họ công nhận giá trị của nó đã là một
thắng lợi lớn. Nhưng khi họ bắt đầu chia sẻ các trải nghiệm tích cực của họ với những người khác,
khi bạn có thể tái tạo trải nghiệm đó với người sử dụng mới đã được nghe những trải nghiệm từ những
người dùng hiện tại, như vậy bạn đã có được sản phẩm phù hợp với thị trường. Và
khi điều này xảy ra thì một số điều kì diệu cũng xảy ra. Điều bất ngờ đó là khách hàng của bạn sẽ trở thành
người bán hàng cho bạn.</p>

<p>Dịch từ: <a href="http://bokardo.com/principles-of-product-design/">Principles of Product Design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tư duy thiết kế: Cẩm nang cho sự đổi mới (Phần 2)]]></title>
    <link href="http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2/"/>
    <updated>2017-01-04T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/tu-duy-thiet-ke.jpeg" title="Tư duy thiết kế" ></p>

<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1/">Phần 1</a></p>

<h1>Giai đoạn ba: Tạo ra ý tưởng</h1>

<p>Sau khi xây dựng sự đồng cảm và tái xác định những thách thức, vấn đề hoặc nhu cầu, đã đến lúc chúng ta cần tư duy hành động.</p>

<p>Theo quan điểm của tôi, tạo ra ý tưởng là phần tốt nhất của quá trình này vì nó thú vị và hấp dẫn.
Giai đoạn tạo ra ý tưởng có hai phần rõ ràng:</p>

<p><strong>1. Phân kỳ (Tạo Lựa chọn)</strong></p>

<p>Nhóm cùng nghiên cứu đa ngành là những người xây dựng sự đồng cảm và tái định nghĩa vấn đề, cả nhóm tập hợp lại vào thời gian đã xác định trước để &ldquo;tuôn&rdquo; ra những ý tưởng mà không đưa ra phán xét gì về những ý tưởng đó. Tại sao lại vậy? Bởi vì khi tập trung vào số lượng và áp dụng giải pháp chưa xác định để tìm kiếm sự đổi mới thực sự. Để thực hiện điều này, hãy làm theo các quy tắc của kỹ thuật động não:</p>

<!-- more -->


<ul>
<li><p>Trì hoãn đánh giá</p></li>
<li><p>Lựa chọn số lượng</p></li>
<li><p>Một cuộc trò chuyện tại một thời điểm</p></li>
<li><p>Nhìn trực quan</p></li>
<li><p>Xây dựng trên đầu trang của những ý tưởng khác (&ldquo;Có, và &hellip;&rdquo;)</p></li>
<li><p>Bám sát chủ đề</p></li>
<li><p>Khuyến khích những ý tưởng điên rồ</p></li>
</ul>


<p>Trong tất cả các phiên Tư duy thiết kế tôi đã trải qua, các đội đã có thể nảy ra hơn 100 ý tưởng chỉ trong một giờ.</p>

<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/phien-dong-nao.jpeg" title="phiên động não" ></p>

<p><em>Kỹ thuật động não (phân kỳ) trong quá trình đào tạo Tư duy Thiết kế tại Brazil</em></p>

<p><strong>2. Hội tụ (Hãy lựa chọn)</strong></p>

<p>Trong hàng nghìn ý tưởng để lựa chọn, các đội sẽ chọn ra ý tưởng mà họ sẽ thực hiện. Kỹ thuật tốt là bỏ phiếu bằng hình dán: mỗi thành viên trong nhóm nhận được một tập các nhãn dán và từng cá nhân mỗi thành viên trong nhóm đánh dấu các ý tưởng mà họ muốn thực hiện. Sau khi quá trình này hoàn tất, sẽ dễ dàng để lựa chọn các ý tưởng một cách dân chủ.</p>

<p>Điều quan trọng là phải có hai giai đoạn rõ ràng và riêng biệt: 1 giờ cho kỹ thuật động não (phân kỳ) và 1 giờ để quyết định lựa chọn (hội tụ).</p>

<h1>Giai đoạn bốn: Nguyên mẫu</h1>

<p>Hãy xây dựng để suy nghĩ và cảm nhận. Một nguyên mẫu biến một ý tưởng thành một cái gì đó hữu hình và &ldquo;có thể thử nghiệm được&rdquo;.</p>

<p>&ldquo;Một nguyên mẫu đáng giá hàng ngàn cuộc họp&rdquo;, câu nói được phát biểu ở IDEO.</p>

<p>Có ba phần trong giai đoạn này:</p>

<ol>
<li><p>Cảm hứng   &ndash;   &ldquo;Nó có thể là gì?&rdquo;</p></li>
<li><p>Tiến triển   &ndash;   &ldquo;Nó sẽ trở thành gì?&rdquo;</p></li>
<li><p>Phê chuẩn   &ndash;   &ldquo;Nó sẽ là gì?&rdquo;</p></li>
</ol>


<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/nguyen-mau.jpeg" title="Nguyên mẫu" ></p>

<p>Nguyên mẫu là một công cụ tuyệt vời để giúp bạn xác định thành công hay thất bại, học hỏi nhanh chóng. Cái giá phải trả khi thất bại sớm (trong giai đoạn đầu của dự án) sẽ rẻ hơn nhiều so với sau này, sau khi rất nhiều nguồn lực được phân bổ và thực hiện các nhiệm vụ. Chúng tôi xây dựng nguyên mẫu để tìm hiểu, giải quyết những ý tưởng mâu thuẫn nhau, bắt đầu cuộc hội thoại và quản lý quá trình xây dựng.</p>

<p>Sự cuốn chiếu, biểu tượng, lớp, thư viện, là một số ví dụ về các nguyên mẫu, chúng tôi đã tạo ra để kiểm tra, xác nhận và học hỏi nhanh.</p>

<p><img class="center" src="http://blog.teracy.com/images/2017/01/04/nguyen-mau-ban-dau-cho-cong-cu-Repeat-Grid.gif" title="Nguyên mẫu ban đầu cho công cụ Repeat Grid" ></p>

<p><em>Một nguyên mẫu ban đầu cho các công cụ Lặp lại lưới</em></p>

<h1>Giai đoạn Năm: Thử nghiệm</h1>

<p>Khi nguyên mẫu được tạo ra, cần thử nghiệm chúng với những con người thật. Chúng ta thử nghiệm để tinh chỉnh các nguyên mẫu và các giải pháp, để tìm hiểu thêm về người sử dụng, và để thử nghiệm và tinh chỉnh POV của chúng ta.</p>

<p>Khi thử nghiệm, cho phép người dùng thử nghiệm với nguyên mẫu của bạn, hãy quan sát và lắng nghe. Nếu có thể dễ dàng thực hiện những điều chỉnh nhỏ thì hãy làm và kiểm thử lại. Hãy luôn tiếp cận người dùng của bạn và quan trọng nhất là không bao giờ quá trung thành với những ý tưởng của bạn.</p>

<p>Một ví dụ tốt với Adobe XD là những câu chuyện xung quanh các lớp (layers). Ban đầu, chúng tôi giả định rằng chúng tôi có thể cung cấp một mô hình tinh thần mới, mà không có sự xuất hiện của các lớp. Một số người yêu thích điều này và một số thì lại ghét. Điều thú vị là, sau khi chúng tôi vận chuyển XD không có lớp, cuối cùng một số người bắt đầu nhận ra họ không cần lớp. Nhưng sau nhiều cuộc điều tra và thử nghiệm với cộng đồng và khách hàng, chúng tôi kết luận rằng lớp có thể giúp, đặc biệt là để xuất ra, các biểu tượng và truy cập vào các đối tượng trong các tổ hợp phức tạp.</p>

<p>Kết quả là, chúng tôi sẽ vận chuyển lớp trong Adobe XD sau này trong năm 2016. Và chúng tôi nghĩ rằng chúng tôi đã làm cho sản phẩm thông minh hơn bằng cách tuân theo một khái niệm mà chúng tôi gọi là &ldquo;Các lớp địa phương&rdquo;. Nhưng vào cuối ngày, khách hàng sẽ cho chúng tôi biết liệu chúng tôi đã làm đúng hay không, và chúng tôi sẽ học hỏi, lặp lại và xoay quanh vấn đề.</p>

<p>Phương pháp phân tích cũng có tác dụng   &ndash;   chúng cung cấp cho bạn CÁI GÌ, chứ không phải là TẠI SAO. Chúng rất hữu ích để xác nhận phương pháp tiếp cận khác nhau. Chúng tôi có một nhóm rất tài năng làm phân tích cho Adobe XD, nhưng thay vì chỉ thu thập các con số, họ luôn luôn bắt đầu với một câu hỏi, ví dụ:  &ldquo;Có ai đang thành công với chế độ thiết kế (Design Mode) không? Sự thành công chính là khi khách hàng sử dụng các công cụ lưới lặp lại với hình ảnh lấy từ Công cụ tìm kiếm &rdquo;.  Sau khi nhìn vào các con số, nếu người dùng không thành công, chúng tôi thay đổi quá trình đang làm, hoặc chính các công cụ, và kiểm tra lại. Luôn luôn cố gắng trả lời các câu hỏi ban đầu.</p>

<p>Dựa vào phân tích, nghiên cứu định lượng và thử nghiệm, chúng tôi chạy một chương trình riêng phát hành trước với khoảng 800 nhà thiết kế. Đối với nghiên cứu định tính và thử nghiệm, bên cạnh các cuộc họp khách hàng, chúng tôi có một Hội đồng Tư vấn khách hàng (CAB), với 38 nhà thiết kế từ các công ty như Google, Facebook, Airbnb, IDEO, Citi, NFL, EFM, LinkedIn, và tất nhiên, một vài người dùng đặc biệt, chẳng hạn như sinh viên, các nhà phát triển plugin và các nhà thiết kế từ cơ quan nhỏ. Chúng tôi tương tác với các thành viên CAB liên tục qua Slack và  thường xuyên liên lạc, thử nghiệm nguyên mẫu từ rất sớm và thu thập thông tin phản hồi trực tiếp.</p>

<p>Tại mỗi vòng lặp, khi kiểm thử hoàn tất, thì hãy quay lại một trong các giai đoạn trước và tiếp tục lặp lại, mỗi giai đoạn thực hiện tại một thời điểm.</p>

<p>Và đừng bao giờ quên: tin tưởng quá trình và tận hưởng niềm vui!</p>

<h1>Kết luận</h1>

<p>Tư duy Thiết kế là một phương pháp hoặc quy trình bắt đầu với một thách thức thiết kế, chuyển sang giai đoạn đồng cảm (phỏng vấn, quan sát hay trải nghiệm), sau đó đến định nghĩa (hay tái định nghĩa) vấn đề hoặc thách thức, nắm bắt các ý tưởng sáng tạo (phân kỳ đầu tiên và hội tụ sau ), sử dụng nguyên mẫu (xây dựng để suy nghĩ và học hỏi nhanh) và tiếp tục với thử nghiệm.</p>

<p>Đối với Adobe XD, chúng tôi tin rằng nếu chúng tôi tiếp tục lắng nghe, tư duy, sáng tạo, phê chuẩn, học tập, và luôn luôn cởi mở và minh bạch thì chúng tôi sẽ kết thúc với đúng tổng số lượng giá trị khách hàng (customer value) và chúng tôi sẽ tạo ra một giải pháp mà các nhà thiết kế yêu thích.</p>

<p>(HẾT!)</p>

<p>Dịch từ: <a href="https://medium.com/@demianborba/design-thinking-a-manual-for-innovation-e0576b34eff6#.9ae4fd5dk">Design thinking: A manual for innovation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev - the only truly universal productive development platform with Docker on macOS, Linux and Windows]]></title>
    <link href="http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/"/>
    <updated>2016-12-20T11:13:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows</id>
    <content type="html"><![CDATA[<p>Docker is great to work with, it solves a lot of problems on development, distribution, and production
deployment.</p>

<p>Why Docker?  You can find the answer here:</p>

<ul>
<li><a href="http://thenewstack.io/why-did-docker-catch-on-quickly-and-why-is-it-so-interesting/">http://thenewstack.io/why-did-docker-catch-on-quickly-and-why-is-it-so-interesting/</a></li>
<li><a href="http://thenewstack.io/hypervisors-container-era/">http://thenewstack.io/hypervisors-container-era/</a></li>
<li><a href="https://blog.codeship.com/why-docker/">https://blog.codeship.com/why-docker/</a></li>
</ul>


<p>Docker works great on Linux, however, it&rsquo;s very challenging to make it work universal and consistent on
Mac and Windows. There are lots of efforts to solve this problem, from Docker themselves and from
Docker community, too. However, we haven&rsquo;t achieved that stage yet (until <code>teracy-dev</code>).</p>

<!-- more -->


<p>These are some of the problems that Docker community has to deal with on Mac and Windows:</p>

<ul>
<li><p>No consistent universal development environment and workflow on Linux, Windows, Mac. This is a very
important factor for team collaboration so that anyone from any OS platforms could collaborate and help
each other with no differences in the development environment.</p></li>
<li><p>Mounted volumes on VirtualBox use vboxsf, which is extremely slow. This is true for Boot2Docker and
Vagrant default file sync mechanism on Virtualbox.</p></li>
<li><p>Native Docker applications offered by Docker:</p>

<ul>
<li>Slow on Mac: <a href="https://github.com/docker/for-mac/issues/77">https://github.com/docker/for-mac/issues/77</a></li>
<li>Only recent latest versions of Window 10 (&ldquo;Build 10586 or later&rdquo;) are supported</li>
<li>Slow on Windows: <a href="https://github.com/docker/for-win/issues/188">https://github.com/docker/for-win/issues/188</a></li>
</ul>
</li>
<li><p>File watching is broken on VirtualBox since vboxsf does not trigger the inotify file watching
mechanism. <code>nodemon</code>, hello?</p></li>
</ul>


<p>There are a lot of Docker community projects trying to solve those problems:</p>

<ul>
<li><a href="https://github.com/brikis98/docker-osx-dev">https://github.com/brikis98/docker-osx-dev</a></li>
<li><a href="https://github.com/blinkreaction/boot2docker-vagrant">https://github.com/blinkreaction/boot2docker-vagrant</a></li>
<li><a href="https://github.com/codekitchen/dinghy">https://github.com/codekitchen/dinghy</a></li>
<li><a href="https://github.com/leighmcculloch/docker-unison">https://github.com/leighmcculloch/docker-unison</a></li>
<li><a href="https://github.com/gansbrest/hodor">https://github.com/gansbrest/hodor</a></li>
<li><a href="https://github.com/adlogix/docker-machine-nfs">https://github.com/adlogix/docker-machine-nfs</a></li>
<li>others&hellip;</li>
</ul>


<p>However, those existing projects do not really resolve all the problems or do not reflect
our vision for a productive development platform.</p>

<p>You can check out our <a href="http://blog.teracy.com/2016/08/19/teracy-dev-vision/">vision for teracy-dev</a> for such the
productive development platform.</p>

<p>That is the reason why we created <code>teracy-dev</code>. We&rsquo;ve been using and loving it for more than 3 years
and counting.</p>

<p><code>teracy-dev</code> reflects our vision for a truly universal productive development platform that anyone can
use to develop software easily. It&rsquo;s very easy to customize any OS that you can use
for your VM. It brings development and production environment closer and closer.</p>

<p>It is very important for a distributed team like us to work with everyone from different teams all
over the world on different projects with different stacks and <code>teracy-dev</code> helps us a lot.</p>

<p>Moreover, <code>teracy-dev</code> is not tightly coupled with anything, you&rsquo;re free to choose anything to build
up your development VM machine. You can choose different OS platforms, choose different software packages to
be automatically installed with the help of different configuration management tools. It&rsquo;s up
to you to choose anything other than default settings.</p>

<p>With default settings, <code>teracy-dev</code> chooses Ubuntu as the base OS with <code>docker</code> and <code>docker-compose</code>
installed to start developing software with Docker right away after <code>$ vagrant up</code>.</p>

<p>teracy-dev v0.5.0 is leveraging Docker for development as we believe in the future of containers
and Docker.</p>

<p>Let&rsquo;s have some comparisons between <code>teracy-dev</code> and other solutions:</p>

<table>
<thead>
<tr>
<th>   Criteria                         </th>
<th> teracy-dev </th>
<th> docker-osx-dev </th>
<th> Docker Toolbox </th>
<th> Docker native app</th>
</tr>
</thead>
<tbody>
<tr>
<td>same workflow on Linux, Mac, Windows</td>
<td>    ✅      </td>
<td>       ❌       </td>
<td>     ❌        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>native speed on mounted volumes     </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ❌        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>2-way file sync                     </td>
<td>    ✅      </td>
<td>       ❌       </td>
<td>     ✅        </td>
<td>       ✅          </td>
</tr>
<tr>
<td>file watching (inotify)             </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ❌        </td>
<td>       ✅          </td>
</tr>
<tr>
<td>open source                         </td>
<td>    ✅      </td>
<td>       ✅       </td>
<td>     ✅        </td>
<td>       ❌          </td>
</tr>
<tr>
<td>customization                       </td>
<td>    ✅      </td>
<td>       🚫       </td>
<td>     🚫        </td>
<td>       ❌          </td>
</tr>
</tbody>
</table>


<p>✅: fully support</p>

<p>❌: no or partial support</p>

<p>🚫: can be achieved but not encouraged</p>

<p>Let me explain the criteria:</p>

<ul>
<li><p>&ldquo;same workflow on Linux, Mac, Windows&rdquo;: the usage should be the same on Mac, Linux, Windows.
Docker native app only supports >= Windows 10, that&rsquo;s why it&rsquo;s marked as ❌.</p></li>
<li><p>&ldquo;native speed on mounted volumes&rdquo;: the speed should be as fast and native as on Linux</p></li>
<li><p>&ldquo;2-way file sync&rdquo;: for syncing back and forth on mounted volumes, this is mandatory for development</p></li>
<li><p>&ldquo;file watching (inotify)&rdquo;: for auto reload when files change</p></li>
<li><p>&ldquo;customization&rdquo;: you have full control and are encouraged to change anything that you want to
suit your need, no hidden stuff, no lock-in and can still upgrade seamlessly.</p></li>
</ul>


<p>Let&rsquo;s see what the same workflow means when developing a simple hello world <code>nodejs</code> application
from scratch with teracy-dev by watching the following videos:</p>

<p>On Linux (Ubuntu):</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/ze8p9imprgk" frameborder="0" allowfullscreen></iframe>


<p>On Windows:</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/2200zvxIdAs" frameborder="0" allowfullscreen></iframe>


<p>On macOS:</p>

<iframe width="100%" height="630" src="https://www.youtube.com/embed/XF-FQQKG8PA" frameborder="0" allowfullscreen></iframe>


<p>They all contain the same steps, that&rsquo;s the meaning of the &ldquo;same workflow&rdquo;.</p>

<p><code>teracy-dev</code> is not perfect, though. There are some improvements that we&rsquo;d like to address.</p>

<p>The first thing we&rsquo;d like to improve is to reduce the setup time. It takes time (around 20-30 mins)
to download the vagrant box (Ubuntu 16.04) for the first time. This is for the first time only, however.
After the first time, you can destroy and provision the same VM within some minutes. We could use
some other smaller boxes (for example, boot2docker base box) but we&rsquo;d like to stick to the most popular
Linux OS that is widely used in production. We try to make development and production environment as
close as possible. This is by default, you can choose different base boxes as you wish.</p>

<p><code>teracy-dev</code> v0.5.0 is under preview stage, we need to add more documentation and get more community
feedback.</p>

<p><code>teracy-dev</code> is created to give back to open source community as we learn and get a lot from our amazing
open source community.</p>

<p>And we need you, please try and let us know your feedback and we&rsquo;ll together fix any problems.</p>

<p>You should get started with <code>teracy-dev</code> here: <a href="http://dev.teracy.org/docs/develop/getting_started.html">http://dev.teracy.org/docs/develop/getting_started.html</a></p>

<p>In summary, <code>teracy-dev</code> brings <code>Docker</code> closer to <code>Vagrant</code> = love.</p>

<p>Thank you and happy hacking with <a href="https://github.com/teracyhq/dev">teracy-dev</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nhà thiết kế không nên viết code. Họ nên nghiên cứu về nghiệp vụ.]]></title>
    <link href="http://blog.teracy.com/2016/12/09/nha-thiet-ke-khong-nen-viet-code-ho-nen-nghien-cuu-ve-nghiep-vu/"/>
    <updated>2016-12-09T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/09/nha-thiet-ke-khong-nen-viet-code-ho-nen-nghien-cuu-ve-nghiep-vu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/12/09/designer-should-not-code.jpg" title="các nhà thiết kế không nên viết code, nên tập trung nghiên cứu nghiệp vụ" ></p>

<p>Ngày nay càng ngày càng có nhiều công ty tìm kiếm các lãnh đạo thiết kế giỏi. Họ được biết rằng công ty của họ cần tập trung nhiều hơn vào tư duy thiết kế và quan tâm đến việc áp dụng các nguyên tắc thiết kế tập trung hơn nữa. Tuy nhiên, khi những công ty này nói chuyện với các nhà thiết kế, họ nghe về các kỹ năng &ndash; về sự nhất quán thương hiệu, và thiết kế bóng bảy, những người thiết kế có thể viết code, hướng dẫn phong cách, tạo mẫu và thử nghiệm &ndash; là công việc của người thiết kế.</p>

<p>Tất cả những điều này đều rất tốt &ndash; thậm chí là bắt buộc. Nhưng với chúng ta, để hiểu một cách đúng đắn, cách tốt nhất để xây dựng doanh nghiệp là chúng ta phải tập trung vào cái làm cho doanh nghiệp thành công. Nói chung, trước tiên chúng ta phải hiểu nghiệp vụ đã. Sau đó, chúng ta sẽ hiểu hơn công việc ở đâu là quan trọng (và cần thực thi ở đâu).</p>

<!-- more -->


<p>Thay vì xem các nhà thiết kế là những người cần phải có thì hãy giải thích mục tiêu nghiệp vụ quan trọng với họ theo những cách cơ bản nhất. Tôi nghĩ những gợi ý của chúng ta về thiết kế sẽ có trọng lượng hơn nếu chúng ta có thể có những cuộc trao đổi sâu sắc, và sẽ có thể đưa ra những gợi ý đáng giá về các nguyên tắc nghiệp vụ cốt lõi.</p>

<h1>Hiện tại chúng ta đang ở đâu</h1>

<p>Có rất nhiều nhà thiết kế đã bắt đầu suy nghĩ nghiêm túc về việc quyết định của họ ảnh hưởng đến công ty ra sao. Nói chung, sự tập trung của chúng ta vào phân tích và nghiên cứu người dùng cũng đã giúp rất nhiều trong việc mang đến niềm tin lớn hơn cho tiếng nói của người thiết kế. Chúng ta cũng đã thấy nhiều ví dụ tuyệt vời của các công ty hàng đầu về thiết kế và các nhà thiết kế ảnh hưởng đến cốt lõi của các doanh nghiệp lớn như Airbnb, Pocket, Facebook, Google, Slack, và vô số công ty khác nữa.</p>

<p>Tôi cho rằng những công ty này thành công như hiện nay bởi vì họ có những người thiết kế tập trung vào nghiệp vụ mà công ty cần hơn là tập trung vào việc mỗi điểm ảnh sẽ trông hoàn hảo như thế nào.</p>

<h1>Chuyển đổi sự tập trung của chúng ta</h1>

<p>Vậy chúng ta nên bắt đầu tư duy về việc ảnh hưởng của thiết kế tới kinh doanh như thế nào?</p>

<p>Có thể là nên ra ngoài và học quản trị kinh doanh (MBA). (Tất cả những nhà thiết kế mà tôi biết đều đã làm điều này và đang tích cực đóng góp vào giá trị cốt lõi của doanh nghiệp). Nhưng thậm chí có thể làm những điều đơn giản hơn. Có thể là nói chuyện với đội kinh doanh để tìm hiểu tình hình thị trường. Có thể là nói chuyện với đội vận chuyển và thực hiện để hiểu tại sao các đơn hàng thường bị chậm một ngày. Có thể đọc qua việc lên kế hoạch cho quý 1 và tìm ra những sáng kiến quan trọng cho những quý không có gì làm ngoài việc tái cấu trúc file css. Có thể cần phải tham gia một lớp học buổi tối về kinh tế. Hay có lẽ chỉ cần dành thời gian buổi tối để tìm kiếm trên google về cách gây quỹ và cách bảng giá trị vốn hoá (Cap table) hoạt động như thế nào thay vì làm thế nào để sử dụng các plugin phác họa mới nhất.</p>

<p>Có thể chúng ta nên dành thời gian để tìm hiểu về các nguyên tắc kinh doanh &ndash; làm thế nào để lựa chọn mô hình kinh doanh, làm thế nào để quản lý nhóm, làm thế nào để tiến hành phân tích cạnh tranh, làm thế nào để thực hiện dự án&hellip;</p>

<p>Có thể chúng ta nên cố gắng tìm hiểu những vấn đề mà CEO hay VP gặp phải và cố gắng sử dụng thiết kế để giúp họ giải quyết vấn đề của họ? Có lẽ chúng ta nên cố gắng tìm ra những vấn đề làm họ thức dậy vào ban đêm và giúp họ giải quyết vấn đề đó &ndash; thay vì giải quyết vấn đề của chúng ta.</p>

<h1>Tương lai</h1>

<p>Tôi muốn nói rằng chúng ta không nên chuyển giao những trải nghiệm thiết kế nghèo nàn. Chúng ta phải tiếp tục phát triển và tập trung vào tay nghề của mình. Nếu chúng ta không làm vậy thì chúng ta sẽ bị thụt lùi. Nhưng cũng hãy bắt đầu hiểu doanh nghiệp chúng ta đang làm việc và chúng cần gì để phát triển. Nếu chúng ta có thể làm điều đó, chúng ta sẽ tiếp tục đạt được nhiều ảnh hưởng hơn và sẽ tiếp tục tạo ra những sản phẩm có sự ảnh hưởng lớn hơn &ndash; cho cả công ty của chúng ta và cho cả những người dùng sản phẩm.</p>

<p>Dịch từ: <a href="https://medium.com/@joshuantaylor/designers-shouldn-t-code-they-should-study-business-dc3e7e203d39#.cp5ipre7v">Desiger shouldn&rsquo;t code. They should study business</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 2)]]></title>
    <link href="http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2/"/>
    <updated>2016-12-06T10:50:00+00:00</updated>
    <id>http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/26/principles.jpg" title="Nguyên tắc thiết kế" ></p>

<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1/">Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 1)</a></p>

<h1>10. Vấn đề nhất quán</h1>

<p>Tiếp theo nguyên tắc trên, các yếu tố của màn hình không nên xuất hiện nhất quán với nhau, trừ khi chúng vận hành giống nhau. Những yếu tố có hành vi giống nhau thì nên trông giống nhau. Tuy nhiên điều này cũng quan trọng đối với thành phần khác nhau thì xuất hiện khác nhau. Khi nỗ lực để  làm cho nhất quán, các nhà thiết kế học việc thường làm mờ đi sự khác nhau quan trọng bằng cách sử dụng biện pháp trực quan giống nhau (thường là để sử dụng lại mã nguồn) trong khi  việc sử dụng các biện pháp trực quan khác nhau thì phù hợp hơn.</p>

<!-- more -->


<h1>11. Những phân cấp trực quan mạnh hoạt động tốt nhất</h1>

<p>Một hệ thống phân cấp trực quan mạnh được thực hiện khi có thứ tự xem rõ ràng các yếu tố trực quan trên màn hình. Đó là khi người sử dụng xem các mặt hàng giống nhau theo thứ tự giống nhau trong mỗi lần xem. Phân cấp trực quan yếu cung cấp ít manh mối về nơi để người dùng nên nhìn vào và cuối cùng là cảm giác lộn xộn và khó hiểu. Trong môi trường đầy biến động, rất khó để duy trì một hệ thống phân cấp trực quan mạnh bởi vì trọng lượng hình ảnh là tương đối: khi tất cả mọi thứ màu đậm thì sẽ không có gì là nổi bật nữa. Nếu một yếu tố trực quan nặng đơn lẻ được thêm vào một màn hình, người thiết kế có thể cần phải thiết lập lại các trọng lượng hình ảnh của tất cả các yếu tố để đạt được hệ thống phân cấp mạnh một lần nữa. Hầu hết mọi người không chú ý đến hệ thống phân cấp trực quan nhưng nó là một trong những cách dễ nhất để củng cố (hoặc làm suy yếu) một thiết kế.</p>

<h1>12. Sự tổ chức thông minh làm giảm tải trọng nhận thức (Cognitive load)</h1>

<p><em>“Cognitive load mô tả gánh nặng của con người về trí nhớ ngắn hạn khi phải làm các nhiệm vụ phức tạp.”</em></p>

<p>Như John Maeda đã nói trong cuốn sách Simplicity (Sự đơn giản) của ông, sự tổ chức các yếu tố màn hình một cách thông minh có thể làm cho những thứ số nhiều xuất hiện như là số ít. Điều này giúp mọi người hiểu giao diện của bạn dễ dàng hơn và nhanh hơn, bởi vì bạn đã mô tả các mối quan hệ vốn có của nội dung trong thiết kế của bạn. Nhóm tập hợp lại với nhau như là các yếu tố, thể hiện mối quan hệ tự nhiên qua vị trí và sự định hướng. Bằng việc tổ chức một cách thông minh, bạn sẽ làm cho nội dung ít tải trọng nhận thức (Cognitive load) hơn đối với người sử dụng&hellip; những người mà không phải suy nghĩ về việc các yếu tố có liên quan như thế nào bởi vì bạn đã làm điều đó cho họ. Đừng buộc người sử dụng phải tìm những điều này&hellip; mà hãy cho họ thấy bằng cách thiết kế những mối quan hệ đó trong màn hình của bạn.</p>

<h1>13. Đừng xác định mà hãy làm nổi bật với màu sắc</h1>

<p>Màu sắc của những vật thể thay đổi bởi vì ánh sáng thay đổi. Chúng ta sẽ thấy một cái cây được phác thảo vào ban ngày khác với lúc hoàng hôn. Như trong thế giới tự nhiên, nơi mà màu sắc là một thứ có rất nhiều sắc thái, màu sắc không nên xác định nhiều trong một giao diện. Nó có thể hỗ trợ, được sử dụng để làm nổi bật, được sử dụng để hướng dẫn sự chú ý, nhưng không nên  là sự khác biệt duy nhất của sự vật. Đối với trường hợp phải đọc lâu hoặc nhiều giờ sử dụng màn hình mở rộng, hãy sử dụng màu sắc nhẹ nhàng hoặc làm tối màu nền, giữ màu sắc tươi sáng hơn cho màu nhấn của bạn. Tất nhiên cũng cần có thời gian cho màu nền sôi động nữa, chỉ cần chắc chắn rằng nó phù hợp với khán giả của bạn.</p>

<h1>14. Sự tiết lộ dần dần</h1>

<p>Chỉ hiển thị những gì cần thiết trên mỗi màn hình. Nếu mọi người đang thực hiện một lựa chọn, hãy hiển thị đầy đủ thông tin để cho phép họ lựa chọn, sau đó đi vào chi tiết trên màn hình tiếp theo. Tránh việc giải thích quá mức hoặc hiển thị tất cả cùng một lúc. Khi có thể, hãy hoãn các quyết định lại ở màn hình tiếp theo bằng việc tiết lộ thông tin khi cần thiết. Điều này sẽ giữ cho những tương tác của bạn trở nên rõ ràng hơn.</p>

<h1>15. Trợ giúp tức thời</h1>

<p>Trong các giao diện lý tưởng, việc trợ giúp là không cần thiết vì giao diện có thể nắm bắt và sử dụng được. Bước dưới đây, thực tế, là một bước mà trong đó sự trợ giúp là trực tiếp và theo ngữ cảnh, chỉ có sẵn vào thời gian và địa điểm cần thiết, được giấu đi ở tất cả các thời điểm khác. Việc yêu cầu mọi người đến giúp đỡ và tìm câu trả lời cho câu hỏi của họ đặt ra cho họ nhiệm vụ phải biết những gì họ cần. Thay vì xây dựng ở nơi cần trợ giúp&hellip; chỉ cần đảm bảo rằng nó không còn liên quan đến những người đã biết làm thế nào để sử dụng giao diện của bạn.</p>

<h1>16. Một điểm rất quan trọng: trạng thái số không</h1>

<p>Trải nghiệm đầu tiên với một giao diện vô cùng quan trọng, nhưng các nhà thiết kế lại thường bỏ qua điều này. Để giúp người dùng của chúng ta tốt nhất trong việc đạt được tốc độ với thiết kế của chúng ta, thì thiết kế ở trạng thái số không là tốt nhất, trạng thái mà tại đó chưa có gì xảy ra. Trạng thái này không phải là một khung trống&hellip; Nó sẽ đưa ra những chỉ đạo và hướng dẫn để đạt được tốc độ. Phần lớn sự cọ sát của các tương tác là trong bối cảnh ban đầu&hellip; Một khi người ta hiểu các quy tắc mà họ có thì khả năng thành công sẽ cao hơn nhiều.</p>

<h1>17. Thiết kế lớn là vô hình</h1>

<p>Một tính chất kỳ lạ của thiết kế lớn là nó thường không được chú ý bởi những người sử dụng nó. Lý do cho điều này là nếu thiết kế thành công người sử dụng có thể tập trung vào những mục tiêu của riêng mình chứ không phải là giao diện&hellip; khi họ hoàn thành mục tiêu của họ, họ sẽ hài lòng và không cần phải suy nghĩ về tình hình. Là một nhà thiết kế, điều này có thể là khó khăn bởi vì chúng ta nhận được ít lời tán thưởng khi các thiết kế của chúng ta tốt. Nhưng các nhà thiết kế lớn thường hài lòng với thiết kế được sử dụng tốt&hellip; và biết rằng người sử dụng hài lòng thường im lặng.</p>

<h1>18. Xây dựng trên những lĩnh vực thiết kế khác</h1>

<p>Thiết kế đồ họa hình ảnh, kiểu chữ (typography), copywriting, kiến ​​trúc thông tin và sự hiển thị&hellip; tất cả những lĩnh vực này là một phần của thiết kế giao diện. Chúng có thể được đề cập đến hoặc được chuyên môn môn hoá. Không nên lún vào những cuộc nội chiến hoặc coi thường những lĩnh vực khác: hãy thu thập những điều hữu ích từ những lĩnh vực khác cho công việc của bạn và tiếp tục sử dụng chúng. Ghi nhớ cả những hiểu biết từ những lĩnh vực dường như không liên quan&hellip; những gì chúng ta có thể học được từ việc xuất bản, viết mã, đóng sách, trượt ván, chữa cháy, karate?</p>

<h1>19. Những giao diện tồn tại để được sử dụng</h1>

<p>Như trong hầu hết các lĩnh vực thiết kế, thiết kế giao diện thành công khi mọi người đang sử dụng những gì bạn đã thiết kế. Giống như một chiếc ghế xinh đẹp mà không thoải mái để ngồi vào thì thiết kế là thất bại khi mọi người không lựa chọn sử dụng nó. Do đó, thiết kế giao diện có thể được xem như là tạo ra một môi trường sử dụng giống như tạo ra một vật có giá trị sử dụng. Giao diện để thoả mãn cái tôi người thiết kế là chưa đủ: nó phải được sử dụng!</p>

<p>(HẾT!)</p>

<p>Bài dịch từ <a href="http://bokardo.com/principles-of-user-interface-design/">Principles of User Interface Design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tư duy thiết kế: Cẩm nang cho sự đổi mới (Phần 1)]]></title>
    <link href="http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1/"/>
    <updated>2016-11-22T10:18:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/22/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-1</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/tu-duy-thiet-ke.jpeg" title="Tư duy thiết kế" ></p>

<p>Liệu có một công thức nào để tạo ra các sản phẩm sáng tạo hay không? Trải nghiệm hay là dịch vụ? Tôi
đang không nói đến việc cải tiến dần dần một cách thuần túy mà là một sự đổi mới mang tính đột phá.</p>

<p>Nếu bạn có nghi ngờ thì cũng là điều dễ hiểu, tôi cũng đã từng hoài nghi khi tôi bắt đầu nghiên cứu
của mình về khoa học đằng sau đổi mới cách đây nhiều năm. Sự thật về sự đổi mới là tất cả đều phụ
thuộc yếu tố con người. Cuối cùng, chúng ta là những người tạo ra những đổi mới cho mọi người. Là
một trong những giám đốc sản phẩm làm việc trên <a href="http://www.adobe.com/products/experience-design.html">Adobe Experience Design</a> (Adobe XD) ở San Francisco, tôi rất vui được chia sẻ với các bạn phương pháp mà
tôi rất yêu thích, sử dụng, <a href="http://designthinkingnow.com/#/about/english">giảng dạy</a>, và học
hỏi mỗi ngày tại nơi làm việc, và trong cuộc sống.</p>

<!-- more -->


<p>Khi bạn đọc bài viết này, tôi khuyến khích bạn áp dụng phương pháp &ldquo;tư duy cầu tiến&rdquo; (growth mindset)
và để tâm trí của bạn tiếp thu những quan điểm mới. Carol Dweck, tác giả của cuốn &ldquo;Tư duy: Tâm lý học
mới của sự thành công&rdquo; (Mindset: The New Psychology of Success), mô tả &ldquo;tư duy cầu tiến&rdquo; là nỗ lực
cộng với việc học bằng sự phát triển và thành công. Điều này có nghĩa là nếu bạn đặt nỗ lực đúng chỗ
và học từ những sai lầm của bạn, bạn sẽ thành công.</p>

<h1>Quá trình tư duy thiết kế</h1>

<p>Quá trình hay phương pháp này đã được phát triển bởi <a href="https://www.ideo.org/">IDEO</a> và được giảng
dạy tại: <a href="http://dschool.stanford.edu/">Viện Thiết kế tại Đại học Stanford</a>. Phương pháp liên quan
đến sự hợp tác lớn và lặp đi lặp lại thường xuyên. Phương pháp có năm giai đoạn rất rõ ràng: Thông
Cảm, Xác Định, Tưởng Tượng, Nguyên Mẫu và Thử Nghiệm.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/qua-trinh-tu-duy-thiet-ke.jpeg" title="Quá trình tư duy thiết kế" ></p>

<p>Mục tiêu cuối cùng của quá trình này là tạo ra một sản phẩm, dịch vụ, hoặc trải nghiệm mà người ta
muốn (sự mong muốn), có tiềm năng thực sự để trở thành hữu dụng (tính khả năng), và có thể dễ dàng
hoặc thuận tiện xây dựng về công nghệ (tính khả thi).</p>

<p>Điều quan trọng là hãy tập trung vào một giai đoạn tại một thời điểm và lặp lại nhanh.</p>

<p>Để mô tả từng giai đoạn của quá trình tư duy thiết kế, chúng ta hãy sử dụng Adobe XD làm ví dụ.
Như mô tả của <a href="https://twitter.com/vincent_hardy">Vincent Hardy, Giám đốc Kỹ thuật của Adobe</a> trong
bài viết của mình về xác định beta, đội Adobe XD của chúng tôi có một lịch trình phát hành rất tích
cực, trong đó cứ 2 tuần sẽ có một bản build trước khi phát hành, và hàng tháng sẽ có các bản phát
hành công khai. Chúng tôi duy trì một <a href="https://adobexd.uservoice.com/">trang web UserVoice</a> nơi mà người
sử dụng có thể sắp xếp các lỗi và đề xuất tính năng mới, trong đó cung cấp cho chúng tôi cơ hội để
học hỏi nhanh, xác nhận, ưu tiên, và thay đổi bất cứ khi nào cần thiết.</p>

<p>Chúng tôi có một đội ngũ có nhiều kỹ năng và chuyên môn sâu (T-shaped) bao gồm các nhà thiết kế,
các kỹ sư, quản lý lập trình, nhân viên marketing và các giám đốc sản phẩm giống như tôi.</p>

<p>Một người có nhiều kỹ năng và chuyên môn sâu &ldquo;T-shaped&rdquo; là một người rất giỏi ở một lĩnh vực nào đó,
nhưng cũng có thể đảm nhận các vai trò khác nhau trong nhóm, đòi hỏi người đó phải luôn luôn thích
tìm hiểu và đặc biệt có sự thấu hiểu.</p>

<p><strong>Tất cả mọi thứ trong thiết kế tư duy bắt đầu từ một thách thức thiết kế</strong></p>

<p>Thách thức thiết kế của chúng tôi trước khi Adobe XD được tạo ra là:</p>

<p><em>&ldquo;Photoshop và Illustrator không phải được thiết kế ban đầu cho những thách thức UX của hiện tại.&rdquo;</em></p>

<p>Điều thú vị trong quá trình tư duy  thiết kế của chúng tôi chính là, trước khi chúng tôi bắt đầu nghĩ
về những ý tưởng để &ldquo;giải quyết&rdquo; vấn đề này, chúng tôi ra ngoài và nói chuyện với mọi người.</p>

<h1>Giai đoạn một: Đồng cảm</h1>

<p>Đồng cảm là khả năng đặt mình vào vị trí của người khác để bắt đầu &ldquo;nhìn thấy&rdquo; những thứ thông qua đôi
mắt của người khác.</p>

<p>Có 3 cách để xây dựng sự đồng cảm: 1) các cuộc phỏng vấn, 2) quan sát và 3) trải nghiệm.</p>

<p><strong>1) Phỏng vấn</strong></p>

<p>Chúng tôi thường xuyên có các cuộc họp khách hàng, nơi chúng tôi khảo sát quy trình công việc hiện
tại, tìm hiểu suy nghĩ của mỗi nhà thiết kế về môi trường mà họ làm việc, các điểm chưa hài lòng, kỳ
vọng và các vấn đề khác. Các cuộc phỏng vấn của chúng tôi không chỉ giới hạn tại Hoa Kỳ mà chúng tôi
còn tiến hành phỏng vấn ở các bộ phận khác trên thế giới. Thật hấp dẫn khi chứng kiến cách mọi người
xem xét và giải quyết những thách thức khác nhau. Điều quan trọng là tham gia buổi phỏng vấn trong
vai trò trung lập. Ngay cả khi bạn nghĩ rằng bạn biết câu trả lời, hãy hỏi tại sao.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/phong-van-khach-hang.jpeg" title="Các nhà quản lý sản phẩm Adobe XD phỏng vấn khách hàng ở Châu Âu" ></p>

<p>Có một chương trình khung thú vị do Sakichi Toyoda phát triển đã được sử dụng tại Toyota trong suốt
thời kì phát triển các phương pháp sản xuất của mình. Phương pháp này chỉ ra rằng nếu bạn hỏi
&ldquo;Tại sao?&rdquo;  5 lần, bạn có thể tiếp cận được nguyên nhân của bất kỳ vấn đề. Điều đó giống như bạn là
một đứa trẻ tò mò luôn háo hức muốn biết tại sao mọi thứ lại như vậy.</p>

<p>Chiến lược tốt để thực hiện các cuộc phỏng vấn là thiết lập mối quan hệ, kết nối mạnh mẽ với người
được phỏng vấn, thay vì tác động đến câu trả lời. Đừng bao giờ hỏi, <em>&ldquo;Điều này là tốt, phải không?&rdquo;</em>
Thay vào đó, hãy hỏi <em>&ldquo;Bạn nghĩ gì về điều này?&rdquo;</em> Thậm chí hãy hỏi câu hay hơn, <em>&ldquo;Hãy kể cho tôi một
câu chuyện mà bạn đã gặp trở ngại khi làm việc với X.&rdquo;</em> Tìm kiếm qua câu chuyện là một kỹ thuật rất
mạnh mẽ mà có thể cung cấp cho bạn rất nhiều thông tin có giá trị. Ví dụ, nếu bạn cần phải hiểu những
gì đang thịnh hành với thanh thiếu niên, thử hỏi họ những gì họ sẽ mua với $150.</p>

<p>Kể chuyện và tìm kiếm những câu chuyện trong cuộc phỏng vấn là một cách tốt để thiết lập mối quan hệ
và kết nối. Mới đây <a href="https://itunes.apple.com/us/podcast/human-tech/id1097159316?mt=2">Human Tech</a>
đã trình bày một nghiên cứu đo hoạt động não trong các câu chuyện. Nghiên cứu cho thấy rằng trong
thời gian đỉnh cao của một câu chuyện, hoạt động não của người nghe cũng tương tự và liên hệ chặt
chẽ với hoạt động não của người kể chuyện &ndash; tạo ra sự kết nối thực sự giữa hai người.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/quy-trinh-phong-van.jpeg" title="Quy trình phỏng vấn" ></p>

<p>Khi bạn hỏi một câu hỏi, hãy dành thời gian để người dùng của bạn được suy nghĩ. Im lặng cũng có thể
chấp nhận! Thậm chí ngay cả khi im lặng có vẻ kì cục, nhưng tuyệt đối không được gián đoạn hoặc gây ảnh
hưởng đến người được phỏng vấn.</p>

<p>Nhìn chung, quá trình thiết kế tư duy thiên vể chất lượng hơn số lượng. Điều này có nghĩa là có thể
ít người hơn trong cuộc phỏng vấn của bạn, nhưng hãy lựa chọn những người mà bạn nghĩ rằng có thể
đại diện cho người dùng khác nhau của sản phẩm hoặc dịch vụ của bạn. Chúng tôi đang tìm kiếm những
hiểu biết sâu sắc, không phải đơn thuần chỉ là sự thật.</p>

<p>Tôi thấy cái nhìn sâu sắc cũng chính là một cái nhìn hiểu biết sâu sắc về một cái gì đó. Điều đó
giống như là các nơ-ron thần kinh của bạn đang chờ bạn xác định và kích hoạt các phần thông tin khi
kết nối với nhau, làm cho có ý nghĩa. Đó là khoảnh khắc bạn đột nhiên &ldquo;khám phá ra&rdquo;.</p>

<p>Khái niệm của người sử dụng đặc biệt cũng có thể đem lại lợi ích nghiên cứu cho bạn. Ví dụ, nếu bạn
cần phải phỏng vấn người sử dụng giỏ mua hàng, cũng phỏng vấn một người đàn ông vô gia cư, người đó
sử dụng xe như một phương tiện di chuyển xung quanh hoặc thu thập vật liệu tái chế &ndash; thì đó là một
người sử dụng đặc biệt. Người dùng đó sẽ cung cấp cho bạn những hiểu biết quan trọng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/phong-van-nguoi-dung-dac-biet.jpeg" title="Phỏng vấn người dùng đặc biệt" ></p>

<p><strong>2) Quan sát</strong></p>

<p>Hãy giao nhiệm vụ cho người dùng của bạn và chỉ cần ngồi quan sát. Nếu bạn hỏi, &ldquo;Anh có gặp vấn đề
gì khi mua những thứ từ Amazon?&rdquo; có thể bạn sẽ nhận được câu trả lời, &ldquo;Không vấn đề gì cả, rất dễ
dàng để mua những thứ đó.&rdquo; Nhưng nếu bạn quan sát một người sử dụng nó từ phía sau họ, bạn sẽ thấy
các vấn đề khi họ mua hàng.</p>

<p>Gần đây, tại Adobe, chúng tôi tổ chức hội thảo trải nghiệm (experience-athon) nội bộ lần đầu tiên, ở đây chúng tôi
đã giao cho người thiết kế Adobe một nhiệm vụ và chỉ đứng nhìn. Có sự tham dự của các kỹ sư sản phẩm
và những người thiết kế trong nhóm XD. Rất nhanh chóng, chúng tôi đã xác định được nhiều vấn đề cần
phải giải quyết tốt hơn, và chúng tôi đã làm việc để giải quyết những vấn đề này.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/kinh-nghiem-Adobe-xd.jpeg" title="hội thảo trải nghiệm của Adobe XD ở San Francisco" ></p>

<p>Chúng tôi tin rằng điều quan trọng là các thành viên ở các lĩnh vực khác nhau trong đội Adobe XD
(thiết kế, kỹ thuật và giám đốc sản phẩm) được tiếp xúc với thông tin phản hồi từ khách hàng trực
tuyến của chúng tôi từ <a href="https://adobexd.uservoice.com/">Uservoice</a> và
<a href="https://twitter.com/adobexd">Twitter)</a>, tại các hội nghị, các cuộc họp mặt, và các cuộc tiếp xúc
khách hàng để tất cả các khía cạnh của sản phẩm đều đáp ứng được yêu cầu của khách hàng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/doi-Adobe-voi-khach-hang.jpeg" title="Đội Adobe XD với khách hàng tại Adobe MAX 2015" ></p>

<p><strong>3) Trải nghiệm</strong></p>

<p>Hãy sử dụng những gì khách hàng của bạn sử dụng. Đó có thể là sản phẩm của bạn, hoặc có thể là của
một đối thủ cạnh tranh. Điều này sẽ giúp bạn trực tiếp trải nghiệm những điều khó chịu hay cảm giác
vui sướng khi sử dụng sản phẩm.</p>

<p>Tôi kiểm tra tất cả các thiết kế và các công cụ tạo mẫu mà tôi có thể. Không chỉ để xây dựng mô hình
tinh thần mới, mà còn để xác định, giống như một nhà nhân chủng học, rằng liệu một người sử dụng gợi ý
một tính năng nào đó đó có bị ảnh hưởng trực tiếp bởi một công cụ hay dịch vụ hiện có. Áp dụng tư
duy mới và tránh mô hình tinh thần hiện có có lẽ một trong những điều khó thực hiện nhất.</p>

<p>Thực tế thú vị: nhà thiết kế và giám đốc sản phẩm của Adobe sử dụng Adobe XD để thiết kế Adobe XD
&ndash; đó là một kiểu ứng dụng! Điều này cũng cho chúng ta cơ hội cảm nhận những gì người dùng của chúng
ta cảm nhận.</p>

<p>Trong giai đoạn Đồng cảm, bạn có thể sử dụng một số công cụ mạnh mẽ, chẳng hạn như công cụ Empathy Maps,
với công cụ này bạn có thể liệt kê những gì một người nói + làm (rõ ràng) và suy nghĩ + cảm giác (ẩn).</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/22/giai-doan-dong-cam.jpeg" title="Giai đoạn đồng cảm" ></p>

<p>Sau khi giải nén dữ liệu từ các cuộc phỏng vấn, quan sát, và / hoặc trải nghiệm, bạn có thể tách các
nhu cầu rõ ràng (nói và làm) từ những nhu cầu ẩn (suy nghĩ và cảm nhận). Sau đó là nơi bạn có thể tìm
thấy những hiểu biết sâu sắc.</p>

<h1>Giai đoạn hai: Xác định</h1>

<p>Sau khi đã xây dựng sự đồng cảm, đến lúc cần xem xét lại thách thức thiết kế ban đầu và tái xác định
các vấn đề.</p>

<p>Để xác định, hoặc tái xác định vấn đề hoặc thách thức, một quan điểm (PoV) công thức có thể tính như
sau: PoV = tính cách + nhu cầu + cái nhìn sâu sắc.</p>

<p>Ví dụ:</p>

<p><em>&ldquo;Sam, một nhà thiết kế cao cấp yêu thích việc làm hài lòng người sử dụng với các thiết kế giải quyết
các vấn đề thực tế và nhìn đẹp, cần thiết kế, tạo mẫu và xác nhận nhanh hơn, bởi vì anh ta cảm thấy
đang lãng phí quá nhiều thời gian vào các bước lặp đi lặp lại. Toàn bộ chuyển từ công cụ đến công cụ
đều không thành công!&rdquo;</em>&#8221;</p>

<p>Nhu cầu là những cảm xúc và chiều sâu. Cái nhìn sâu sắc là những điều bất ngờ, kết quả phỏng vấn,
quan sát, mâu thuẫn đều có thể được sử dụng trong các giải pháp.</p>

<p>Khi bạn sử dụng phương pháp đặt con người làm trung tâm của việc tìm kiếm cho một nhu cầu thực sự,
bạn có một lợi thế cạnh tranh.</p>

<p>Tôi thích cụm từ, &ldquo;Tư Duy Thiết Kế là việc tìm hiểu nhu cầu nhiều hơn việc giải quyết vấn đề.&rdquo; Vì vậy,
cần có một công cụ tìm hiểu nhu cầu!</p>

<p>Sau khi chúng tôi đã trải qua quá trình đồng cảm với Adobe XD, chúng tôi đã xác định được một vài
điều quan trọng:</p>

<ul>
<li><p>Khi Photoshop và Illustrator ban đầu được tạo ra, các nhà thiết kế đã không phải đối mặt với những
thách thức UX giống như những thách thức mà họ phải đối mặt ngày hôm nay.</p></li>
<li><p>Có những công cụ khác nhau giải quyết các phần khác nhau của vấn đề. Có những công cụ thiết kế cho
độ chính xác thấp (kiến trúc thông tin và wireframes), các công cụ thiết kế cho độ chính xác cao, và
các công cụ chuyên biệt cho tạo mẫu, vv. Người dùng phải chuyển từ công cụ này sang công cụ khác để
thiết kế, tạo mẫu, và xác nhận.</p></li>
<li><p>Có rất nhiều sự bất đồng trong quá trình đồng cảm, đặc biệt là sau khi thử nghiệm một nguyên mẫu,
khi sự thay đổi là cần thiết. Và sự xung đột giới hạn sự sáng tạo. Chúng tôi thấy rằng các nhà thiết
kế đi nhanh hơn và thích khám phá các lựa chọn khác nhau, lặp lại và tiến nhanh.</p></li>
<li><p>Hầu hết các công cụ được sử dụng bởi các nhà thiết kế phải chịu ảnh hưởng từ việc mất kiểm soát
phạm vi dự án, xây dựng các tính năng phía trên các tính năng khác, không duy trì một cái nhìn toàn
diện, có lỗi và đôi khi chậm.</p></li>
</ul>


<p>Vì vậy chúng ta rất dễ dàng có thể xác định một số trụ cột XD:</p>

<ul>
<li><p>Thiết kế với tốc độ của tư tưởng</p></li>
<li><p>Hiệu suất và chất lượng</p></li>
<li><p>Quy trình công việc có ý nghĩa</p></li>
<li><p>Giao diện theo ngữ cảnh</p></li>
</ul>


<p>Với ý tưởng đó, chúng tôi đã bắt đầu với những điều sẽ trở thành Thiết kế Trải nghiệm Adobe, hoặc
như chúng tôi chỉ đơn giản gọi nó là Adobe XD.</p>

<p>(<a href="http://blog.teracy.com/2017/01/04/tu-duy-thiet-ke-cam-nang-cho-su-doi-moi-phan-2/">PHẦN 2</a>)</p>

<p>Dịch từ: <a href="https://medium.com/@demianborba/design-thinking-a-manual-for-innovation-e0576b34eff6#.9ae4fd5dk">Design thinking: A manual for innovation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[URIs tốt sẽ không bao giờ thay đổi]]></title>
    <link href="http://blog.teracy.com/2016/11/11/URIs-tot-se-khong-bao-gio-thay-doi/"/>
    <updated>2016-11-11T11:33:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/11/URIs-tot-se-khong-bao-gio-thay-doi</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/11/broken.jpg" title="Việc thay đổi cấu trúc URI thường đem lại trải nghiệm không tốt cho người dùng." >
Theo bạn URIs (đường dẫn) thế nào là tốt? Những URIs nào sẽ bị thay đổi theo thời gian? Đường dẫn không tự thay đổi chỉ có con người khiến nó thay đổi.
Theo lý thuyết thì không có lý do gì để mọi người thay đổi URI (hoặc là ngừng duy trì các tài liệu), nhưng thực tế thì lại có muôn vàn lý do mà dưới đây là một vài ví dụ.</p>

<!-- more -->


<ul>
<li><p><strong>Chúng tôi sắp xếp lại nội dung trang web để đem lại trải nghiệm tốt hơn.</strong></p>

<p>Có phải như bạn cảm thấy không thể duy trì URIs cũ như hiện tại? Nếu vậy, bạn đã chọn quy tắc đặt URI thật tệ. Hãy suy nghĩ về những URI mới để bạn có thể giữ chúng tồn tại sau khi thiết kế lại lần tới nhé.</p></li>
<li><p><strong>Chúng tôi có quá nhiều tài liệu đến mức không thể nào kiểm tra được cái nào đã cũ, cái nào là bí mật và hợp lệ và vì vậy chúng tôi nghĩ tốt hơn hết là thay đổi toàn bộ URIs để cấp phát lại từ đầu.</strong></p>

<p>Hmm, có lẽ tôi có thể đồng cảm với việc này &ndash; W3C đã từng trải qua thời kỳ như vậy khi mà chúng tôi đã phải sàng lọc cẩn thận quyền truy cập của từng tại liệu trước khi cho phép nó được truy cập rộng rãi. Cách giải quyết là mọi tài liệu cần được hoạch định trước &ndash; hãy quy ước rõ và lưu trữ các thông tin của tài liệu đại loại như tài liệu được phân phối như thế nào, ngày tạo tài liệu và khi nào tài liệu đấy hết hiệu lực.</p></li>
<li><p><strong>Uhm, chúng tôi thấy rằng chúng tôi phải chuyển các file đến thư mục khác.</strong></p>

<p>Đây là một trong những lý do vụng về nhất. Có vẻ có nhiều người không biết rằng các máy chủ Web đều cho phép bạn tùy chỉnh rất linh hoạt mối quan hệ giữa đường dẫn và file thực tế được sử dụng trên hệ thống. Hãy nghĩ rằng URI là một tập các tên trừu tượng, được sắp xếp một cách gọn gàng sau đó hãy gán nó vào những file/ứng dụng cụ thể trong hệ thống của bạn và sau đó hãy cấu hình máy chủ web một tẹo để thể hiện việc gán ghép đấy.
John không còn duy trì tài liệu này nữa, giờ thì chỉ Jane làm thôi.
Hãy nghĩ lại đi, tại sao tên của John lại nằm trên URI? Nó nằm trong thư mục của John nên phải có John trên URI à?</p></li>
<li><p><strong>Trước đây tôi dùng CGI script còn giờ thì chúng tôi chuyển sang dùng một chương trình khác.</strong></p>

<p>Việc bạn cứ phải chạy theo cấu trúc URI của một kiểu chương trình/Framework này và rồi sau đó thay đổi nó chỉ vì bạn sử dụng một chương trình khác nghe thật là điên rồ. Ngoài ra việc bạn không cấu hình lại được URI cho phần mềm đấy còn để lộ thông tin về cách thức hoạt động của máy chủ của bạn cho người khác thấy (kiểu như bạn dùng máy chủ kiểu gì, phần mềm nào) và điều đó cũng hơi nguy hiểm đấy. Tóm lại là rất bất hợp lý nếu bạn thay đổi cơ chế hoạt động và tất cả các đường dẫn đều phải thay đổi dù nội dung của bạn không thay đổi gì.</p>

<p>Lấy ví dụ cho điều này là trang thông tin khoa học quốc gia (Hoa kỳ).</p>

<p>  <a href="http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl">http://www.nsf.gov/cgi-bin/pubsys/browser/odbrowse.pl</a></p>

<p>Đây là trang tìm kiếm tài liệu của trang thông tin khoa học, rõ ràng đây không có vẻ là URI được thiết kế cho việc tồn tại trong&hellip; vài năm! &ldquo;cgi&rdquo;, &ldquo;oldbrowse&rdquo; và &ldquo;.pl&rdquo; đã để lộ cách thức làm việc của cơ chế bên dưới. Tuy nhiên URI của kết quả tìm kiếm của trang thông tin khoa học quốc gia thì ổn hơn rất nhiều.</p>

<p>  <a href="http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm">http://www.nsf.gov/pubs/1998/nsf9814/nsf9814.htm</a></p>

<p>Với phần đầu là &ldquo;pubs/1998&rdquo; cho ta gợi ý để biết rằng đó là tài liệu cũ từ năm 1998, cho dù thêm 100 năm nữa vào năm 2098 tài liệu thì có thể khác nhưng URI dạng này vẫn sẽ hợp lệ và NSF cho dù vẫn lưu trữ tài liệu cũ thì vẫn sẽ không phải lúng túng về URI này.</p></li>
<li><p><strong>Tôi không nghĩ rằng URLs sẽ phải cố định &ndash; chỉ có URNs mới cần cố định.</strong></p>

<p>Đây có lẽ là một trong những tác dụng phụ tồi tệ nhất của các thảo luận URN. Một số người dường như nghĩ rằng các không gian tên có thể được kéo dài ra và rằng chúng có thể làm cho các link lỏng lẻo như họ muốn, và khi đó &ldquo;URN sẽ xử lý được hết những điều này&rdquo;. Nếu bạn là một trong những người này thì tôi đã làm bạn vỡ mộng mất rồi.</p>

<p>Hầu hết các chương trình URN mà tôi thấy nó giống như ID tác giả theo sau hoặc là ngày hoặc là một chuỗi ký tự bất kỳ mà bạn chọn, hoặc đơn giản chỉ là một chuỗi ký tự. Cái này trông giống như một HTTP URI. Nói cách khác, nếu bạn nghĩ tổ chức của bạn sẽ có thể tạo ra các URN tồn tại mãi mãi, rồi chứng minh điều đó bằng cách tạo ra ngay các URN và sử dụng chúng thay cho các HTTP URI. Sẽ Không có vấn đề gì về HTTP làm cho URI của bạn không ổn định cả, vì đó là tổ chức của bạn mà. Hãy thực hiện một cơ sở dữ liệu để ánh xạ được URN tài liệu vào trong tên file hiện tại, và cho phép máy chủ trang web của bạn sử dụng nó để lấy được các tập tin.
Nếu bạn đã hiểu được điều này, và trừ khi bạn có tiền, thời gian và các địa chỉ liên hệ để thực hiện thiết kế phần mềm, thì khi đó bạn có thể đưa ra một số lý dó sau:</p></li>
<li><p><strong>Chúng tôi muốn điều đó nhưng chúng tôi không có công cụ.</strong></p>

<p>Tôi có thể hiểu và hoàn toàn đồng ý về lý do này. Bạn cần phải làm gì để máy chủ web luôn sử dụng một URI cố định và trả về đúng dữ liệu cho dù bạn có sử dụng hệ thống nào, lưu trữ ra sao tại bất kỳ thời điểm nào. Liệu bạn có cho rằng bạn có thể lưu URI ngay trong chính bản thân tài liệu như là một cách để đối chiếu và liên tục cập nhập cơ sở dữ liệu để khiến URI luôn đúng. Bạn sẽ muốn lưu trữ mối quan hệ giữa các phiên bản khác nhau và bản dịch của tài liệu đó. Ngoài ra bạn còn cần lữu trữ thông tin checksum để đảm bảo tính toàn vẹn của dữ liệu theo thời gian. Và như bạn thấy đấy, máy chủ web về cơ bản không phải là công cụ có thể cung cấp những điều đấy cho bạn. Khi bạn tạo một tài liệu mới, trình soạn thảo sẽ hỏi bạn URI thay vì nói cho bạn biết URI như thế nào.</p>

<p>Bạn cũng cẩn có thể thay đổi được một vài thứ như ai là chủ sở hữu của tài liệu, quyền truy câp ra sao&hellip; mà không phải thay đổi gì về URI.</p>

<p>Tại W3C chúng tôi sử dụng Jigedit (máy chủ Jigsaw dùng để chỉnh sửa tài liệu) để hỗ trợ việc theo dõi các phiên bản của tài liệu và chúng tôi đang thử nghiệm với các công cụ để tạo tài liệu. Nếu bạn là người viết công cụ, máy chủ thì hãy nhớ nhé.</p></li>
</ul>


<h1>Tại sao tôi phải quan tâm</h1>

<p>  Khi bạn thay đổi URI trang web của bạn, bạn sẽ không bao giờ biết được ai vẫn đang giữ URI cũ và khi một ai đó click vào URI nhưng nó không tồn tại thì thường họ sẽ mất niềm tin vào trang web đấy. Thiệt hại sẽ là hiển nhiên khi để người sử dụng phàn nàn về những đường link như thế.</p>

<h1>Vậy tôi phải bằt đầu từ đâu? Thiết kế URIs?</h1>

<p>  Nếu bạn muốn URI của bạn sẽ vẫn đúng đắn sau 2 năm hay 200 năm tới, thì hãy suy nghĩ về nó thật kỹ. URIs thay đổi khi một vài thông tin trong bản thân nó thay đổi. Thiết kế URI như thế nào thật sự là rất quan trọng. Và việc đầu tiên là hay loại bỏ bớt các thông tin không cần thiết ra khỏi URI.</p>

<p>  Ngày khởi tạo của tài liệu là một tham số sẽ không bao giờ thay đổi và nó rất hữu ích cho việc phân loại truy nhập từ hệ thống mới hay hệ thống cũ. Về cơ bản đấy là khởi đầu tốt cho một thiết kế URI ổn định.</p>

<p>  Có một ngoại lệ ở đây chính là URI dùng cho &ldquo;mới nhất&rdquo; hay trang &ldquo;nhất&rdquo;, ví dụ như URI ở dưới đây:</p>

<p>  <a href="http://www.pathfinder.com/money/moneydaily/latest/">http://www.pathfinder.com/money/moneydaily/latest/</a></p>

<ul>
<li><p><strong>Cái gì nên bỏ ra khỏi URI</strong></p>

<p>Hmm, ngoại trừ ngày tháng thì những phần khác chỉ tổ khiến mọi thứ rắc rối hơn thôi. Ví dụ:</p>

<ul>
<li><strong>Sử dụng tên tác giả</strong> &ndash; tác giả có thể thay đổi theo từng phiên bản của tài liệu, chỉ cần tác giả thay đổi thì URI của tài liệu xem như là đã không đúng nữa.</li>
<li><strong>Dùng tiêu đề của tài liệu</strong> &ndash; Ban đầu thì có vẻ tốt nhưng dần dần nó sẽ bị thay đổi rất nhanh khi tài liệu được cập nhật.</li>
<li><strong>Trạng thái của tài liệu</strong> &ndash; trạng thái của tài liệu không nên được thiết lập trong URI, URI của tài liệu mới nhất cần được cố định bất chấp tài liệu có trạng thái như thế nào đi nữa.</li>
<li><strong>Thông tin truy nhập</strong> &ndash; Tại W3C, chúng tôi chia quyền truy cập trang web thành 3 mục chính, nội dung dành cho chúng tôi, nội dung dành cho các thành viên và những nội dung công cộng. Ban đầu sử dụng URI riêng cho từng quyền truy nhập có vẻ ổn nhưng khi chúng tôi chuyển tài liệu từ quyền truy nhập này sang truy nhập khác thì link cũ sẽ không còn tồn tại và gây nên lỗi.</li>
<li><strong>Đuôi của file truy nhập</strong> &ndash; Đây là lỗi thường gặp &ldquo;.cgi&rdquo; &ldquo;.html&rdquo; là những thứ sẽ thay đổi theo thời gian. Bạn có chắc là bạn sẽ vẫn dùng html hay cgi hay php trong 20 năm tới? Thay vì sử dụng tên file và đuôi của nó trực tiếp thì bạn có thể sử dụng các biện pháp như: Sử dụng database để lưu trữ file, dùng mod rewrite để thay đổi cấu trúc URL tự động, sử dụng mod_spelling của Apache để tự động điền đuôi file, sửa lỗi chính tả&hellip;</li>
<li><strong>Đường dẫn chỉ ổ đĩa</strong> &ndash; !!? à vâng, nhưng tôi đã từng thấy rồi đấy thưa các bạn.</li>
</ul>


<p>Một URI đơn giản và tốt có thể ở dạng như sau:</p>

<p><a href="http://www.w3.org/1998/12/01/chairs">http://www.w3.org/1998/12/01/chairs</a></p></li>
<li><p><strong>Phân loại tài liệu theo từng đề mục:</strong></p>

<p>Đây là một con dao 2 lưỡi mà đôi khi rất khó để tránh khỏi. Thường thì việc sử dụng đề mục trong URI khi bạn phân loại tài liệu dựa vào đặc tính tài liệu mà bạn đang làm việc. Các đặc tính sẽ dần thay đổi theo thời gian, ở W3C chúng tôi đang muốn đổi &ldquo;MarkUp&rdquo; thành &ldquo;Markup&rdquo; và rồi chúng tôi lại đổi thành &ldquo;HTML&rdquo;, bạn thấy đấy, các khái niệm sẽ dần thay đổi theo thời gian. Ví dụ như liệu sau này chúng ta có còn sử dụng &ldquo;Stylesheet&rdquo;, liệu có còn khái niệm &ldquo;Lịch sử truy nhập&rdquo; trong trình duyệt nữa không!?</p>

<p>Vận hành và quản lý trang web của một tổ chức là rất khó, mà thật ra tổ chức cái gì cũng vậy. Giải pháp trung hạn của bạn có thể sẽ trở thành trở ngại lớn trong dài hạn.</p>

<p>Thêm vấn đề nữa của việc phân loại này là mỗi người sẽ có cách phân loại riêng của mình, sự liên kết giữa các khái niệm là không cố định theo từng cá nhân và nó sẽ tiềm ẩn nguy cơ rất lớn khi bạn phân loại theo mô hình cây như vậy. Tóm lại, nếu bạn phân loại theo chủ đề trong URI nghĩa là bạn đang sử dụng một kiểu phân loại như vậy và việc phân loại này sẽ bị thay đổi trong tương lai và điều đó sẽ khiến URI bị hỏng.</p></li>
<li><p><strong>Đừng quên cả việc thiết kế tên miền nữa nhé</strong></p>

<p>Những lưu ý về URI ở trên không chỉ giới hạn trong phần địa chỉ mà còn trong cả tên miền. Nếu bạn có máy chủ riêng cho những thứ của bạn, hãy nhớ việc phân chia sử dụng subdomain sẽ tiềm ẩn nguy cơ khiến nhiều URI không còn tồn tại trong tương lai. Nhiều quản trị hệ thống cảm thấy thoải mái hơn khi phân chia mọi thứ theo domain con như kiểu &ldquo;cgi.pathfinder.com&rdquo;, &ldquo;lists.w3.org&rdquo; nhưng hãy cẩn trọng và suy nghĩ thật kỹ khi sử dụng nhiều hơn một tên miền cho trang web của bạn. Vận dụng khéo léo việc tạo ra các trang chuyển hướng sẽ giúp bạn quản lý tốt hơn.</p>

<h1>Kết luận</h1>

<p>Thiết kế và sử dụng URIs nhất quán trong 2, 20 hay thậm chí 200 năm chắc chắn là không đơn giản. Tuy nhiên vì các đồng chí quản trị cứ hay đưa ra những quyết định khiến cho họ lâm vào rắc rối trong tương lai. Thường thì do họ sử dụng những công cụ có sẵn và công cụ đấy lại có tầm nhìn quá ngắn hạn và bản thân họ cũng không thấy được những vấn đề lớn trong tương lai khi các URI của họ bị thay đổi. Thông điệp ở đây là, hay cố gắng thiết kế URI làm sao cho dù mọi thứ thay đổi (công nghệ, hệ thống, con người, các tham số, thuộc tính) thì URI của bạn vẫn luôn cố định và tất nhiên là truy cập được :).</p></li>
</ul>


<p> Lược dịch từ: <a href="https://www.w3.org/Provider/Style/URI.html">Cool URIs don&rsquo;t change</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to develop and deploy React applications easily and fast with Webpack, ES6+ and Docker]]></title>
    <link href="http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker/"/>
    <updated>2016-11-07T07:18:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>React is an awesome library to work with, however, we must pick up other libraries to build up a
robust application such as redux, redux-connect, server side rendering, redux-form, etc. After that,
we must organize the application structure with best practices to develop and deploy it. Doing all
these tasks requires some good experiences, so it&rsquo;s very difficult for a newbie. Good news is that there
are many starter boilerplate projects out there for us to choose. And today we&rsquo;d like to introduce
you a starter React boilerplate for faster development and deployment.</p>

<!-- more -->


<p>There is a good starter React boilerplate with the following outstanding batteries included:</p>

<ul>
<li>Universal rendering (both client and server side rendering from the same client side code)</li>
<li>Babel for ES6+ for writing modern JS syntax today</li>
<li>Webpack for bundling, hot module reloading</li>
<li>Redux, Redux Dev Tools, redux-form, React Router</li>
<li>ESLint consistent style checking</li>
<li>Unit testing</li>
<li>bootstrap and font-awesome</li>
<li>And many other cool things</li>
</ul>


<p>However, the project is not active anymore, so we decided to fork and update it a bit to work with
Docker easier and faster. Let&rsquo;s get started with
<a href="https://github.com/hoatle/react-redux-universal-hot-example">https://github.com/hoatle/react-redux-universal-hot-example</a> then.</p>

<h2>Prerequisites</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-prerequisites.gif" title="React Project Prerequisites" ></p>

<p>Make sure you have the following softwares installed:</p>

<ul>
<li>git</li>
<li>docker</li>
<li>docker-compose</li>
</ul>


<p>Make sure that docker and docker-compose are available by checking <code>git version</code>, <code>docker info</code> and
<code>docker-compose version</code> as following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git version
</span><span class='line'>git version 2.10.2
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker info
</span><span class='line'>Containers: 9
</span><span class='line'>Running: 1
</span><span class='line'>Paused: 0
</span><span class='line'>Stopped: 8
</span><span class='line'>Images: 216
</span><span class='line'>Server Version: 1.12.1
</span><span class='line'>Storage Driver: aufs
</span><span class='line'>Root Dir: /var/lib/docker/aufs
</span><span class='line'>Backing Filesystem: extfs
</span><span class='line'>Dirs: 244
</span><span class='line'>Dirperm1 Supported: <span class="nb">true</span>
</span><span class='line'>Logging Driver: json-file
</span><span class='line'>Cgroup Driver: cgroupfs
</span><span class='line'>Plugins:
</span><span class='line'>Volume: <span class="nb">local</span>
</span><span class='line'>Network: host bridge null overlay
</span><span class='line'>Swarm: inactive
</span><span class='line'>Runtimes: runc
</span><span class='line'>Default Runtime: runc
</span><span class='line'>Security Options: seccomp
</span><span class='line'>Kernel Version: 4.4.20-moby
</span><span class='line'>Operating System: Alpine Linux v3.4
</span><span class='line'>OSType: linux
</span><span class='line'>Architecture: x86_64
</span><span class='line'>CPUs: 2
</span><span class='line'>Total Memory: 1.953 GiB
</span><span class='line'>Name: moby
</span><span class='line'>ID: W2PL:SOAQ:Y24X:VTFK:2Z3X:3CON:HWRK:7EMB:E2D4:EAPJ:NSKY:YHJ2
</span><span class='line'>Docker Root Dir: /var/lib/docker
</span><span class='line'>Debug Mode <span class="o">(</span>client<span class="o">)</span>: <span class="nb">false</span>
</span><span class='line'>Debug Mode <span class="o">(</span>server<span class="o">)</span>: <span class="nb">true</span>
</span><span class='line'>File Descriptors: 20
</span><span class='line'>Goroutines: 34
</span><span class='line'>System Time: 2016-11-07T07:45:16.819335883Z
</span><span class='line'>EventsListeners: 1
</span><span class='line'>No Proxy: *.local, 169.254/16
</span><span class='line'>Username: hoatle
</span><span class='line'>Registry: https://index.docker.io/v1/
</span><span class='line'>Insecure Registries:
</span><span class='line'>127.0.0.0/8
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose version
</span><span class='line'>docker-compose version 1.8.0, build f3628c7
</span><span class='line'>docker-py version: 1.9.0
</span><span class='line'>CPython version: 2.7.9
</span><span class='line'>OpenSSL version: OpenSSL 1.0.2h 3 May 2016
</span></code></pre></td></tr></table></div></figure>


<p>If you get the similar output, you&rsquo;re good to go to the next step.</p>

<h2>Git clone the project</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-clone.gif" title="React Project Git Clone" ></p>

<p>We&rsquo;re developing a React application named: &ldquo;my-app&rdquo;. Let&rsquo;s clone the starter project first:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p ~/teracy-dev/workspace
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/teracy-dev/workspace
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/hoatle/react-redux-universal-hot-example.git my-app
</span></code></pre></td></tr></table></div></figure>


<h2>Development</h2>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>Docker is really awesome to create an isolated consistent development and deployment environment and
it&rsquo;s super fast, too. We&rsquo;re leveraging Docker and Docker workflow for all our projects at Teracy,
both internal and outsourcing projects.
After cloning the starter project, let&rsquo;s start developing with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/teracy-dev/workspace/my-app
</span><span class='line'><span class="nv">$ </span>docker-compose pull <span class="o">&amp;&amp;</span> docker-compose up
</span></code></pre></td></tr></table></div></figure>


<p>If you get the following error output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ERROR: <span class="k">for </span>dev Cannot start service dev: driver failed programming external connectivity on endpoint myapp_dev_1 <span class="o">(</span>e2105083bdacaf5bb0684aa7a34ae0dc92b20cc748a31491368c7afa3e51da30<span class="o">)</span>: Error starting userland proxy: Bind <span class="k">for </span>0.0.0.0:3000 failed: port is already allocated
</span><span class='line'>ERROR: Encountered errors <span class="k">while </span>bringing up the project.
</span></code></pre></td></tr></table></div></figure>


<p>then make sure the port 3000 is available for &ldquo;my-app&rdquo; to use.</p>

<p>If you get the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>docker-compose pull <span class="o">&amp;&amp;</span> docker-compose up
</span><span class='line'>Pulling dev <span class="o">(</span>hoatle/react-redux-universal-hot-example:dev_latest<span class="o">)</span>...
</span><span class='line'>dev_latest: Pulling from hoatle/react-redux-universal-hot-example
</span><span class='line'>43c265008fae: Already exists
</span><span class='line'>af36d2c7a148: Already exists
</span><span class='line'>143e9d501644: Already exists
</span><span class='line'>df720fc8e4f1: Already exists
</span><span class='line'>eae19baa28ff: Already exists
</span><span class='line'>9004de327d6a: Already exists
</span><span class='line'>753292cc4b91: Already exists
</span><span class='line'>21edf49ccd04: Pull <span class="nb">complete</span>
</span><span class='line'>5571a198d5e5: Pull <span class="nb">complete</span>
</span><span class='line'>12965aa2aa24: Pull <span class="nb">complete</span>
</span><span class='line'>cd5c00a0e311: Pull <span class="nb">complete</span>
</span><span class='line'>5b4a21012860: Pull <span class="nb">complete</span>
</span><span class='line'>Digest: sha256:947e1889ff53d65cd2e9dd3357d45cf8714504995564e0a7183a5ff13a605ac0
</span><span class='line'>Status: Downloaded newer image <span class="k">for </span>hoatle/react-redux-universal-hot-example:dev_latest
</span><span class='line'>Creating myapp_dev_1
</span><span class='line'>Attaching to myapp_dev_1
</span><span class='line'>dev_1 | yarn install v0.16.1
</span><span class='line'>dev_1 | success Already up-to-date.
</span><span class='line'>dev_1 | Done in 0.31s.
</span><span class='line'>dev_1 | npm info it worked <span class="k">if </span>it ends with ok
</span><span class='line'>dev_1 | npm info using npm@3.10.8
</span><span class='line'>dev_1 | npm info using node@v6.9.1
</span><span class='line'>dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~predev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | &gt; numerologist-app@0.1.0-SNAPSHOT dev /opt/app
</span><span class='line'>dev_1 | &gt; concurrent --kill-others <span class="s2">&quot;npm run watch-client&quot;</span> <span class="s2">&quot;npm run start-dev&quot;</span> <span class="s2">&quot;npm run start-dev-api&quot;</span>
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | Warning: <span class="s2">&quot;concurrent&quot;</span> <span class="nb">command </span>is deprecated, use <span class="s2">&quot;concurrently&quot;</span> instead.
</span><span class='line'>dev_1 |
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info it worked <span class="k">if </span>it ends with ok
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm info using npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm info using node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> it worked <span class="k">if </span>it ends with
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> ok
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> using node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> it worked <span class="k">if </span>it ends with
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> ok
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm@3.10.8
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> using
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> node@v6.9.1
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~start-dev: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT start-dev /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> &gt; better-npm-run start-dev
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> Executing script: start-dev
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> to be executed: node ./bin/server.js
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~prewatch-client: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~watch-client: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT watch-client /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> &gt; better-npm-run watch-client
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev-api: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> npm
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> info
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> lifecycle
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> numerologist-app@0.1.0-SNAPSHOT~start-dev-api: numerologist-app@0.1.0-SNAPSHOT
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> &gt; numerologist-app@0.1.0-SNAPSHOT start-dev-api /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> &gt; better-npm-run start-dev-api
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Executing script: watch-client
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> to be executed: node webpack/webpack-dev-server.js
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> running better-npm-run in /opt/app
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> Executing script: start-dev-api
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> to be executed: node ./bin/api.js
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> <span class="o">==</span>&gt; 🚧 Webpack development server listening on port 3001
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> ----
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> <span class="o">==</span>&gt; 🌎 API is running on port 3030
</span><span class='line'>dev_1 | <span class="o">[</span>2<span class="o">]</span> <span class="o">==</span>&gt; 💻 Send requests to http://localhost:3030
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> ----
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> <span class="o">==</span>&gt; ✅ React Redux Example is running, talking to API server on 3030.
</span><span class='line'>dev_1 | <span class="o">[</span>1<span class="o">]</span> <span class="o">==</span>&gt; 💻 Open http://0.0.0.0:3000 in a browser to view the app.
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Hash: 4bfaa3d4b9c381888d2a
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Version: webpack 1.13.3
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Time: 44424ms
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> Asset Size Chunks Chunk Names
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> af7ae505a9eed503f8b8e6982036873e.woff2 77.2 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> f4769f9bdb7466be65088239c12046d1.eot 20.1 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> fa2772327f55d8198301fdb8bcfc8158.woff 23.4 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> e18bbf611f2a2e43afc071aa2f4e1512.ttf 45.4 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 89889688147bd7575d6327160d64e760.svg 109 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 674f50d287a8c48dc19ba404d20fe713.eot 166 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 448c34a56d699c29117adc64c43affeb.woff2 18 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> fee66e712a8a08eef5805a46892932ad.woff 98 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> b06871f281fee6b241d60582ae9369b9.ttf 166 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> 912ec66d7572ff821749319396470bde.svg 444 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> c29770d03d2e95e3ea5899d57c6cfeab.jpg 92.2 kB <span class="o">[</span>emitted<span class="o">]</span>
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> main-4bfaa3d4b9c381888d2a.js 9.61 MB 0 <span class="o">[</span>emitted<span class="o">]</span> main
</span><span class='line'>dev_1 | <span class="o">[</span>0<span class="o">]</span> webpack built 4bfaa3d4b9c381888d2a in 44424ms
</span></code></pre></td></tr></table></div></figure>


<p>Then it&rsquo;s good to go, open <a href="http://localhost:3000">http://localhost:3000</a> to see the starter project home page.</p>

<p>Try to make some changes to the source code, you should see the changes reflected immediately without
any page reloading, this is called hot module reloading, a really awesome feature to boost development
productivity.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/11/07/react-instant-changes.gif" title="React Project Instant Changes" ></p>

<h2>Deployment</h2>

<p>We&rsquo;re going to deploy the Docker image. There are guides that you can follow:</p>

<ul>
<li>Deploy on Heroku: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md</a></li>
<li>Simple deployment with docker-compose: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md</a></li>
</ul>


<p>There are many production best practices that we should improve for the starter project.</p>

<h2>CI (continuous integration) and CD (continuous delivery)</h2>

<p>By using CI and CD systems like travis-ci and gitlab-ci, we could stick to the following process:</p>

<ul>
<li>Pull request (merge request) is sent &ndash;> CI checks.</li>
<li>Code changes &ndash;> CI checks.</li>
<li>CI checking is passed, then CD starts.</li>
<li>CD will deploy automatically, for example, to Heroku or other providers or your in-house data
center.</li>
</ul>


<p>You can update all of these steps by adjusting the following files accordingly:</p>

<ul>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml</a></li>
</ul>


<p>At the CI checking step, we build Docker images (both development and production images):</p>

<ul>
<li><a href="https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/">https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry">https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry</a></li>
</ul>


<p>The development images install all development stuff (excluding the source code) so that
all the developers should have the same development environment as long as they&rsquo;re using the same
development image.</p>

<p>The production (distribution) images install and package all runtime stuff so that everyone could
run the applications right away with the same runtime environment.</p>

<p>You can see these CI systems in action:</p>

<ul>
<li><a href="https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds">https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines">https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines</a></li>
</ul>


<p>Building on travis-ci is super fast and it&rsquo;s very slow on gitlab-ci. However, using gitlab is free
for unlimited projects, it includes Docker registry for free, too.</p>

<p>You can install gitlab on your server, it should be faster but you have to pay for the devops
maintenance cost.</p>

<p>If you could pay for Docker Hub, Github and Travis-CI, it&rsquo;s super fast and convenient for development
without the devops maintenance cost.</p>

<p>Or even better, ping us for consulting :&ndash;).</p>

<h2>react-boilerplate introduction</h2>

<p><code>react-redux-universal-hot-example</code> is a good start, however, there are still many improvements that
we&rsquo;d like to add, for example:</p>

<ul>
<li>Better code and component organization convention. The Angular 2 convention is a really great
inspiration for this.</li>
<li>Update dependencies to latest versions.</li>
<li>Build the deployment Docker that should include runtime stuff only, not development stuff.</li>
<li>Server side code should be production ready and optimized.</li>
</ul>


<p>And there are more to do. So we intent to create a better <code>react-redux-universal-hot-example</code> version,
we call it <code>react-boilerplate</code>.</p>

<p>The project is located at: <a href="https://github.com/teracyhq/react-boilerplate">https://github.com/teracyhq/react-boilerplate</a> . We&rsquo;ll announce v0.1.0 as soon
as possible when it&rsquo;s ready. So stay tuned! At present we should use <code>react-redux-universal-hot-example</code>.</p>

<h2>React application consulting and developing service</h2>

<p>We&rsquo;re offering React application consulting and developing service.</p>

<p>If you want React development and production deployment help, don&rsquo;t hesitate to ping us. We&rsquo;re
eager to help you to develop world-class React applications with better and better developer experience
and production deployment.</p>

<h2>Learn more</h2>

<p>You should learn more about React at:</p>

<ul>
<li><a href="http://exploringjs.com/es6/">http://exploringjs.com/es6/</a></li>
<li><a href="https://github.com/veggiemonk/awesome-docker">https://github.com/veggiemonk/awesome-docker</a></li>
<li><a href="https://github.com/enaqx/awesome-react">https://github.com/enaqx/awesome-react</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example#about">https://github.com/hoatle/react-redux-universal-hot-example#about</a></li>
</ul>


<p>Hopefully, this is a good start for React newbies to explore the whole new world of modern web
application development.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cách tiếp cận tinh gọn để thẩm định sản phẩm (Phần 3)]]></title>
    <link href="http://blog.teracy.com/2016/10/28/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-3/"/>
    <updated>2016-10-28T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/28/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-3</id>
    <content type="html"><![CDATA[<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-2/">Phần 2</a> và là phần cuối cùng của bài viết &ldquo;Cách tiếp cận tinh gọn để thẩm định sản phẩm&rdquo;.</p>

<h1>Thẩm Định Sự Sẵn Sàng Chi Trả Của Người Dùng</h1>

<p>Có rất nhiều cách để thẩm định sự sẵn sàng chi trả của người dùng, nhưng một trong những thách thức lớn nhất đó là chúng ta không thể hoàn toàn tin tưởng vào lời nói. Chúng ta đều biết những người nói &ldquo;Tất nhiên, tôi hoàn toàn muốn làm điều đó!&rdquo; nhưng sau đó họ không giữ lời đến thời điểm cam kết. Chúng ta muốn có được những khách hàng chi tiền sau khi họ nói càng nhiều càng tốt.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/tham-dinh-su-san-sang-chi-tra.jpg" title="Thẩm định sự sẵn sàng chi trả" ></p>

<h2>CÁCH XÂY DỰNG MỘT TRANG WEB THẨM ĐỊNH</h2>

<p>Trang web chỉ cần có 1 trang duy nhất là cũng đủ để xác nhận, đặc biệt được coi là một bước đầu tiên. Nhưng nếu bạn muốn dần dần bổ sung thêm nhiều trang và nội dung để tăng tính chính xác và tìm hiểu thêm thì đó cũng là một lựa chọn.</p>

<p>Nếu bạn là dân kỹ thuật, bạn có thể tự thiết kế và lập trình trang web của mình, nhưng tốt hơn hết là hãy sử dựng công cụ xây dựng trang web có sẵn mẫu.</p>

<!-- more -->


<p>Dưới đây là một vài lựa chọn tốt để bạn xây dựng trang web thẩm định:</p>

<ul>
<li><a href="https://www.squarespace.com/">Squarespace</a> có một số thiết kế khá bắt mắt.</li>
<li><a href="https://webflow.com/">Webflow</a> cho phép rất nhiều tùy biến và phù hợp để thiết kế những trang web có 1 trang duy nhất.</li>
<li><a href="http://quickmvp.com/">QuickMVP</a> là một bộ công cụ rất hữu ích giúp tạo các landing pages để thẩm định các ý tưởng và sản phẩm. Nó đơn giản hóa quy trình tạo landing page, thiết lập quảng cáo và thu thập các số liệu thống kê.</li>
</ul>


<p>Bạn chắc chắn muốn có một vài thành phần trong trang web đơn giản của bạn.</p>

<ul>
<li>Hãy giải thích một cách rõ ràng và chính xác tính năng sản phẩm của bạn.</li>
<li>Làm nổi bật những lợi điểm bán hàng độc nhất</li>
<li>Giải quyết bất kỳ vấn đề quan trọng nào mà người dùng gặp phải trong quá trình kiểm thử. Nếu họ lo lắng về bảo mật, hiệu suất hay sự thoải mái thì hãy trình bày giải pháp của bạn với họ.</li>
<li>Hãy thu hút, lôi kéo người dùng đến khu vực kiểm tra và thanh toán trong trang web của bạn. Điều này cũng cần rõ ràng và dứt khoát, như là &ldquo;Mua ngay chỉ với $99!&rdquo;.</li>
<li>Hãy đảm bảo rằng trang thanh toán có biểu mẫu thu thập email, do đó bạn có thể thu thập được địa chỉ của các khách hàng tiềm năng. <a href="http://mailchimp.com/">MailChimp</a> là một lựa chọn tốt cho bạn.</li>
<li>Thay vì xác nhận đơn đặt hàng của người dùng, bạn nên phô ra trang &ldquo;Sorry&rdquo; giải thích với họ tại sao bạn tiến hành các thí nghiệm. Bằng cách này họ sẽ không bị kỳ vọng sai khi nhận sản phẩm.</li>
<li>Chạy phân tích trên trang web của bạn để theo dõi xem mọi người tương tác với trang web của bạn như thế nào. Bạn có thể dùng công cụ <a href="https://analytics.google.com/analytics/web/">Google Analytics</a>, nó rất đơn giản và miễn phí.</li>
</ul>


<p>Khi trang web thẩm định đi vào hoạt động, bạn sẽ cần thu hút nhiều người truy cập. Hãy cẩn trọng một chút khi làm điều này trong mạng lưới bạn bè và gia đình của bạn. Bạn đừng để rơi vào tình cảnh mọi người đưa ra phản hồi tích cực, đăng ký vào trang web của bạn chỉ vì họ biết bạn.</p>

<p>Kỹ thuật tốt nhất để mang đến lượng traffic chủ quan đến trang web của bạn đó là chi một ít tiền cho <a href="https://www.facebook.com/business/products/ads">Facebook Ads</a> hoặc chiến dịch quảng cáo của <a href="https://www.google.com/adwords/?subid=vn-en-or-ot-aw-c-dyn-www.smashingmagazine.com!o2">Google AdWords</a>.</p>

<p>Có thể bạn sẽ cần chi khoảng 100$ &ndash; 500$ cho vụ quảng cáo để có đủ người dùng truy nhập vào trang web của bạn để thẩm định. Chi phí này dường như cũng là khá tốn kém, đó cũng là lý do vì sao chúng tôi để giai đoạn thẩm định này ở gần cuối bài. Hãy suy nghĩ kỹ theo cách này, 100$ &ndash; 500% là chi phí an toàn và ít rủi ro hơn so với chi tiêu hàng ngàn đô la xây dựng một trang web thực sự. Hơn nữa, nếu ý tưởng sản phẩm mạnh mẽ thì số tiền này cũng không bị lãng phí. Bạn sẽ xây dựng được một danh sách lớn những người dùng quan tâm đến sản phẩm của bạn &ndash; có thể là những người sẽ đăng ký cho sản phẩm khi nó thực sự ra mắt.</p>

<p><a href="https://www.facebook.com/business">Facebook</a> và <a href="https://www.google.com/adwords/?subid=vn-en-or-ot-aw-c-dyn-www.smashingmagazine.com!o2">Google AdWords</a> có khả năng nhắm mục tiêu rất cao, cho phép bạn trình bày giải pháp của mình đến đúng đối tượng mà bạn muốn trong giai đoạn &ldquo;Thẩm định vấn đề&rdquo;. Bạn cũng có thể tối ưu quảng cáo của mình bằng cách xem xét kỹ các dữ liệu từ những quảng cáo ban đầu như: số lần click, like và share và nơi người dùng tương tác với nó. Bắt đầu một chiến dịch quảng cáo trên Google AdWords hoặc Facebook thực sự rất đơn giản. Chúng tôi sẽ không chỉ ra các bước cài đặt quảng cáo này ở đây, bạn có thể tìm kiếm bằng Google để biết làm thế nào tạo một chiến dịch quảng cáo nhanh.</p>

<p>Chúng tôi khuyên bạn nên để ý đến một vài số liệu:</p>

<ul>
<li><a href="https://www.smashingmagazine.com/2009/05/optimizing-conversion-rates-its-all-about-usability/">Tỷ lệ chuyển đổi</a></li>
<li>Có bao nhiêu khách đã cố gắng để mua được sản phẩm?</li>
<li>Tổng số &ldquo;bán hàng&rdquo;</li>
<li>Tìm hiểu xem doanh số bán hàng đến từ đâu (về mặt địa lý).</li>
<li>Tỷ lệ bỏ giỏ hàng</li>
</ul>


<p>Trong một gian hàng online thực tế, tỷ lệ rời bỏ giỏ hàng khoảng 60 &ndash; 80% (<a href="http://baymard.com/lists/cart-abandonment-rate">trung bình là 68%</a>). Điều này có nghĩa là sẽ có 7 trong số 10 người đến phần kiểm tra thanh toán nhưng không hoàn tất việc thanh toán.</p>

<p>Để tìm hiếu kỹ vấn đề này hơn, chúng tôi gợi ý bạn những điều sau đây:</p>

<ul>
<li><strong><a href="https://www.smashingmagazine.com/2010/06/the-ultimate-guide-to-a-b-testing/">A/B test</a></strong>: Thử nghiệm với các tiêu đề và nội dung khác nhau để xem chúng ảnh hưởng đến chuyển đổi như thế nào. Tuy nhiên, các phát hiện của bạn sẽ chỉ có ý nghĩa thống kê nếu như bạn hướng được hàng nghìn lượt truy cập vào trang web của bạn.</li>
<li><strong>Nói chuyện với khách hàng</strong>: Khi bạn thu thập địa chỉ email của ai đó, bạn sẽ có thể gửi tin nhắn hoặc bản tin cho họ và giải thích sản phẩm của bạn đang tiến triển thế nào. Tuy nhiên, bạn cũng có thể tiếp cận trực tiếp với họ và hỏi họ một vài câu hỏi để hiểu nhu cầu và động cơ của họ.</li>
</ul>


<h2>BẮT ĐẦU DỊCH VỤ CHĂM SÓC KHÁCH HÀNG</h2>

<p>Nguyên tắc cơ bản của dịch vụ chăm sóc khách hàng là trước khi thực sự xây dựng một phần mềm nào đó, bạn nên giả lập dịch vụ và tự thực hiện đặt đơn hàng.</p>

<p>Hãy xem một ví dụ khác từ thế giới thực. Giả sử chúng ta xây dựng <a href="https://hellopingpong.com/">PingPong</a> để giúp người dùng thu thập thông tin phản hồi và thực hiện các cuộc phỏng vấn. Công nghệ phía sau sản phảm này thực sự không phức tạp chút nào, nhưng đòi hỏi phải đầu tư vào thiết kế và phát triển để tung ra một sản phẩm hiệu quả. Rất nhiều công việc cần làm để có một sản phẩm thành công, nhưng ở giai đoạn đầu này, chúng ta vẫn còn nhiều giả định chưa được thẩm định về việc người dùng thực sự muốn gì.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/pingpong.png" title="Pingpong" ></p>

<p>Thay vì thực hiện tất cả mọi việc và xây dựng một dịch vụ mà người dùng có thể đăng ký trực tiếp và sử dụng, thì chúng ta sẽ  đi theo con đường chăm sóc khách hàng. Vì vậy, cách duy nhất đối với khách hàng trả tiền để đăng ký đó là ngay bây giờ chúng ta phải đồng ý với họ sẽ tự thực hiện đơn hàng của họ. Cuối cùng thì sản phẩm sẽ được tiếp nhận và thực hiện các việc này một cách tự động. Tất nhiên sẽ luôn luôn có rủi ro đó là dịch vụ hướng dẫn này sẽ không thể bao quát được hết các nhu cầu và bạn sẽ phải chuyển xuống cho khách hàng; đây là một vấn đề khác mà bạn cần giải quyết và đó là một vấn đề nghiêm trọng của bạn.</p>

<p>Điều này có thể giống như một cam kết về thời gian rất lớn, nhưng thực tế nó mang đến rất nhiều bài học quan trọng. Chúng tôi sẽ tự chạy dịch vụ ngay khi bắt đầu và xây dựng những mối quan hệ sâu sắc với một vài khách hàng đầu tiên của mình.  Bởi vì chúng tôi giao tiếp với họ nhiều, chúng tôi sẽ hỏi họ những câu hỏi liên quan đến nhu cầu và mong đợi của họ, sau đó sử dụng thông tin phản hồi của họ để tinh chỉnh mô hình kinh doanh của chúng tôi trước khi chúng tôi xây dựng một sản phẩm đầy đủ. Đây là một cách rất hay để thẩm định chính xác xem người dùng sẵn sàng chi trả cho cái gì và để tối đa hóa giá trị người dùng.</p>

<p>Thêm nữa, thực hiện dịch vụ chăm sóc khách hàng có nghĩa là bạn sẽ có thể kiếm tiền ngay lập tức.</p>

<h2>GIẢ LẬP LANDING PAGE</h2>

<p>Cách tốt nhất để thẩm định mà không có sự tham gia của những người không thực sự muốn trả tiền mua sản phẩm của bạn đó là xây dựng một trang web tiếp thị giả mạo.</p>

<p>Kỹ thuật này có vẻ như hơi gây ra hiểu lầm chút. Nhưng miễn là bạn không lấy tiền của mọi người cho những gì mà bạn không cung cấp cho họ, thường thì mọi người sẽ hiểu được động cơ của bạn.</p>

<p>Hãy xem <a href="https://checkmaid.com/">Check Maid</a>, dịch vụ trực tuyến để tìm kiếm và đặt dịch vụ lau dọn nhà cửa. Khi nhóm tạo trang web lần đầu, thực sự họ vẫn chưa đi vào kinh doanh. Người sáng lập Check Maid ông Alex Brola nói:</p>

<p><em>&ldquo;Chúng tôi thẩm định ý tưởng của mình mà không có lấy một nhân viên dọn dẹp vệ sinh nào cả. Chúng tôi đưa ra trang web, tạo một biểu mẫu đặt dịch vụ, số điện thoại và chạy một vài quảng cáo <a href="pay-per-clicks">trả tiền theo số lượt nhấp chuột</a> thông qua Google và Bing, và xem tỷ lệ chuyển đổi như thế nào để chúng tôi quyết định có thực sự cần những người người dọn vệ sinh hay không.&rdquo;</em></p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/gia-lap-landing-page.png" title="Gỉa lập landing page" ></p>

<p>Việc thẩm định sự sẵn sàng chi trả bằng cách sử dụng landing page giả lập sẽ thực sự là cái mà bạn phải quan tâm. Nếu bạn làm nó sai, bạn có thể phá hủy thương hiệu của bạn và làm cho người dùng vô cùng thất vọng.</p>

<p>Điều quan trọng là trình bày nội dung tiếp thị và hiển thị rõ ràng đường link &ldquo;Đăng ký&rdquo; hoặc &ldquo;Mua ngay&rdquo;. Khi người dùng click vào đường link này, bạn sẽ hiển thị một thông điệp giải thích tại sao dịch vụ vẫn chưa hoạt động, và đề nghị họ nhập địa chỉ email của họ để nhận thông tin cập nhật khi sản phẩm được tung ra. Hơn nữa, ý tưởng tốt là sẽ có phần thưởng cho những người dùng đầu tiên bằng cách nói với họ rằng họ sẽ được giảm giá hoặc những phần thưởng khác dành cho những người ủng hộ đầu tiên.</p>

<p>Chúng tôi khuyên bạn không nên đi đi xa hơn ngoài việc lưu trữ địa chỉ email của họ (để bạn có thể liên lạc với họ sau này) và có thể thông tin về khu vực họ ở nếu như có liên quan đến sản phẩm của bạn (để đánh giá nhu cầu sử dụng theo vùng). Hãy để họ biết được sản phẩm vẫn chưa được hoàn thành càng sớm càng tốt. Nhiều điều luật, đặc biệt là ở Châu Âu, cấm  quảng cáo gây hiểu lầm &ndash; thật cẩn thận để không thanh toán hay tiết lộ thông tin cá nhân nhạy cảm một cách nhầm lẫn.</p>

<p>Nếu bạn muốn tránh một trang langding page giả lập, bạn có thể lựa chọn theo cách chăm sóc khách hàng, cách này về mặt đạo đức mà nói thì ít nhạy cảm hơn và thường là một giải pháp thay thế rất tốt.</p>

<h1>Thẩm Định Một Vài Ý Tưởng</h1>

<p>Bây giờ bạn đã biết làm thế nào để thẩm định một ý tưởng của sản phẩm, cũng hãy tìm hiểu xem làm thế nào chúng ta có thể khám phá một vài ý tưởng sản phẩm:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/28/tham-dinh-mot-so-y-tuong.jpg" title="Thẩm định sản phẩm tinh gọn" ></p>

<p>Hãy xem 6 ý tưởng của chúng tôi được chỉ ra như thế nào khi chúng tôi đưa chúng vào trong quy trình thẩm định tinh gọn:</p>

<ol>
<li>Ý tưởng này thất bại ngay từ đầu vì chúng tôi không thể thẩm định được vấn đề.</li>
<li>Ý tưởng này thẩm định được vấn đề nhưng không thể xây dựng được thị trường.</li>
<li>Ý tưởng này thất bại khi thẩm định vấn đề.</li>
<li>Ý tưởng này thẩm định được vấn đề và thị trường nhưng nó lại không thể thẩm định được sản phẩm.</li>
<li>Đây là một vấn đề xoay quanh ý tưởng 4. Có thể nguyên mẫu đầu tiên của chúng tôi bị thất bại, vì vậy chúng tôi quyết định xây một nguyên mẫu mới. Lần này chúng tôi có thể học hỏi được vài điều từ những sai lầm của mình và thực hiện bước tiếp cận khác. Ý tưởng này thẩm định được sản phẩm, nhưng lại thất bại khi thẩm định sự sẵn sàng trả tiền mua sản phẩm của người dùng.</li>
<li>Ý tưởng cuối cùng là thẩm định cả 4 giai đoạn. Trong số những ý tưởng này thì đây là ý tưởng mà chúng ta cần tìm hiểu và phát triển xa hơn nữa.</li>
</ol>


<p>Bạn sẽ thấy, nhiều ý tưởng tuyệt vời của bạn bị thất bại ngay từ đầu trong quy trình này. Việc tìm ra vấn đề mà bạn cố gắng giải quyết đơn giản không phải là vấn đề của người dùng thực sự vô cùng phổ biến. Nhưng với sự kiên trì và lặp đi lặp lại, cuối cùng bạn sẽ có được ý tưởng sản phẩm được thẩm định.</p>

<p>Bạn có thể chú ý thấy rằng tính khả thi thẩm định ở mỗi giai đoạn khá thấp. Bạn có thể cần phải tinh chỉnh lại ý tưởng ban đầu của mình để giải quyết vấn đề cấp bách hơn mà bạn mới phát hiện ra. Điều này cũng thật tuyệt. Thực tế bạn luôn được khuyến khích như thế. Sự linh hoạt và luôn suy nghĩ thông thoáng về việc điều chỉnh ý tưởng có thể được trả xứng đáng nếu như làm đúng. Và đó cũng là lý do vì sao quy trình thẩm định tinh gọn đẩy bạn đến thất bại sớm và nhanh chóng trước khi bạn bị gắn chặt với ý tưởng hay sản phẩm của mình.</p>

<p>Lưu ý rằng các tiêu chí trên cùng với trình tự của chúng, tất cả đơn giản chỉ là hướng dẫn mang tính gợi ý. Mục tiêu cuối cùng là thật tinh gọn như có thể, và bạn sẽ đứng ở vị trí tốt nhất để quyêt định ý tưởng của mình có ý nghĩa gì.</p>

<h1>Tiếp Theo Là Gì?</h1>

<p>Thậm chí nếu bạn đã thẩm định xong tất cả các vấn đề thì cũng không thể đảm bảo được rằng sản phẩm của bạn sẽ thành công. Quy trình thẩm định chỉ mới là bắt đầu thôi. Tuy nhiên nếu bạn thực hiện đầy đủ quy trình này và hoàn thành tất cả các giai đoạn, thì bạn đã có một vị thế tốt rồi đấy.</p>

<p>Mục tiêu của quy trình thẩm định tinh gọn là giảm chi phí và thời gian lập trình. Đó là cách tốt nhất để bạn luôn tập trung, để tối thiểu hóa chi phí và tối đa hóa cơ hội thành công khi sản phẩm của bạn được tung ra.</p>

<p>Nếu bạn muốn tìm hiểu thêm thông tin, bạn có thể đọc <a href="http://theleanstartup.com/">Khởi nghiệp tinh gọn</a> (The Lean Startup) của Eric Reiss. Như tên cuốn sách đã gợi ý, &ldquo;Thẩm định tinh gọn&rdquo; thực sự ảnh hưởng lớn đến cách làm việc tinh gọn.</p>

<p>Bây giờ bạn đã thẩm định, bạn đã sẵn sàng để bắt đầu suy nghĩ về việc làm thế nào để biến sản phẩm thành hiện thực. Hãy bước nhanh lên, nhưng cũng hãy cẩn trọng nhé. Thường xuyên nói chuyện với người dùng của bạn và duy trì quy trình thật tinh gọn. Chúng tôi hi vọng bạn sẽ làm được những điều lớn lao trong tương lai.</p>

<p>Chúc bạn may mắn!</p>

<p>Dịch từ: <a href="https://www.smashingmagazine.com/2016/07/a-lean-approach-to-product-validation/">A lean apprroach to product validation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 1)]]></title>
    <link href="http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1/"/>
    <updated>2016-10-26T10:50:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/26/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-1</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/26/principles.jpg" title="Nguyên tắc thiết kế" ></p>

<p>Thiết kế không đơn giản chỉ là lắp ghép, xếp theo thứ tự hay thậm chí là sửa đổi. Thiết kế chính là hàm chứa giá trị và ý nghĩa, là sự minh hoạ, đơn giản hoá, làm sáng tỏ, chỉnh sửa, tạo giá trị, kịch tính, thuyết phục và thậm chí là lôi cuốn.</p>

<h1>01. Sự rõ ràng là điều quan trọng nhất</h1>

<p>Sự rõ ràng là điều quan trọng đầu tiên và cũng là quan trọng nhất của bất kỳ một giao diện nào. Một giao diện được thiết kế hiệu quả đó là mọi người phải có thể nhận biết được nó là gì, biết được vì sao họ nên sử dụng nó, biết được giao diện giúp họ tương tác với những gì, dự đoán được điều gì sẽ xảy ra khi họ sử dụng nó và sau đó là tương tác với giao diện thành công. Một giao diện có thể có chứa sự bí ẩn hay chưa mang lại sự hài lòng cho người dùng, nhưng sẽ không có chỗ cho sự nhầm lẫn. Tính minh bạch đem đến niềm tin cho người dùng và làm người dùng muốn tiếp tục sử dụng trong tương lai. Trăm màn hình rõ ràng còn hơn một tổ hợp màn hình lộn xộn.</p>

<!-- more -->


<h1>02. Giao diện mang đến sự tương tác</h1>

<p>Giao diện mang đến sự tương tác giữa con người và thế giới của chúng ta. Giao diện có thể giúp làm sáng tỏ, mở rộng và cho phép các mối liên hệ, mang chúng ta lại với nhau, kéo chúng ta xa nhau, quản lý kỳ vọng của chúng ta, và cho chúng ta tiếp cận với các dịch vụ. Hành động thiết kế giao diện không phải là Nghệ Thuật. Bản thân giao diện không phải là những công trình bất hủ. Giao diện có vai trò riêng và hiệu quả của giao diện có thể đo đếm được. Tuy nhiên, giao diện không chỉ là các tiện ích. Các giao diện tốt nhất có thể truyền cảm hứng, phát triển và tăng cường mối quan hệ của chúng ta với thế giới.</p>

<h1>03. Giữ sự tập trung bằng mọi giá</h1>

<p>Chúng ta đang sống trong một thế giới liên tục bị sao nhãng bởi nhiều mối quan tâm khác nhau. Thật khó để đọc trong yên bình mà không có bất cứ thứ gì làm chúng ta mất tập trung, và hướng sự chú ý của ta vào những điều khác. Tập trung là điều quý giá. Đừng thiết kế ứng dụng của bạn có những yếu tố làm xao nhãng người dùng&hellip; hãy nhớ tại sao màn hình tồn tại ở nơi đầu tiên. Nếu có ai đang đọc thì hãy để họ đọc xong đã trước khi phô bày quảng cáo (nếu bạn phải đưa quảng cáo vào). Đề cao sự tập trung không chỉ độc giả của bạn sẽ hạnh phúc hơn, mà kết quả của bạn cũng sẽ sẽ tốt hơn. Khi sử dụng là mục tiêu chính, sự tập trung là điều kiện tiên quyết. Hãy giữ gìn sự tập trung bằng mọi giá.</p>

<h1>04. Giữ sự kiểm soát cho người dùng</h1>

<p>Con người cảm thấy thoải mái nhất khi họ được kiểm soát bản thân và môi trường của họ. Phần mềm thiếu đầu tư làm mất đi sự thoải mái của người dùng bằng cách bắt người dùng chú ý vào các tương tác không có kế hoạch, làm người dùng bị nhầm lẫn và mang đến kết quả bất ngờ. Giữ cho người dùng trong kiểm soát bằng cách thường xuyên hiện lên tình trạng hệ thống, bằng cách mô tả nhân quả (nếu bạn làm điều này thì điều gì sẽ xảy ra) và cho họ hiểu rõ điều gì sẽ xảy ra với mỗi sự thay đổi. Đừng lo lắng về việc diễn tả quá rõ ràng&hellip; rõ ràng gần như là không bao giờ.</p>

<h1>05. Thao tác trực tiếp là tốt nhất</h1>

<p>Giao diện tốt nhất không phải là tất cả khi chúng ta có thể trực tiếp thao tác với các vật thể trong thế giới của chúng ta. Bởi vì điều này không phải luôn luôn khả thi, và các vật thể thì ngày càng chứa đựng thông tin nên chúng ta đã tạo ra các giao diện để có thể tương tác với chúng. Thật dễ dàng để thêm nhiều lớp hơn mức cần thiết vào một giao diện như tạo ra các nút nhấn, chrome, các đồ họa, các tùy chọn, sự ưu tiên, các cửa sổ, các file đính kèm, và mã lệnh khác, để chúng ta kết thúc thực hiện thao tác với các yếu tố của giao diện người dùng thay vì những gì quan trọng. Thay vào đó, cố gắng cho mục tiêu ban đầu là sự thao tác trực tiếp&hellip; thiết kế một giao diện với một dấu chân nhỏ nhất có thể, ghi nhận cử chỉ, điệu bộ của con người nhiều nhất có thể. Theo lý tưởng, giao diện quá nhẹ đến mức người dùng có cảm giác thao tác trực tiếp với vật thể trong sự tập trung của họ.</p>

<h1>06. Một hành động chính cho mỗi màn hình</h1>

<p>Mỗi màn hình mà chúng ta thiết kế nên hỗ trợ cho một hành động duy nhất có giá trị thực sự cho người sử dụng nó. Điều này làm cho màn hình dễ tìm hiểu hơn, dễ sử dụng hơn, và dễ dàng hơn khi thêm vào hoặc phát triển khi cần thiết. Màn hình hỗ trợ hai hay nhiều hành động chính thì sẽ nhanh chóng gây
ra nhầm lẫn. Giống như một bài viết thì nên có một luận điểm rõ ràng và duy nhất, mỗi màn hình chúng ta thiết kế nên hỗ trợ cho một hành động rõ ràng và duy nhất đó là điều đúng đắn.</p>

<h1>07. Đặt những hành động phụ ở vị trí thứ yếu</h1>

<p>Những màn hình với một hành động chính duy nhất có thể có nhiều hành động phụ, nhưng chúng cần phải được giữ ở vị trí thứ yếu! Lý do bài viết của bạn tồn tại không phải là để mọi người có thể chia sẻ nó trên Twitter&hellip; nó tồn tại là để cho mọi người đọc và hiểu nó. Giữ những hành động phụ bằng cách làm cho chúng ít được nhìn thấy hơn hoặc hiển thị sau khi đã đạt được hành động chính.</p>

<h1>08. Đưa ra bước tiếp theo tự nhiên</h1>

<p>Có quá ít tương tác thì dễ dẫn đến kết thúc, vì vậy cần thiết kế bước tiếp theo cho mỗi tương tác của người dùng với giao diện của bạn một cách cẩn thận. Dự tính trước sự tương tác tiếp theo sẽ nên là gì và thiết kế để hỗ trợ nó. Giống như chúng ta mong muốn trong cuộc trò chuyện của con người với nhau, gợi mở cho sự tương tác tiếp sau đó. Đừng để một người bị treo, bị đơ vì họ đã làm những gì bạn muốn họ làm&hellip; đưa ra cho họ bước tiếp theo tự nhiên để giúp họ tiếp tục đạt được những mục tiêu tiếp theo của mình.</p>

<h1>09. Vẻ bề ngoài theo sau hành vi </h1>

<p>Con người thoải mái nhất với những điều mà hành xử theo cách chúng ta mong đợi. Những người khác, những con vật, đồ vật, phần mềm. Khi một ai đó hoặc một cái gì đó hành xử một cách nhất quán với sự mong đợi của chúng ta, chúng ta cảm thấy như chúng ta có một mối quan hệ tốt với họ. Để làm được điều này thì các thành phần được thiết kế nên trông giống như cách chúng vận hành. Hình thức theo sau chức năng. Trong thực tế điều này có nghĩa là mọi người có thể dự đoán một yếu tố giao diện sẽ vận hành như thế nào chỉ bằng cách nhìn nó. Nếu nó trông giống như một cái nút thì nó phải hoạt động như một cái nút. Đừng làm cho những điều cơ bản của sự tương tác trở nên ngộ nghĩnh&hellip; Hãy giữ sự sáng tạo của bạn cho những mối quan tâm bậc cao hơn.</p>

<p>(Mời các bạn xem tiếp <a href="http://blog.teracy.com/2016/12/06/nguyen-tac-thiet-ke-giao-dien-nguoi-dung-phan-2/">Nguyên Tắc Thiết Kế Giao Diện Người Dùng (Phần 2)</a>)</p>

<p>Bài dịch từ <a href="http://bokardo.com/principles-of-user-interface-design/">Principles of User Interface Design</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cách tiếp cận tinh gọn để thẩm định sản phẩm (Phần 2)]]></title>
    <link href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-2/"/>
    <updated>2016-10-04T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-2</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-thi-truong.jpg" title="Thẩm định thị trường" ></p>

<p>Đây là phần tiếp theo của <a href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-1/">Phần 1</a>.</p>

<h1>Thẩm Định Thị Trường</h1>

<p>Một khi bạn đã nói chuyện với người sử dụng và thẩm định được vấn đề tồn tại, bạn cần phải chắc chắn thị trường đủ lớn để thực hiện ý tưởng của mình. Tìm hiểu người sử dụng sản phẩm của bạn sẽ đến từ đâu, và bao nhiêu doanh thu tiềm năng có trong các cơ hội thị trường?</p>

<p>Bằng cách thu thập càng nhiều thông tin càng tốt về thị trường tiềm năng, bạn sẽ có thể dự toán khoa học về quy mô của đối tượng khách hàng mục tiêu và số lượng khách hàng bạn có thể có được. Bằng cách thu thập này cũng sẽ giúp bạn tìm ra một cấu trúc giá cả tương đối cho các sản phẩm, điều này sẽ có giá trị khi bạn bắt đầu thực hiện kế hoạch tài chính khác.</p>

<!-- more -->


<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-thi-truong.jpg" title="Thẩm định thị trường" ></p>

<h2>THỊ TRƯỜNG CẦN PHẢI LỚN NHƯ THẾ NÀO?</h2>

<p>Nếu như bạn chỉ cần sản phẩm có doanh thu chỉ vài nghìn đô một tháng thì thị trưởng nhỏ cũng có thể đáp ứng được. Nhưng nếu bạn có tham vọng lớn và muốn doanh thu từ sản phẩm hàng tỷ đô la và trở thành nhà khởi nghiệp lớn mạnh tiếp theo, thì bạn sẽ cần phải đảm bảo tồn tại một thị trường lớn.</p>

<h2>&ldquo;NHƯNG TÔI SẼ TẠO RA THỊ TRƯỜNG CỦA RIÊNG TÔI!&rdquo; </h2>

<p>Điều đó là thật, đôi khi một sản phẩm thật sự sáng tạo sẽ tạo ra một thị trường hoàn toàn mới. Trước khi Whole Foods tồn tại, thị trường thực phẩm hữu cơ nhỏ hơn rất nhiều. Uber đã tạo ra một dịch vụ vận chuyển hoàn toàn mới theo yêu cầu bằng cách kết nối công nghệ và những người có ô tô.
Nếu thị trường có thể tạo ra, thì hãy thật cẩn thận về giả định rằng ý tưởng của riêng bạn sẽ có được một số phận tương tự. Nhìn sâu để hiểu và dự đoán thị trường. Tóm lại, để sản phẩm của bạn thành công, cuối cùng bạn sẽ phải tìm một thị trường cho sản phẩm. Hãy tiến hành một cách thận trọng!</p>

<p>Dưới đây là một vài công cụ bạn có thể sử dụng để thẩm định thị trường cho sản phẩm của bạn:</p>

<ul>
<li><p><a href="https://www.google.com/trends/">Google Trends</a> cho phép bạn so sánh số lượng tương đối các thuật ngữ tìm kiếm. Công cụ  này cho bạn biết nhu cầu đối với từng giai đoạn đã thay đổi trong 12 tháng qua.</p></li>
<li><p>Google AdWords&#8217; <a href="https://adwords.google.com/KeywordPlanner">Keyword Planner</a> tiết lộ lượt tìm kiếm trung bình hàng tháng cho một từ khóa nhất định. Công cụ này cũng cung cấp cho bạn một ước tính đối với đối thủ cạnh tranh và giá thầu đề nghị. Sử dụng dữ liệu này, bạn có thể ước tính được bạn sẽ kéo được bao nhiêu traffic đến trang web của bạn bằng cách sử dụng quảng cáo trả tiền của Google Adwords hoặc thông qua những kết quả hiện thị ngay trên đầu của công cụ tìm kiếm.</p></li>
</ul>


<p> <strong>Nghiên cứu kĩ đối thủ cạnh tranh</strong> cho phép bạn hiểu đối thủ cạnh tranh trong tương lai của bạn cũng đang cố gắng để giải quyết một vấn đề tương tự. Nếu bạn đang tập trung vào một thị trường nhỏ, chỉ việc tìm kiếm một đối thủ cạnh tranh là đủ. Nhưng nếu bạn đang tập trung vào một thị trường lớn hơn, bạn cần tìm kiếm thêm ít nhất ba đối thủ. Bên cạnh đó tìm kiếm đối thủ cạnh tranh trực tiếp, tìm kiếm những đối thủ cung cấp các sản phẩm và giải pháp tương tự. Sau đó, tìm hiểu càng nhiều càng tốt về đối thủ. Nghiên cứu hồ sơ của đối thủ, đọc blog và tìm kiếm thông tin của đối thủ trên các phương tiện truyền thông. Tìm hiểu về quy mô của đối thủ, phương pháp định giá, khả năng tài chính và tính năng sản phẩm.</p>

<ul>
<li><a href="https://moz.com/">Moz</a> có thể chạy kiểm tra nội dung trên các trang web đối thủ cạnh tranh giúp bạn biết đối thủ được xếp hạng như thế nào qua các từ khóa và phần nội dung nào của họ thủ được chia sẻ rộng rãi nhất. Tất cả điều này sẽ là thông tin có giá trị.</li>
</ul>


<h2>&ldquo;NẾU TÔI KHÔNG THỂ TÌM ĐƯỢC ĐỐI THỦ CẠNH TRANH NÀO?&rdquo;</h2>

<p>Nếu bạn không thể tìm thấy bất kỳ đối thủ cạnh tranh nào, thì rất có thể bạn đã hoặc là bị bỏ sót điều gì đó trong nghiên cứu của bạn hoặc bạn đang nghiên cứu trên một vấn đề mà không thực sự tồn tại. Tuy nhiên, có thể có ngoại lệ nếu bạn đang bắt đầu một doanh nghiệp rất nhỏ, doanh nghiệp của bạn có cơ hội không có đối thủ nào.</p>

<p>Một lĩnh vực khác cần xem xét khi tiến hành phân tích đối thủ cạnh tranh là các công ty có thể cố gắng để phát triển một cách nhanh chóng sản phẩm hoặc lĩnh vực dịch vụ mới khi mà tính thị trường của họ phát sinh tính cạnh tranh. Trong khi vấn đề này chưa phải là mối quan tâm cấp bách, thì bạn hãy bỏ tiền ra và nhanh chóng xác định xem ai sẽ là người tiếp theo cung cấp sản phẩm tương tự như của bạn vì vậy bạn mới có thể giành chiến thắng trên thị trường. Điều này sẽ giúp bạn chuẩn bị và đưa ra một kế hoạch để xử lý các tình huống phát sinh.</p>

<p>Khi bạn đã thẩm định được thị trường, bạn sẽ sẵn sàng chuyển sang phần thú vị: thẩm định sản phẩm.</p>

<h2>Thẩm Định Sản Phẩm</h2>

<p>Chỉ có một cách để đảm bảo sản phẩm của bạn giải quyết được vấn đề bạn đang tập trung là: bắt tay vào nghiên cứu và xây dựng một nguyên mẫu.</p>

<p>Nó không quan trọng nếu bạn không có nhiều kinh nghiệm về kỹ thuật, bạn <a href="https://m.hanno.co/the-last-thing-you-need-is-a-programmer-4f082ae16ec1#.spc8srnj8">không cần một kỹ sư xây dựng một nguyên mẫu tuyệt vời</a>. Thay vì chọn các kỹ thuật tạo mẫu đắt tiền và tốn thời gian, hãy giữ cho mọi thứ mạch lạc dễ hiểu.</p>

<p>Một khi bạn đã xây dựng nguyên mẫu, bạn sẽ bắt đầu thử nghiệm với người sử dụng để thu thập thông tin phản hồi và học hỏi từ người dùng càng nhiều càng tốt.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-san-pham.jpg" title="Thẩm định sản phẩm nhanh" ></p>

<h1>1. XÂY DỰNG NGUYÊN MẪU</h1>

<p>Ngay cả khi mục tiêu cuối cùng của bạn là xây dựng một trang web hoặc ứng dụng ưa thích, bạn không thực sự cần phải viết bất kỳ mã nào để xác nhận ý tưởng.</p>

<p>Khi bạn xây dựng mẫu, hãy thật sáng tạo! Xác định chính xác giá trị cốt lõi sản phẩm của bạn, và nghĩ ra cách để kiểm tra xem nó hoạt động theo cách đơn giản nhất có thể.</p>

<p>Giả sử ý tưởng sản phẩm của bạn là một loại thiết bị phần cứng và thiết bị phần mềm mới để giúp người dùng khiếm thị di chuyển trong nhà của họ. Định vị và bộ cảm biến độ gần sẽ xác định vị trí của người dùng, và một vành đai rung sẽ nói cho họ biết hướng đi mà họ cần để di chuyển trong nhà. Xây dựng một phiên bản thực tế của sản phẩm này sẽ rất tốn kém và tốn thời gian.</p>

<p>Hãy nghĩ đơn giản! Bạn có thể lập kế hoạch và chế tạo thử nghiệm ý tưởng trong 30 phút, mà không thực sự cần người dùng khiếm thị để thử nghiệm. Trong một thí nghiệm mẫu, chúng tôi đã thử nghiệm với một mẫu sản phẩm rất đơn giản: Chúng tôi bịt mắt một trong những thành viên trong nhóm của chúng tôi và mô phỏng sản phẩm bằng cách tác động trên eo của anh ta để mô phỏng những rung động của dây đai. Đó là một thiết lập vô cùng đơn giản, cho phép chúng tôi thực hiện các thử nghiệm cơ bản ban đầu của một ý tưởng sản phẩm và nhận được thông tin phản hồi ngay lập tức.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/xay-dung-nguyen-mau.jpg" title="Xây dựng nguyên mẫu" ></p>

<p>Nếu bạn hoàn toàn không quen thuộc với nguyên mẫu, và muốn tìm hiểu thêm trước khi bắt tay vào làm, hãy tham khảo các nguồn này:</p>

<ul>
<li>“<a href="https://www.smashingmagazine.com/2016/05/content-first-prototyping/">Content-First Prototyping</a>,” Andy Fitzgerald</li>
<li>“<a href="https://www.smashingmagazine.com/2014/10/the-skeptics-guide-to-low-fidelity-prototyping/">The Skeptic’s Guide to Low-Fidelity Prototyping</a>,” Laura Busche</li>
<li>“<a href="https://www.smashingmagazine.com/2014/09/prototyping-for-better-products-stronger-teams-and-happier-clients/">Prototyping for Better Products, Stronger Teams and Happier Clients</a>,” Scott Hurff</li>
</ul>


<h2>2.THỬ NGHIỆM NGUYÊN MẪU VỚI NGƯỜI SỬ DỤNG</h2>

<p>Thử nghiệm này có thể khiến bạn e dè, đặc biệt nếu trước đây bạn chưa thực hiện. Phải tìm kiếm người dùng ở đâu và chạy thử nghiệm với người dùng như thế nào buộc bạn phải &ldquo;công khai&rdquo; ý tưởng sản phẩm của bạn. Điều này khó khăn hơn nhiều so với làm việc trên bàn với ý tưởng giả định.
Một khi bạn đã thực hiện thử nghiệm với vài người dùng đầu tiên, bạn sẽ bắt đầu thấy quá trình thử nghiệm hoạt động như thế nào, không chỉ là khởi nguồn của việc hiểu vấn đề sâu sắc mà còn mang lại rất nhiều niềm vui.</p>

<h2>PHƯƠNG PHÁP THỬ NGHIỆM NGƯỜI DÙNG GẦN</h2>

<p>Việc tìm những người xung quanh bạn và để họ thành đối tượng thử nghiệm là một điểm khởi đầu tuyệt vời. Lý tưởng nhất là tìm được người dùng trong đối tượng mục tiêu của bạn &ndash; những người thực sự bị khiếm thị. Tuy nhiên, trong giai đoạn sớm của thử nghiệm, bạn có thể nhận được thông tin phản hồi hữu ích chỉ cần bằng cách thử nghiệm trên những người xung quanh bạn và chạy thử nghiệm đơn giản, như chúng ta đã thử nghiệm với những người khiếm thị.</p>

<p>Một khi bạn tìm hiểu thêm từ những thử nghiệm người dùng gần và có khả năng mô phỏng sản phẩm của bạn, xem xét đến các thông tin phản hồi bạn thu thập, bạn có thể tiếp tục thử nghiệm trên người sử dụng mục tiêu của bạn.</p>

<h2>THỬ NGHIỆM NGƯỜI DỤNG TỪ XA</h2>

<p>Nếu bạn không thể tìm thấy các đối tượng thử nghiệm hoàn hảo từ cộng đồng địa phương của bạn, có rất nhiều cách tuyệt vời để thử nghiệm với người dùng từ xa. Dưới đây là một vài công cụ để giúp bạn chạy thử nghiệm từ xa:</p>

<ul>
<li><a href="http://usertesting.com/">UserTesting</a></li>
</ul>


<p>Thử nghiệm tự động, &ldquo;không kiểm duyệt&rdquo; thay thế cho phỏng vấn người dùng bằng cách ghi lại trải nghiệm của người dùng trên màn hình khi họ sử dụng sản phẩm của bạn.</p>

<ul>
<li><a href="https://usabilityhub.com/">UsabilityHub</a></li>
</ul>


<p>Đây là cách nhanh chóng và tương đối rẻ để có được những hiểu biết và phản ứng từ một số người sử dụng về nguyên mẫu của bạn.</p>

<ul>
<li><a href="http://hellopingpong.com/">PingPong</a></li>
</ul>


<p>Là công cụ để lên lịch trình phỏng vấn bằng Skype với người dùng từ xa.</p>

<p>Mục đích của việc thẩm định sản phẩm cho dù từ xa hay trực tiếp là để đảm bảo rằng sản phẩm của bạn giúp giải quyết đúng vấn đề một cách hiệu quả nhất. Có nhiều khả năng bạn sẽ quản lý để làm điều này một cách hoàn hảo vào khoảng thời gian đầu &ndash; nhưng điều đó hoàn toàn tốt đẹp! Việc lặp đi lặp lại, chỉnh sửa và đào sâu là một phần tự nhiên của quá trình thẩm định sản phẩm và là một trong những lý do tại sao tạo mẫu là một kỹ thuật có giá trị như vậy.</p>

<p>Một khi bạn bắt đầu thu thập thông tin phản hồi tích cực mạnh mẽ từ người dùng mục tiêu bằng cách kiểm tra các mẫu thử nghiệm, đó là thời gian để chuyển sang giai đoạn cuối cùng của quá trình thẩm định tinh gọn.</p>

<p>(Mời bạn xem tiếp <a href="http://blog.teracy.com/2016/10/28/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-3/">Phần 3</a>)</p>

<p>Dịch từ: <a href="https://www.smashingmagazine.com/2016/07/a-lean-approach-to-product-validation/">A lean apprroach to product validation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cách tiếp cận tinh gọn để thẩm định sản phẩm (Phần 1)]]></title>
    <link href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-1/"/>
    <updated>2016-10-04T10:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-1</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-san-pham-tinh-gon.jpg" title="Thẩm định sản phẩm tinh gọn" ></p>

<p>Một trong những rủi ro lớn nhất khi xây dựng sản phẩm đó là xây dựng những điều sai. Bạn sẽ mất hàng tháng trời (thậm chí hàng năm) để xây dựng sản phẩm đó, chỉ tới khi nhận ra bạn không thể hoàn thành sản phẩm.</p>

<p>Tại <a href="https://hanno.co/">Hanno</a>, chúng tôi thấy điều này xảy ra thường xuyên. Đó là lí do tại sao chúng tôi đã tập hợp thành cuốn sách &ldquo;Thẩm định tinh gọn&rdquo; (Lean Validation Playbook).</p>

<h2>TẠI SAO CHÚNG TA CẦN THẨM ĐỊNH TINH GỌN</h2>

<p>Trong trường hợp này, thẩm định tinh gọn nghĩa là bạn sẽ đi lướt nhanh để xác định bạn sẽ làm sản phẩm gì và làm như thế nào với nguồn lực càng ít càng tốt. Nguồn lực này có thể bao gồm thời gian, tiền bạc và công sức. Phương pháp khởi nghiệp tinh gọn là chủ trương của Eric Reis, người có ảnh hưởng rất lớn đến cách chúng ta làm việc thông qua cuốn sách của ông &ldquo;<a href="https://theleanstartup.com/">Khởi nghiệp tinh gọn</a>&rdquo;.</p>

<p>Trong phần hướng dẫn ngắn này, bạn sẽ học được cách thẩm định sự phù hợp của sản phẩm với thị trường, khảo sát người dùng và sản phẩm dùng thử. Mục đích để đảm bảo ý tưởng sản phẩm đó khả thi, điều này giúp tiết kiệm thời gian và tiền bạc của bạn.</p>

<!-- more -->


<p>Cuối quá trình, bạn sẽ có thể tập trung vào việc xây dựng sản phẩm và tự tin rằng bạn có cơ hội thành công cao hơn!</p>

<p>Bạn đã sẵn sang chưa? Chúng ta bắt đầu nhé.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-san-pham-tinh-gon.jpg" title="Thẩm định sản phẩm tinh gọn" ></p>

<h1>Quy Trình Tiến Hành </h1>

<p>Quy trình thẩm định tinh gọn gồm có 4 bước riêng biệt. Chỉ khi bạn đã thực hiện tất cả 4 bước bạn mới có thể tự tin rằng ý tưởng sản phẩm đáng để phát triển.</p>

<p><strong>1. Thẩm định vấn đề</strong></p>

<p>Vấn đề gặp phải có đáng để xử lí không? Nếu người dùng không nghĩ đây là vần đề chính thì bạn có thể không cần đưa ra giải pháp.</p>

<p><strong>2. Đánh giá thị trường</strong></p>

<p>Một số người dùng có thể đồng ý rằng đây là vấn đề đáng để xử lí. Nhưng liệu có đủ để sản phẩm của bạn có chỗ đứng trên thị trường?</p>

<p><strong>3. Thẩm định sản phẩm</strong></p>

<p>Vấn đề có thể tồn tại nhưng sản phẩm của bạn có thực sự xử lí được vấn đề đó?</p>

<p><strong>4. Thẩm định sự sẵn lòng chi trả</strong></p>

<p>Có thể thị trường có nhu cầu và sản phẩm của bạn rất tuyệt vời. Nhưng liệu mọi người có sẵn sằng trả tiền mua sản phẩm đó không?</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/quy-trinh-tham-dinh-san-pham.jpg" title="Quy trình thẩm định sản phẩm" ></p>

<h2>ĐIỀU GÌ XẢY RA NẾU Ý TƯỞNG CỦA BẠN ĐÁP ỨNG TẤT CẢ BỐN TIÊU CHÍ TRÊN? </h2>

<p>Nếu ý tưởng đáp ứng cả bốn tiêu chí thẩm định thì bạn có thể thoải mái phát triển sản phẩm nếu bạn muốn. Nhưng bạn có thể cân nhắc kỹ hơn thay vì chọn phát triển sản phẩm luôn.</p>

<p>Qua quá trình thẩm định tinh gọn, bạn chắc chắn nhận được rất nhiều thông tin phản hồi từ người sử dụng. Với sự hiểu biết sâu sắc hơn, bạn sẽ nhận ra có cơ hội giải quyết tốt hơn. Trong trường hợp này, bạn sẽ thấy dễ dàng để tập trung vào sản phẩm.</p>

<p>Nếu bạn làm theo cách này, bạn có thể lặp lại quá trình thẩm định tinh gọn với ý tưởng sản phẩm đã cải tiến.</p>

<p>Dù bằng cách nào, bạn có thể tự tin rằng bạn đang có một ý tưởng tốt để phát triển sản phẩm.</p>

<h1>Thẩm Định Vấn Đề</h1>

<p>Cho dù bạn có tự tin về ý tưởng sản phẩm như nào chăng nữa thì điều đầu tiên bạn cần là xác định liệu vấn đề đó có thực sự cần giải quyết. Để làm được điều này, lựa chọn tốt nhất của bạn là nói chuyện trực tiếp với người sử dụng tiềm năng. Trọng tâm ở đây là về việc đánh giá chất lượng các ý tưởng sản phẩm.</p>

<p>Đầu tiên, chúng ta bắt đầu với một số lượng nhỏ người dùng đại diện phù hợp và xác định xem vấn đề đó họ có gặp phải không. Sau đó chúng ta <a href="https://leanstack.com/pivot-before-productmarket-fit-optimize-after/">tối ưu hóa và xác định</a> vấn đề này với nhiều người dùng hơn và ở quy mô lớn hơn.</p>

<p>Những điều bạn thu được từ các cuộc phỏng vấn này sẽ giúp bạn tự tin để thúc đẩy ý tưởng của mình tiến xa hơn. Hoặc nó cũng sẽ cho bạn thấy rằng bạn cần phải đào sâu ý tưởng khi bạn tìm hiểu thêm những vấn đề cơ bản thực sự.</p>

<p>Ba kỹ thuật được miêu tả dưới đây có thể dùng riêng biệt, nhưng chúng tạo thành một bộ các phương pháp có thể cung cấp một hình ảnh tốt hơn về vấn đề mà bạn đang cố gắng thẩm định.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/10/04/tham-dinh-van-de.jpg" title="Thẩm định vấn đề" ></p>

<h2>PHƯƠNG PHÁP 1: TÌM NĂM NGƯỜI THAM GIA THỬ NGHIỆM</h2>

<p>Việc tìm được ít nhất 5 người nói rằng họ muốn sử dụng sản phẩm giả thuyết của bạn là một dấu hiệu hợp lý chỉ ra rằng bạn có vấn đề rất đáng giải quyết. Trong khi điều này cũng không nhất thiết đảm bảo được vấn đề thực sự tồn tại hay giải pháp đề xuất của bạn là tốt hoặc đáng giá, nhưng đó là cách đơn giản nhất để bắt đầu thẩm định vấn đề của bạn.</p>

<p>Dưới đây là một ví dụ từ Rob Walling, nhà sáng lập công cụ thư thương mại Drip:</p>

<p>&ldquo;Tôi muốn tìm 10 người có thể sẵn sàng trả một số tiền nhất định để mua sản phẩm khi nó đã hoàn thiện. Điều này buộc tôi không phải chỉ suy nghĩ về tính năng, mà còn phải chắt lọc những ý tưởng để có được giá trị cốt lõi của nó: đây là lý do duy nhất một người nào đó sẽ sẵn sàng trả tiền cho tôi để mua sản phẩm. Tôi gửi email nói về giá trị cốt lõi ý tưởng của mình cho 17 người mà tôi biết hoặc ít nhất là có nghe nói họ gặp vấn đề tương tự. Bằng cách này, tôi không chỉ có khách hàng đầu tiên có thể cung cấp cho tôi thông tin phản hồi chi tiết về cách công cụ Drip hoạt động, mà tôi còn có được sự khởi đầu cho nền tảng doanh thu ban đầu để sử dụng phát triển sản phẩm.&rdquo;</p>

<p>Nếu bạn có thể xây dựng một mối quan hệ tốt với những người sử dụng này và lưu giữ thông tin liên lạc của họ, họ thậm chí có thể sẵn sàng là năm khách hàng đầu tiên của bạn.</p>

<h2>PHƯƠNG PHÁP 2: PHỎNG VẤN NGƯỜI SỬ DỤNG</h2>

<p>Bằng cách ngồi xuống và nói chuyện với người dùng, bạn sẽ có thể hiểu nhiều hơn về vấn đề của bạn và người dùng của bạn. Trọng tâm ở đây là để hiểu những động cơ và nhu cầu của mỗi người dùng tiềm năng mà bạn nói chuyện và sử dụng thông tin phản hồi để cải thiện sản phẩm.</p>

<p>Lý tưởng nhất, bạn sẽ muốn có cả một người phỏng vấn và một ngưới quan sát có trong buổi phỏng vấn. Trong khi người phỏng vấn trao đổi với người sử dụng, người quan sát sẽ ghi chép.</p>

<p>Một số hoạt động tốt cho một cuộc phỏng vấn hiệu quả bao gồm việc khuyến khích người tham gia chia sẻ kinh nghiệm trong quá khứ cũng như nhu cầu và thách thức hiện tại của họ. Hỏi người tham gia đã cố gắng như nào để giải quyết vấn đề cụ thể này trong quá khứ và kết quả đạt được. Nói về điều này theo quan điểm cá nhân cho phép người tham gia biểu lộ cảm xúc, điều này cung cấp cho bạn cái nhìn sâu sắc hơn về động cơ người dùng và giúp bạn đồng cảm với nhu cầu của họ.</p>

<p>Ngoài ra, tránh hỏi người được phỏng vấn muốn điều gì. Thật khó cho người được phỏng vấn chia sẻ chính xác họ muốn gì. Sẽ dễ dàng hơn để người được phỏng vấn nói với bạn những gì họ đang cố gắng để đạt được và bạn có thể hỏi về động cơ của họ sau cuộc phỏng vấn này. Có được những thông tin này cho phép bạn đánh giá liệu ý tưởng sản phẩm của bạn có giải quyết được nhu cầu cụ thể đó không hay liệu bạn cần phải sửa đổi ý tưởng một chút để giải quyết được vấn đề cấp bách hơn.</p>

<p>Một vấn đề nữa trong phỏng vấn người dùng đó là các câu hỏi mang tính hướng dẫn, gợi ý. Đây là những câu hỏi được đặt ra với những giả định của người phỏng vấn, có thể dẫn đến kết quả sai. Hãy giữ các câu hỏi khách quan và kết thúc mở &ndash; kiểu như, &ldquo;Ấn tượng của bạn khi sử dụng tính năng X là gì?&rdquo; thay vì &ldquo;Mức độ dễ dàng để sử dụng tính năng X để điều hướng ra sao?&rdquo;. Chúng tôi đã biên soạn  <a href="https://logbook.hanno.co/7-best-practises-for-better-user-interviews/">những chỉ dẫn hữu ích hơn</a> để thực hiện tốt nhất cho các cuộc phỏng vấn người sử dụng.</p>

<h2>PHƯƠNG PHÁP 3: NGHIÊN CỨU VỀ BẢN NGÃ</h2>

<p>Bản ngã thường được mô tả như là quá trình khám phá điều chưa biết. Trong nghiên cứu bản ngã, bạn sẽ đóng vai trò của nhà thám hiểm dũng cảm và đi du lịch để khám phá môi trường làm việc cũng như môi trường sống thực tế của người dùng. Đây là hình thức nghiên cứu rất tốt để quan sát và tìm hiểu về hành vi (Bạn làm gì?), động lực (Tại sao bạn làm điều đó?) và nhận thức (Làm thế nào để bạn nghĩ về những gì bạn cần và những gì bạn làm?).</p>

<p>Phương pháp này đưa ra cái nhìn sâu sắc vào bối cảnh, có thể là khó khăn để có được kết quả, song là phương pháp kiểm tra chính thức. Tìm hiểu về bối cảnh này giúp chúng ta hiểu những ảnh hưởng đến kinh nghiệm người dùng, đặc biệt là bên ngoài điều kiện phòng thí nghiệm, cuộc phỏng vấn và kiểm tra được giám sát.</p>

<p>Chìa khóa ở đây là để phát hiện và nắm bắt được khoảnh khắc trong khi khám phá những động cơ thúc đẩy của người sử dụng.</p>

<p>Hãy tưởng tượng rằng bạn đang xây dựng một sản phẩm để cải thiện phong thái làm việc của nhân viên văn phòng. Nghiên cứu môi trường tự nhiên sẽ là một công cụ có giá trị, thậm chí còn giá trị hơn so với các cuộc phỏng vấn người sử dụng. Bạn sẽ tự đặt mục tiêu cho mình là đến tận các văn phòng để quan sát người dùng, và xem liệu vấn đề còn tồn tại hay không. Bạn cũng có thể tới quan sát một loạt các cơ quan khác nhau, văn phòng khởi nghiệp, không gian làm việc nhóm, cũng như các văn phòng lớn điển hình.</p>

<p>Tiến hành nghiên cứu môi trường tự nhiên sẽ giúp bạn xem liệu vấn đề có tồn tại và thậm chí có thể phát hiện ra những vấn đề mới để bạn có thể đào sâu các ý tưởng. Nghiên cứu môi trường tự nhiên là một lĩnh vực phức tạp mà có thể đi xa hơn những gì chúng tôi đã đề cập đến cho đến nay. Hãy tìm hiểu kỹ hơn về phương pháp này bằng cách đọc thêm về nó tại <a href="https://en.wikipedia.org/wiki/Ethnography">đây</a>.</p>

<h2>TẠI SAO NHỮNG PHƯƠNG PHÁP NÀY QUAN TRỌNG?</h2>

<p>Bằng cách tập trung vào nghiên cứu người sử dụng, bạn có thể tránh được những sai lầm phổ biến như việc giả định các vấn đề bạn đang đối phó cũng là vấn đề của người khác gặp phải. Thông thường, chúng ta hay gặp những tình huống chẳng hạn như một nhà thiết kế nói rằng:&ldquo;Tôi giả định là người dùng cuối, vì vậy sẽ là an toàn khi thiết kế một cái gì đó dựa trên nhu cầu của riêng tôi. Dù ý tưởng của tôi là gì đi nữa thì ý tưởng đó sẽ phù hợp với những khuôn mẫu cho những người dùng khác. &#8220;Hãy nhớ rằng bạn không phải là người dùng của bạn. Bởi vì bạn biết quá rõ các vấn đề của sản phẩm, những giải pháp dường như là hoàn hảo với bạn lại có thể là giải pháp tồi tệ đối với hầu hết người dùng. Giải quyết các vấn đề mà bạn đã xác định cũng có nghĩa rằng bạn đã dành thời gian đáng kể tìm hiểu các chủ đề và có thể hiểu nó sâu hơn so với người dùng bình thường. Quan điểm của bạn về vấn đề này ngay bây giờ chỉ là ý kiến chủ quan, hơn tất cả đó là lí do tại sao bạn cần sử dụng ý kiến từ người sử dụng, để đảm bảo bạn đang giải quyết vấn đề đó một cách thực tế chứ không phải chỉ là từ ý kiến chủ quan của bạn.</p>

<p>(Mời bạn xem tiếp <a href="http://blog.teracy.com/2016/10/04/cach-tiep-can-tinh-gon-de-tham-dinh-san-pham-phan-2/">phần 2</a>)</p>

<p>Dịch từ: <a href="https://www.smashingmagazine.com/2016/07/a-lean-approach-to-product-validation/">A lean apprroach to product validation</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tập hợp những cuốn sách hay nên đọc về UX]]></title>
    <link href="http://blog.teracy.com/2016/10/02/tap-hop-nhung-cuon-sach-hay-nen-doc-ve-ux/"/>
    <updated>2016-10-02T16:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/10/02/tap-hop-nhung-cuon-sach-hay-nen-doc-ve-ux</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/10/02/ux-books.jpeg" title="Tập hợp những cuốn sách hay về UX" ></p>

<p>Đây là danh sách đọc dành cho bất cứ ai muốn học hoặc tìm hiểu sâu hơn về các lĩnh vực nghiên cứu người dùng, khả năng sử dụng, kiến trúc thông tin, thiết kế giao diện người dùng, thiết kế tương tác, chiến lược nội dung hoặc chiến lược kinh nghiệm.</p>

<p>Danh sách này rất rộng gồm những cuốn sách tiêu biểu về tư duy thiết kế, quy trình, phương pháp, nguyên tắc và các cách làm tốt nhất. Trong danh sách này có nhiều cuốn sách đã có cách đây hơn 20 năm, tuy nhiên nó vẫn phù hợp với hiện nay.</p>

<p>Mỗi cuốn sách đều có ảnh hưởng đến quan điểm của tôi, tạo ấn tượng cho tôi và giúp tôi thăng tiến trong sự nghiệp của mình. Những cuốn sách này cũng đã hình thành nên người thiết kế là tôi hôm nay và tạo cảm hứng thiết kế cho tôi mai sau.</p>

<p>Không có ngày nào tôi không tự suy nghĩ và áp dụng các ý tưởng từ những cuốn sách này cả. Tôi hy vọng rằng bạn cũng có thể tìm thấy giá trị như vậy nhờ những cuốn sách này.</p>

<!-- more -->


<h1>Top Mười Cuốn Sách Của Tôi</h1>

<ol>
<li><a href="http://amzn.com/0465050654">The Design of Everyday Things</a>, Donald Norman</li>
<li><a href="http://amzn.com/1118766571">About Face: The Essentials of Interaction Design</a>, Alan Cooper</li>
<li><a href="http://amzn.com/0321683684">The Elements of User Experience: User-Centered Design for the Web and Beyond</a>, Jesse James Garrett</li>
<li><a href="http://amzn.com/0596516835">Subject To Change: Creating Great Products &amp; Services for an Uncertain World</a>, Peter Merholz, Todd Wilkens, Brandon Schauer, David Verba</li>
<li><a href="http://uxmastery.com/practical-ia/">A Practical Guide to Information Architecture</a>, Donna Spencer</li>
<li><a href="http://amzn.com/0321712463">Communicating Design: Developing Web Site Documentation for Design and Planning</a>, Dan M. Brown</li>
<li><a href="http://amzn.com/0321918630">Designing Together: The collaboration and conflict management handbook for creative professionals</a>, Dan M. Brown</li>
<li><a href="http://amzn.com/0321725522">Seductive Interaction Design: Creating Playful, Fun, and Effective User Experiences</a>, Stephen Anderson</li>
<li><a href="http://amzn.com/0321767535">100 Things Every Designer Needs to Know About People</a>, Susan Weinschenk</li>
<li><a href="http://shapeofdesignbook.com/">The Shape of Design</a>, Frank Chimero</li>
</ol>


<h1>50 Cuốn Sách Cần Phải Đọc Về Tư Duy, Phương Pháp, Nguyên Tắc, Và Các Cách Làm Tốt Nhất</h1>

<p>Tôi thấy rất hữu ích khi lựa chọn nên đọc cái gì dựa trên những gì có liên quan vào thời điểm nào đó. Khi bạn nghĩ và làm, việc áp dụng những gì bạn đang đọc là một cách tuyệt vời để củng cố các khái niệm, phản ánh và học hỏi.</p>

<p>Tất cả các bài đọc dưới đây đều quan trọng, một số bài cũ và một số bài mới, không theo một thứ tự đặc biệt nào cả.</p>

<ul>
<li><a href="http://amzn.com/0596516258">Designing Web Interfaces: Principles and Patterns for Rich Interactions</a>, Bill Scott, Theresa Neil</li>
<li><a href="http://amzn.com/0262134721">The Laws of Simplicity (Simplicity: Design, Technology, Business, Life)</a>, John Maeda</li>
<li><a href="http://amzn.com/1491911689">Information Architecture for the World Wide Web: Designing for the Web and Beyond, Peter Morville, Louis Rosenfeld</a>, Jorge Arango</li>
<li><a href="http://amzn.com/0123740371">Sketching User Experiences: Getting the Design Right and the Right Design</a>, Bill Buxton</li>
<li><a href="http://amzn.com/1625274793">Well Designed: How to Use Empathy to Create Products People Love</a>, Jon Kolko</li>
<li><a href="http://amzn.com/0123809304">Thoughts on Interaction Design</a> của Jon Kolko</li>
<li><a href="http://amzn.com/1477800670">Manage Your Day-to-Day: Build Your Routine, Find Your Focus, and Sharpen Your Creative Mind</a>, Jocelyn K. Glei, 99u</li>
<li><a href="http://amzn.com/1591843162">Linchpin: Are You Indispensable?</a>, Seth Godin</li>
<li><a href="http://amzn.com/0321965515">Don’t Make Me Think</a> và <a href="http://amzn.com/0321657292">Rocket Surgery Made Easy</a>, Steve Krug</li>
<li><a href="http://amzn.com/1449379702">Designing Interfaces</a>, Jennifer Tidwell</li>
<li><a href="http://amzn.com/0470185481">Handbook of Usability Testing: How to Plan, Design, and Conduct Effective Tests</a>, Jeffrey Rubin, Dana Chisnell</li>
<li><a href="http://mitpress.mit.edu/books/designing-interactions">Designing Interactions</a>, Bill Moggridge</li>
<li><a href="https://www.amazon.com/dp/0961392142">The Visual Display of Quantitative Information</a> và <a href="https://www.amazon.com/dp/0961392118">Envisioning Information</a>, Edward R. Tufte</li>
<li><a href="http://amzn.com/0321815386">A Project Guide to UX Design: For user experience designers in the field or in the making</a>, Russ Unger &amp; Carolyn Chandler</li>
<li><a href="http://amzn.com/0596804172">Gamestorming: A Playbook for Innovators, Rulebreakers, and Changemakers</a>, Dave Gray, Sunni Brown, James Macanufo</li>
<li><a href="http://rosenfeldmedia.com/books/mental-models/">Mental Models: Aligning Design Strategy with Human Behavior</a>, Indi Young</li>
<li><a href="http://rosenfeldmedia.com/books/practical-empathy/">Practical Empathy: For Collaboration and Creativity in Your Work</a>, Indi Young</li>
<li><a href="http://rosenfeldmedia.com/books/interviewing-users/">Interviewing Users: How to Uncover Compelling Insights</a>, Steve Portigal</li>
<li><a href="http://rosenfeldmedia.com/books/the-mobile-frontier/">The Mobile Frontier: A Guide for Designing Mobile Experiences</a>, Rachel Hinman</li>
<li><a href="http://rosenfeldmedia.com/books/design-is-the-problem/">Design Is the Problem: The Future of Design Must be Sustainable</a>, Nathan Shedroff</li>
<li><a href="http://rosenfeldmedia.com/books/the-user-experience-team-of-one/">The User Experience Team of One: A Research and Design Survival Guide</a>, Leah Buley</li>
<li><a href="http://rosenfeldmedia.com/books/prototyping/">Prototyping: A Practitioner’s Guide</a>, Todd Zaki Warfel</li>
<li><a href="http://amzn.com/0321552342">Making Meaning: How Successful Businesses Deliver Meaningful Customer Experiences</a>, Steve Diller, Nathan Shedroff, Darrel Rhea</li>
<li><a href="http://amzn.com/0321808304">Content Strategy for the Web</a> của các tác giả Kristina Halvorson, Melissa Rach</li>
<li><a href="http://abookapart.com/products/responsive-web-design">Responsive Web Design</a>, Ethan Marcotte</li>
<li><a href="http://abookapart.com/products/just-enough-research">Just Enough Research</a>, Erika Hall</li>
<li><a href="http://abookapart.com/products/design-is-a-job">Design Is A Job</a>, Mike Monteiro</li>
<li><a href="http://abookapart.com/products/designing-for-emotion">Designing for Emotion</a>, Aaron Walter</li>
<li><a href="http://amzn.com/0124157815">Measuring the User Experience: Collecting, Analyzing, and Presenting Usability Metrics</a> của tác giả William Albert, Thomas Tullis</li>
<li><a href="http://amzn.com/1600617972">Creative Workshop: 80 Challenges to Sharpen Your Design Skills</a>, David Sherwin</li>
<li><a href="http://amzn.com/0123859301">Letting Go of The Words: Writing Web Content that Works</a>, Janice (Ginny) Redish</li>
<li><a href="http://amzn.com/0321749855">Designing the Obvious: A Common Sense Approach to Web Application Design</a>, Robert Hoekman Jr</li>
<li><a href="http://amzn.com/0321535081">Designing the Moment: Web Interface Design Concepts in Action</a>, Robert Hoekman Jr</li>
<li><a href="http://www.amazon.com/Designing-Social-Voices-That-Matter/dp/0321534921/">Designing for the Social Web</a>, Joshua Porter</li>
<li><a href="http://amzn.com/0321719905">Undercover User Experience Design</a>, Cennydd Bowles, James Box</li>
<li><a href="http://amzn.com/0321929039">Product Design for the Web: Principles of Designing and Releasing Web Products</a>, Randy Hunt</li>
<li><a href="http://amzn.com/0321537351">Designing the User Interface: Strategies for Effective Human-Computer Interaction</a>, Ben Shneiderman, Catherine Plaisant, Maxine Cohen, Steven Jacobs</li>
<li><a href="http://amzn.com/1118156307">This is Service Design Thinking: Basics, Tools, Cases</a>, Marc Stickdorn, Jakob Schneider</li>
<li><a href="http://amzn.com/0470632011">Resonate: Present Visual Stories That Transform Audiences</a>, Nancy Duarte</li>
<li><a href="http://amzn.com/0321898672">Metaskills: 5 Talents for the Robotic Age</a>, Marty Neumeier</li>
<li><a href="https://www.amazon.com/dp/0321348109/ref=cm_sw_su_dp">The Brand Gap: How to Bridge the Distance Between Business Strategy and Design</a>, Marty Neumeier</li>
<li><a href="https://gettingreal.37signals.com/">Getting Real</a> và <a href="https://www.amazon.com/dp/0307463745">Rework</a>, 37 Signals, Jason Fried, David Heinemeier Hansson</li>
<li><a href="https://www.amazon.com/dp/0801475090">Glut: Mastering Information through the Ages</a>, Alex Wright</li>
<li><a href="http://amzn.com/0201379376">The Humane Interface: New Directions for Designing Interactive Systems</a>, Jef Raskin</li>
<li><a href="http://amzn.com/0321616952">Designing with Web Standards</a>, Jeffrey Zeldman, Ethan Marcotte</li>
<li><a href="http://amzn.com/0321703545">Simple and Usable Web, Mobile, and Interaction Design</a>, Giles Colborne</li>
<li><a href="http://amzn.com/0596802277">Search Patterns: Design for Discovery</a>, Peter Morville, Jeffery Callender</li>
<li><a href="http://amzn.com/0465051367">Emotional Design: Why We Love (or Hate) Everyday Things</a>, Don Norman</li>
<li><a href="http://amzn.com/0321603605">Neuro Web Design: What Makes Them Click?</a>, Susan Weinschenk</li>
<li><a href="http://amzn.com/0470229101">Designing for the Digital Age: How to Create Human-Centered Products and Services</a>, Kim Goodwin</li>
<li><a href="http://rosenfeldmedia.com/books/a-web-for-everyone/">A Web For Everyone, Sarah Horton</a>, Whitney Quesenbery</li>
</ul>


<h1>Thật Hữu Ích Khi Đọc Nhiều</h1>

<p>Đọc sách chỉ là một phần tạo nguồn cảm hứng và học tập của tôi. Tôi cũng thường xuyên đọc các bài blog và báo. Tôi khuyên bạn hãy cập nhật các nguồn sau về tư duy lãnh đạo tuyệt vời:</p>

<ul>
<li><a href="http://www.peterme.com/">Peter Merholz</a></li>
<li><a href="https://medium.com/the-year-of-the-looking-glass">The Year of the Looking Glass</a>, Julie Zhou</li>
<li><a href="http://bokardo.com/about/">Bokardo</a>, Joshua Porter</li>
<li><a href="https://ia.net/know-how">Information Architects</a>, Oliver Reichenstein</li>
<li><a href="http://feltpresence.com/">Felt Presence</a>, Ryan Singer</li>
<li><a href="http://whitneyhess.com/blog/">Whitney Hess</a></li>
<li><a href="http://www.disambiguity.com/">Disambiguity</a>, Leisa Reichelt</li>
<li><a href="http://www.lukew.com/ff/">Form and Function</a>, Luke Wroblewski</li>
<li><a href="http://frankchimero.com/">Frank Chimero</a></li>
<li><a href="https://aralbalkan.com/">Aral Balkan</a></li>
<li><a href="http://davidcole.me/">David Cole</a></li>
<li><a href="http://sethgodin.typepad.com/">Seth Godin</a></li>
<li><a href="http://scottberkun.com/blog/">Scott Berkun</a></li>
<li><a href="http://blog.intercom.io/">Intercom</a></li>
<li><a href="https://library.gv.com/tagged/design">Google Ventures Design Library</a></li>
<li><a href="http://www.adaptivepath.com/ideas/">Adaptive Path</a></li>
<li><a href="http://boxesandarrows.com/">Boxes and Arrows</a></li>
<li><a href="http://www.uxmatters.com/">UXmatters</a></li>
<li><a href="http://www.uie.com/brainsparks/">UIE Brainsparks</a></li>
<li><a href="http://uxmag.com/">UX Magazine</a></li>
<li><a href="http://www.uxbooth.com/">UX Booth</a></li>
<li><a href="http://alistapart.com/">A List Apart</a></li>
<li><a href="http://www.smashingmagazine.com/">Smashing Magazine</a></li>
<li><a href="https://signalvnoise.com/">Signal vs. Noise</a>, Basecamp</li>
<li><a href="http://52weeksofux.com/">52 Weeks of UX</a></li>
</ul>


<p>Bài dịch từ <a href="https://medium.com/interactive-mind/the-only-ux-reading-list-ever-d420edb3f4ff#.m21ut2rer">The Only UX reading list ever</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những điều cần biết để xây dựng thử nghiệm người dùng hiệu quả]]></title>
    <link href="http://blog.teracy.com/2016/09/29/nhung-dieu-can-biet-de-xay-dung-thu-nghiem-nguoi-dung-hieu-qua/"/>
    <updated>2016-09-29T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/29/nhung-dieu-can-biet-de-xay-dung-thu-nghiem-nguoi-dung-hieu-qua</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/09/29/xay-dung-thu-nghiem-nguoi-dung.png" title="Xây dựng thử nghiệm người dùng" ></p>

<p>Gần đây số lượng các ứng dụng trong thị trường android và iOs đã vượt xa con số 8 triệu, ngoài ra còn
có một con số không giới hạn các trang web và các ứng dụng web đang xuất hiện khắp nơi trên thế giới
nữa. Với khối lượng khổng lồ các ứng dụng đó thì điều khan hiếm nhất là khoảng thời gian tập trung
của người dùng cho mỗi ứng dụng.</p>

<p>Thách thức lớn nhất trong thiết kế UX là thu hút được nhiều thời gian tập trung của người dùng.
Điều này đặt ra một thách thức với người chủ sở hữu sản phẩm và những người thiết kế UX làm sao thiết kế
ra những ứng dụng thu hút được sự chú ý và tham gia của người dùng.</p>

<!-- more -->


<h1>Tại sao thử nghiệm người dùng lại đặc biệt quan trọng như vậy</h1>

<p>Một trong những cách rất hiệu quả để đảm bảo chuyển đổi và tham gia tốt hơn là thực hiện &ldquo;thử nghiệm
người dùng&rdquo; (Hay đúng hơn là thử nghiệm khả năng sử dụng). Đó là một cách khoa học để tìm ra những gì
mà người dùng dễ dàng tìm thấy và những điều họ phải làm. Nghiên cứu về người dùng thường xuyên được
thảo luận bởi rất nhiều lãnh đạo nhóm thiết kế bao gồm <a href="https://medium.com/@ideo">IDEO</a>,
<a href="https://medium.com/@frogdesign">frog</a> và nhiều nhà thiết kế khác.</p>

<p>Chúng tôi đã quan sát một số những đội ngũ hàng đầu thế giới có kinh nghiệm thiết kế phục vụ hàng triệu
người dùng trên toàn cầu và đã rút ra được vài bài học nhanh chóng mà bạn có thể sử dụng trong nghiên
cứu người dùng sắp tới của mình:</p>

<h1>1. Biết được bạn đang mong muốn gì</h1>

<p>Thậm chí trước khi bạn nghĩ về thử nghiệm người dùng, bạn nên đặt ra cho mình một mục tiêu nào đó.
Các cách xây dựng mục tiêu có thể sẽ khác nhau nếu như bạn đang giải quyết vấn đề về thiết kế của
một ứng dụng hiện có hoặc khi bạn thẩm định một thiết kế hoàn toàn mới của một ứng dụng sắp được tung ra.</p>

<ul>
<li><strong>Đối với ứng dụng/trang web hiện có</strong>: Bạn có được những quan sát về các vấn đề thiết kế từ Google
Analytics, Mixpanel. Giải pháp của vấn đề này đó là bạn là người dùng thử nghiệm trên những thách thức
hiện tại trong khi khám phá các cách khác để cải thiện. Ví dụ: đối với ứng dụng thương mại điện tử,
người dùng có thể thêm một số sản phẩm vào giỏ hàng, nhưng họ sẽ quay lại để xem chi tiết sản phẩm thay vì thanh toán.</li>
</ul>


<p>Đối với những ứng dụng hiện có, cải thiện kết quả kinh doanh chính là mục tiêu chính của thử nghiệm người dùng.</p>

<p>Ví dụ, mục tiêu chính đối với ứng dụng hiện có trong ví dụ trên là chuyển từ giỏ hàng sang mục thanh toán.</p>

<ul>
<li><strong>Đối với ứng dụng/trang web sắp ra</strong>: với ứng dụng sắp được tung ra, bạn cần phải có giả thuyết thiết kế nhất định bao gồm: hướng dẫn thương hiệu, thành phần thiết kế&hellip; Ví dụ: với trường hợp ứng dụng âm nhạc, bạn đưa ra lựa chọn các tab cho các loại nhạc khác nhau thay vì dùng bộ lọc.
Đối với ứng dụng sắp ra, mục tiêu chính có thể là xác nhận các giả thuyết thiết kế.</li>
</ul>


<p>Trong ví dụ của chúng tôi, chúng tôi muốn xác nhận liệu người dùng sẽ sử dụng các tuỳ chọn để tìm các loại âm nhạc thay vì sử dụng bộ lọc.</p>

<p><strong>Việc thiết lập mục tiêu ngay từ đầu khi kiểm thử sẽ giúp bạn có những câu hỏi đúng</strong>.</p>

<h1>2. Tuyển chọn người dùng thử nghiệm cẩn thận</h1>

<p>Khi bạn đã quyết định được mục tiêu thử nghiệm người dùng, bạn cần phải kiểm tra người dùng để thực hiện
thử nghiệm người dùng. Khi một sản phẩm được xây dựng, bạn cũng đã có hồ sơ người dùng và bạn có một vài người dùng thực &ndash; những người muốn được xem các ứng dựng mới. Bạn có thể cùng họ thực hiện kiểm thử.</p>

<p>Mặc dù rất dễ dàng để kiểm thử với người dùng hiện tại nhưng cũng thật cẩn thận để loại bỏ thành kiến từ những trải nghiệm của họ.</p>

<p>Để giảm bớt thành kiến từ những kinh nghiệm sẵn có, bạn có thể muốn tạo một phiên bản đầy đủ các ứng dụng để làm cho toàn bộ trải nghiệm của họ tự nhiên hơn.</p>

<p>Bạn có thể muốn vẽ minh hoạ liên quan mật thiết tới người dùng của bạn.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/09/29/ho-so-nguoi-dung-cua-airbnb.jpeg" title="Hồ sơ người dùng của airbnb" ></p>

<p>Tuy nhiên, trong trường hợp của một ứng dụng mới, bạn hiểu vấn đề bạn sẽ phải giải quyết và giải
quyết cho ai. Hãy thu hẹp vấn đề càng nhỏ càng tốt. Dưới đây là một số câu hỏi mà bạn cần hỏi khi lựa
chọn người dùng mẫu cho thử nghiệm người dùng:</p>

<ul>
<li><p><strong>Liên quan</strong>: Ứng dụng của bạn có liên quan tới người dùng thử nghiệm không?</p></li>
<li><p><strong>Tần suất sử dụng</strong>: Người dùng này có thường xuyên sử dụng ứng dụng của bạn trong công việc mà người đó làm hay không?</p></li>
<li><p><strong>Nhân khẩu học</strong>: Sự khác biệt văn hoá là một yếu tố quan trọng đối với trải nghiệm của người dùng. Tập trung vào nơi ở, tuổi, giới tính khi lựa chọn người dùng mẫu.</p></li>
<li><p><strong>Mức thu nhập</strong>: Những người dùng này có sẵn sàng trả tiền để sử dụng ứng dụng/dịch vụ của bạn không? Điều này bao gồm cả khả năng tài chính và thói quen mua sắm.</p></li>
</ul>


<p>Bạn còn nghĩ ra được ý tưởng nào nữa không? Hãy cho chúng tôi biết nhé.</p>

<h1>3. Thời điểm nào thích hợp cho việc kiểm thử người dùng?</h1>

<p>&ldquo;Tôi sẽ đợi tới giao diện cuối cùng để tiến hành kiểm thử người dùng&rdquo;. Chủ sở hữu sản phẩm chỉ tiến hành kiểm thử người dùng khi họ có được phiên bản cuối cùng. Đó không phải là một ý hay, bởi vì khi đó bạn sẽ phải lặp lại hầu hết thời gian và công sức đã bỏ ra.
Lặp lại ngay khi có thể trong quy trình thiết kế để tiết kiệm thời gian và công sức.
<img class="center" src="http://blog.teracy.com/images/2016/09/29/quy-trinh-thiet-ke.jpeg" title="Quy trình thiết kế" ></p>

<p>Những mong đợi trong các giai đoạn khác nhau của quy trình kiểm thử người dùng.</p>

<ul>
<li><p><strong>Từ ý tưởng đến phác hoạ bằng tay</strong>: Thảo luận các ý kiến trên giấy bút hoặc trên bảng trắng. Tập hợp các phác hoạ bằng tay vào CanvasFlip và mời người dùng nội bộ kiểm thử.</p></li>
<li><p><strong>Từ phác họa bằng tay đến thiết kế khung sườn (wireframing)</strong>: Trong giai đoạn này, bạn gần như đã tạo được hình dáng phiên bản giao diện người dùng, xác định các icon và nhãn. Cách tốt nhất là giới thiệu chúng đến người dùng bên ngoài nhưng ở quy mô nhỏ.</p></li>
<li><p><strong>Từ thiết kế khung sườn đến mockup ban đầu</strong>: Khi bạn xây dựng các mockup, bạn nên giới thiệu chúng đến người dùng để thu được các trải nghiệm ban đầu. Bạn tiếp tục sửa đổi và đưa ra bản giao diện người dùng cuối cùng trên cơ sở nhận xét của người dùng ở giai đoạn này.</p></li>
</ul>


<p>Hầu hết các nhóm nổi tiếng đều sử dụng công cụ phân tích UX như CanvasFlip để tạo ra dòng UX tương tác (nguyên mẫu) và tạo ra bộ phân tích UX như video người dùng, quy trình chuyển đổi hình phễu, và bản đồ nhiệt tương tác.</p>

<h1>4. Mức độ tham gia của bạn như thế nào trong quá trình kiểm thử người dùng</h1>

<p>Luôn có sự đánh đổi giữa việc tạo ra một ngữ cảnh kiểm thử theo giời gian thực và việc quan sát người dùng.
Khi bạn quan sát người dùng chặt chẽ,họ sẽ càng có ý thức và đưa ra quyết định mang tính quyết đoán hơn so với bản năng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/09/29/kiem-thu-tinh-kha-dung.png" title="Kiểm thử tính khả dụng" ></p>

<p>Trên cơ sở mức độ tham gia của người dùng, có thực hiện 3 cách kiểm thử người dùng:</p>

<ul>
<li><p><strong>Kiểm duyệt tại chỗ</strong>: Trong giai đoạn này, bạn sẽ luôn ở cạnh người dùng, yêu cầu tiến hành các tác vụ, ra câu hỏi và quan sát phản ứng. Điều này sẽ có ích ở giai đoạn đầu phát triển thiết kế.</p></li>
<li><p><strong>Kiểm duyệt từ xa</strong>: Trong giai đoạn này, bạn có thể kết nối qua Skype, Google Hangout, Zoom hoặc Go-to-Meeting&hellip; Bạn có thể yêu cầu nhiệm vụ thực hiện và quan sát phản ứng. Nói chung là giữ cho sự tương tác càng ít càng tốt. Điều này hữu dụng trong giai đoạn dựng khung và thiết kế mockup.</p></li>
<li><p><strong>Không kiểm duyệt</strong>: đúng như tên của nó, một thử nghiệm người dùng không được kiểm duyệt được tiến hành mà gần như không có sự can thiệp nào. Người dùng được đưa cho một nguyên mẫu thiết kế (phototype) và yêu cầu chạy thử hoặc đưa ra một tác vụ để thực hiện. Ví dụ: Mua/tìm kiếm một item nào đó.</p></li>
</ul>


<h1>5. Cách phân tích kết quả thử nghiệm người dùng</h1>

<p>Khi bạn tiến hành thử nghiệm người dùng bằng bản thiết kế hiện có, bạn thường thực hiện với phần dễ trước. Tiếp đến sẽ là những phần quan trọng và phức tạp hơn &ndash; để phân tích kết quả kiểm thử người dùng, tìm ra những thứ cần loại bỏ và xem xét mức độ ảnh hưởng của các kết quả đó đối với thiết kế hiện tại.</p>

<p><strong>Phân tích kết quả thử nghiệm người dùng ở giai đoạn đầu</strong></p>

<p>Giai đoạn đầu thường tiến hành thử nghiệm người dùng ở mức có kiểm soát. Kết quả thu được thường mang tính chủ quan, qua đó có thể hiểu được mong đợi và hành vi của người dùng và trên cơ sở đó để xây dụng thiết kế. Khi đã hiểu được các tính năng, các mẫu thiết kế, các lựa chọn điều hướng, sơ đồ icon, ưu iên về font chữ, nhãn, bạn có thể xây dựng khung cho toàn bộ quy trình thiết kế còn lại.</p>

<p><strong>Phân tích kết quả thử nghiệm người dùng ở giai đoạn sau</strong></p>

<p>Khi nghiên cứu kết quả thử nghiệm người dùng ở giai đoạn sau, bạn buộc phải tuân theo thuyết thiết kế đã xây dựng ở giai đoạn trước. Các thuyết đó theo dạng &ldquo;chuyển đổi theo dòng UX&rdquo; hoặc &ldquo;Thẩm định CTA&rdquo; trong các thiết kế màn hình. Ví dụ, bạn muốn biết có bao nhiêu người dùng đã bỏ đi khi đã chọn xong sản phẩm và đang chuẩn bị sang bước thanh toán. Hay có bao nhiêu người dùng đã click vào &ldquo;Login&rdquo; CTA so với phần còn lại của màn hình.</p>

<p>Khi bạn hiểu được hành vi và mong đợi của người dùng, bạn sẽ có lựa chọn tốt hơn giữa thử nghiệm người dùng ở mức kiểm soát từ xa và không kiểm soát.</p>

<p>Công cụ kiểm thử tính khả dụng từ xa như Canvasflip có thể cung cấp rất nhiều thông tin hữu ích.</p>

<p><strong>Biết được người dùng sẽ bỏ UX-flow từ chỗ nào</strong></p>

<p>Trong kênh chuyển đổi trên (được tạo ra với CanvasFlip.com), bạn có thể thấy được sừ rời bỏ lớn tại vòng lặp thứ 1 trong màn hình &ldquo;Experiencies&rdquo;.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/09/29/quy-trinh-chuyen-doi-hinh-pheu.png" title="Quy trình chuyển đổi hình phễu" ></p>

<p><strong>Nơi người dùng tương tác nhiều nhất trong giao diện</strong></p>

<p>Một bản đồ nhiệt tương tác về thử nghiệm người dùng được tạo ra bởi CanvasFlip.com giúp bạn biết được khu vực tương tác thường xuyên của người dùng trong giao diện người dùng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/09/29/ban-do-nhiet-tuong-tac.png" title="Bản đồ nhiệt tương tác" ></p>

<p><strong>Phân tích hành trình của từng cá nhân người dùng</strong></p>

<p>Với CanvasFlip.com, bạn có thể phân tích được những điều hướng của người dùng và thời gian người dùng ở lại mỗi màn hình.
<img class="center" src="http://blog.teracy.com/images/2016/09/29/hanh-trinh-cua-nguoi-dung.png" title="Hành trình của người dùng" ></p>

<p><strong>Xem toàn bộ video phiên người dùng để phân tích và cải thiện hành vi người dùng</strong></p>

<p>Bạn có thể ghi lại các điều hướng người dùng, sau đó tìm ra nơi người dùng gặp vấn đề và tìm cách cải thiện trải nghiệm người dùng.
<img class="center" src="http://blog.teracy.com/images/2016/09/29/ghi-lai-dieu-huong-nguoi-dung.png" title="Ghi lại điều hướng người dùng" ></p>

<h1>Kết luận</h1>

<p>Với nỗ lực nhằm tạo ra một trải nghiệm người dùng tuyệt vời, cần phải tiến hành thử nghiệm người dùng và để thực hiện thử nghiệm hiệu quả, bạn phải biết cần gì/ sửa đổi gì, lựa chọn nhóm người dùng càng hẹp càng tốt, kiểm thử ngay từ lúc đầu, và sử dụng những thông tin hữu ích để rút ra kết luận từ kết quả thử nghiệm người dùng.</p>

<p>Bài dịch từ: <a href="https://blog.prototypr.io/everything-you-should-know-to-conduct-a-kickass-user-testing-89977e653123#.shhsbhhoy">Everything you should know to conduct a kickass user testing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to develop Angular 2 applications easily with Docker and angular-cli]]></title>
    <link href="http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli/"/>
    <updated>2016-09-22T12:44:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/09/22/angular-boilerplate.png" title="angular-boilerplate" ></p>

<p>Everyone who is new to Angular 2 usually has many difficulties to get started with it, even with the
getting started article from the Angular 2 official documentation. That&rsquo;s the reason why
<a href="https://cli.angular.io/">angular-cli</a> is created to ease the pain. <code>angular-cli</code> is a great CLI
tool, however, it takes a lot of time to get it working by installing nodejs and <code>angular-cli</code>.
Luckily, we&rsquo;ve created <a href="https://github.com/teracyhq/docker-angular-cli">docker-angular-cli</a> project
to build a Docker image so that anyone could use it right away for any Angular 2 projects without the
hassle of installing nodejs and <code>angular-cli</code>. This guide will help you get started in the most
easily and convenient way. It&rsquo;s assumed that you don&rsquo;t need to master Docker but only require that
Docker is installed on your machine and you could follow the instructions below.</p>

<!-- more -->


<h2>0. Prerequisites</h2>

<ul>
<li><p>You must set up <code>docker</code> and <code>docker-compose</code> easily with <code>teracy-dev</code> first:
<a href="http://blog.teracy.com/2016/12/20/teracy-dev-the-only-truly-universal-productive-development-platform-with-docker-on-macos-linux-and-windows/">teracy-dev &ndash; the only truly universal productive development platform with Docker on macOS, Linux and Windows!</a></p></li>
<li><p>After <code>teracy-dev</code> is set up, you already have <code>docker</code> and <code>docker-compose</code> installed.</p></li>
<li><p><code>docker-angular-cli</code> is tested with <code>Docker</code> v1.12.1 and <code>docker-compose</code> v1.8.0 with the native app
on Mac and on Ubuntu. It should work well on Windows, too.</p></li>
</ul>


<h2>1. Init a new project</h2>

<p>First, to init a new Angular 2 project, follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir new-ng-project
</span><span class='line'>$ cd new-ng-project
</span><span class='line'>$ docker run -it --rm -v "$PWD":/usr/src -w /usr/src teracy/angular-cli /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>After that, you should be presented with bash console for the docker container. Use <code>ng init</code> to
init a new project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># ng init --name &lt;project-name&gt; --style scss</span></code></pre></td></tr></table></div></figure>


<p>You should see the &lt;project-name> yourself. By default, the style file is <code>css</code>. I recommend using
<code>scss</code> extension for style files.</p>

<h2>2. Add Dockerfile and docker-compose.yml file</h2>

<p>Add Dockerfile and docker-compose.yml as I did with <a href="https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642">https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642</a></p>

<h2>3. Note for angular-boilerplate</h2>

<p>For easier setup with best practices, you can combine the 2 steps above (1 + 2) with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/teracyhq/angular-boilerplate.git --depth=1 new-ng-project</span></code></pre></td></tr></table></div></figure>


<p>More useful stuff will come to <a href="https://github.com/teracyhq/angular-boilerplate">angular-boilerplate</a>
later such as CI, CD, production deployment, server side rendering, desktop app and native apps, etc
best practices.</p>

<h2>4. Serve</h2>

<p>To start serving the web app, follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up serve</span></code></pre></td></tr></table></div></figure>


<p>and then open <a href="http://localhost:4200">http://localhost:4200</a> to see the web app.</p>

<h2>5. Test</h2>

<p>To run the unit test with Karma and Chrome, follow:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose up test</span></code></pre></td></tr></table></div></figure>


<p>and you should see the unit test running on Chrome browser pre-installed on the Docker image.</p>

<h2>6. Exec commands</h2>

<p>To exec some commands, for example:</p>

<p>for linting (code style checking):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose exec serve ng lint</span></code></pre></td></tr></table></div></figure>


<p>or for installing more npm packages:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose exec serve npm install</span></code></pre></td></tr></table></div></figure>


<p>or for running unit tests:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker-compose exec serve ng test --browsers Chrome_no_sandbox</span></code></pre></td></tr></table></div></figure>


<p>You can exec any commands on the running container.</p>

<h2>7. Develop</h2>

<p>Or if you want to open a new ssh session, open a new terminal window, and execute this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd new-ng-project
</span><span class='line'>$ docker-compose run serve /bin/bash</span></code></pre></td></tr></table></div></figure>


<p>and then you should see something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting virtual X frame buffer: Xvfb.
</span><span class='line'>Executing command /bin/bash
</span><span class='line'>root@6d15153f5858:~# </span></code></pre></td></tr></table></div></figure>


<p>And now you can execute any commands you want.</p>

<p>That&rsquo;s it. Now you should start developing Angular 2 applications more easily with <code>docker-compose</code>
and <code>angular-cli</code> by using <code>docker-angular-cli</code>.</p>

<p>You can follow the following tutorial to create a simple todo application: <a href="https://www.sitepoint.com/angular-2-tutorial/">https://www.sitepoint.com/angular-2-tutorial/</a></p>

<h2>8. Learn more</h2>

<ul>
<li><a href="https://github.com/AngularClass/awesome-angular2">https://github.com/AngularClass/awesome-angular2</a></li>
<li><a href="https://github.com/timjacobi/angular2-education">https://github.com/timjacobi/angular2-education</a></li>
</ul>


<p>If you need any consultancy or outsourcing, don&rsquo;t hesitate to contact us. We&rsquo;re eager to build world class web
applications for you!</p>

<p>Happy developing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cách xây dựng sản phẩm]]></title>
    <link href="http://blog.teracy.com/2016/09/01/cach-xay-dung-san-pham/"/>
    <updated>2016-09-01T16:56:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/01/cach-xay-dung-san-pham</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/09/15/looking-glass.jpg" title="Looking Glass" ></p>

<p style="text-align:center;"> <em>Ảnh của <a href="https://www.flickr.com/photos/corpz/5634268846/">Alex Kislow</a></em></p>

<p>Tôi vừa có dịp trình bày tại <a href="http://thenextweb.com/conference/europe/#gref">TNW Europe</a> về <a href="https://www.youtube.com/watch?v=IIm289_YMIE&amp;index=9&amp;list=PL3_sP0zWUT12Wi7nYBoejXjOA8srrTJgi">framework mà chúng tôi sử dụng tại Facebook để giúp chúng tôi tập trung vào tiến trình phát triển sản phẩm của mình</a>. Việc này đã giúp tôi suy nghĩ rất nhiều về những bài học mà bao năm qua tôi đã học được về việc cần có gì để có thể xây dựng được những sản phẩm tuyệt vời.
Danh sách sau đây chưa hoàn thành hoặc không chắc chắn là đúng, nếu mà có 1 danh sách hoàn hảo các bước cần làm (Bước<em> 1: Bắt đầu. </em>Bước<em> 2: ??? </em>Bước<em> 3: Thu tiền!</em>), thì có lẽ chúng tôi đã chi một khoản tiền cho nó xong rồi ngồi chờ xem các sản phẩm mới tuyệt vời đua nhau nở rộ như là vườn hoa tháng 5 rồi.
Cuộc du hành mới được 1% thôi, hãy cứ theo dõi và học hỏi nhé.</p>

<!-- more -->


<h4><strong>Tổng quát</strong></h4>

<ol>
<li><p>Sản phẩm có thành công vì nó giải quyết được vấn đề cho mọi người. Nghe thì rất căn bản, nhưng mà là thứ quan trọng duy nhất cần phải được hiểu để có thể xây dựng được sản phẩm chất lượng.</p></li>
<li><p>Bước đầu tiên khi làm cái gì đó mới là bạn phải hiểu được vấn đề cần phải giải quyết và giải quyết cho ai. Điều này khá rõ ràng và cần được làm rõ trước khi bạn nghĩ tới giải pháp nào.</p></li>
<li><p>Hãy tự hỏi bản thân &ldquo;Tại sao vấn đề này đáng được giải quyết?&rdquo;.</p></li>
<li><p>Nếu đối tượng bạn nhắm tới là 1 nhóm nhỏ xác định nào đó (bạn có thể nằm trong nhóm này), thì bạn có thể dựa vào trực giác của mình để tự đưa ra quyết định xây dựng sản phẩm nó như thế nào. Nếu không, thì bạn phải dựa vào các dữ liệu đã nghiên cứu để tạo quyết định cho mình.</p></li>
<li><p>Nếu bạn là người sáng lập (start-up founder), thì con đường sẽ dễ dàng hơn nếu bạn đi theo hướng giải quyết vấn đề cho một nhóm đối tượng khách hàng nào đó, sau đó sẽ mở rộng đối tượng khách hàng sau khi đã có một vài kết quả ban đầu.</p></li>
<li><p>Cái vấn đề mà bạn đang muốn giải quyết cần phải dễ dàng trao đổi, giao tiếp trong 1 vài câu ngắn gọn và được ủng hộ từ một ai đó trong nhóm đối tượng khách hàng của bạn, nếu không thì hãy cho nó là cái vấn đề nguy hiểm cần được quan tâm (<a href="http://www.urbandictionary.com/define.php?term=red%20flag">red flag</a>).</p></li>
</ol>


<h4><strong>Thực hiện</strong></h4>

<ol>
<li><p>Thực hiện tốt là có 1 cái kết luận đáng tin trong thời gian ngắn nhất có thể.</p></li>
<li><p>Thực hiện không tốt là khi bạn thử làm cái gì đó, nó thất bại và:</p>

<ol>
<li><p>Bạn không rút ra được bài học nào để có thể áp dụng vào các dự án tương lai (vì bạn không biết tại sao nó thất bại)</p></li>
<li><p>Bạn mất 1 năm để học được 1 bài học nào đó trong khi con đường thông minh hơn chỉ mất bạn 3 tháng.</p></li>
</ol>
</li>
<li><p>Vấn đề chủ yếu phân cách giữa 1 đội thành công và không thành công là không phải họ làm những việc có thất bại hay không (chuyện tất yếu sẽ xảy ra), mà là họ thực hiện nó kiên định như thế nào.</p></li>
<li><p>Khi truy tìm giải pháp cho 1 vấn đề nào đó, hãy đào rộng trước khi đào sâu. Thu thập ý kiến (Brainstorm) để tìm ra 10, 20, 50 giải pháp cho cái vấn đề đó trước khi chọn giải pháp tốt nhất. 5 ý tưởng đầu tiên sẽ là cái tất nhiên, sáng tạo sẽ xảy ra khi bạn đào sâu hơn vào ý tưởng 11, 20 hay 50.</p></li>
<li><p>Nếu bạn đang thuyết trình 1 bản kế hoạch sản phẩm và ai đó có hỏi &ldquo;Bạn có bao giờ thử giải pháp X thay cho cái này chưa?&rdquo; và câu trả lời của bạn là “Không&#8221; thì đó chính là cái dấu hiệu nguy hiểm <a href="http://www.urbandictionary.com/define.php?term=red%20flag">red flag</a> của quá trình khai thác ý tưởng và nó chưa đủ nghiêm ngặt.</p></li>
<li><p>Sử dụng kinh nghiệm đã trải qua để giúp bạn thu hẹp các ý tưởng tốt nhất. (Ví dụ như lựa chọn N ý tưởng của các thành viên trong nhóm, rồi phác thảo nó ra và cho mọi người xem rồi xem phản ứng của họ).</p></li>
<li><p>Khi bạn đã tìm được một giải pháp hãy đặt giả thuyết và tự hỏi điều gì sẽ xảy ra nếu bạn xây dựng theo cách như thế này? (ví dụ: &ldquo;Vấn đề mà chúng ta muốn xử lý đó là đảm bảo mọi công dân của thành phố biết được mỗi tuần sẽ có sự kiện nào đó xảy ra. Vậy thì giả thuyết sẽ là: chúng ta có thể thông báo cho X% công dân thông qua e-mail&rdquo;).</p></li>
<li><p>Bạn phải tìm được cách để rút ngắn công việc rà soát các giả thuyết của mình. Bạn có thể thực hiện nó với một ai đó bất kỳ và xem liệu họ có thể hiểu mình đang nói gì? Bạn có thể thu thập ý kiến khách hàng và xem có đủ lượng người có hứng thú với ý tưởng của mình hay không? Bạn có thể làm nhanh 1 sản phẩm để minh hoạ và sẽ cho bạn 1 kết quả rõ ràng cho dù nó chưa hoàn thiện?</p></li>
<li><p>Một khi bạn đã tìm được 1 giả thuyết hợp lý và rõ ràng, đừng cứ phải thử nghiệm nó ngay và luôn (vì có thể bạn tìm được 1 cách nào đó nhanh hơn), thay vào đó, hãy phân tách, hãy rà soát xem sản phẩm sẽ như thế nào khi nó được trau chuốt và thêm những tính năng mới, kiểm thử trường hợp khác nhau mà sản phẩm cần phải đạt được.</p></li>
<li><p>Nếu dự án bạn đang làm nó lớn và có rất nhiều sự thay đổi khác nhau, hãy xem mình có thể chia nó ra nhiều cột mốc nhỏ và độc lập và có thể kiểm thử được. Đừng để mình rơi vào trường hợp khi mà bạn thực hiện 5 thay đổi và có một phần thay đổi gây ra sản phẩm bị lỗi, khi đó bạn không thể biết lỗi bị gây ra bởi phần nào.</p></li>
<li><p>Tuỳ sản phẩm mà hãy xem xét và nhìn lại chúng, dù là thất bại hay thành công. Từ sản phẩm đó học được bài học gì? Đồng đội có học được gì hay không? Tương lai bạn có cần làm gì khác hơn? Sau đó hãy chia sẻ với tất cả người khác.</p></li>
</ol>


<h4><strong>Đo lường thành quả</strong></h4>

<ol>
<li><p>Làm thế nào để đo lường được thành công đối với kết quả lâu dài là điều rất quan trọng vì đó là cái mà mọi người mong đợi. Hãy chắc chắn thực hiện điều này vào đúng thời điểm (thậm chí còn quan trọng hơn cả việc bạn nghĩ &ldquo;Làm sao để làm được việc này?&rdquo;).</p></li>
<li><p>Hãy xác định các số liệu được cho là thành công cho sản phẩm trước khi chúng được tung ra. Nếu không, sau khi đã có kết quả sản phẩm và bạn cố gắng giải thích các kết quả đó sẽ làm cho việc đánh giá thành công của sản phẩm không còn khách quan nữa.</p></li>
<li><p>Với mỗi số liệu đạt được, hãy tạo ra 1 số liệu đối nghịch nào đó mà dựa vào đó có thể cho thấy sự việc này không phải là ngẫu nhiên mà ra (Ví dụ: Sản phẩm bán ra nhiều hơn là do chất lượng của sản phẩm đó tốt hơn)</p></li>
<li><p>Nếu có số liệu nào đó thay đổi đột ngột, dù tốt hay xấu, hãy đặt câu hỏi &ldquo;Tại sao?&rdquo; trước khi lập kế hoạch để thúc đẩy hay giảm thiểu kết quả đó khi bạn chưa hiểu vì sao nó lại như thế.</p></li>
<li><p>Hãy sử dụng công nghệ quả bóng thủy tinh (Crystal Ball) &ndash; phần mềm phân tích rủi ro để lựa chọn các cách đánh giá đúng sự thành công của sản phẩm. Hãy tự hỏi mình &ldquo;Nếu tôi có thể biết được tất cả về việc mọi người sử dụng sản phẩm của tôi ra sao, thì tôi muốn biết những gì về nó mà có thể biết được nó thành công hay không?&rdquo; Dựa vào câu trả lời đó rồi nhìn lại các số liệu thống kê gần với câu trả lời đó nhất.</p></li>
<li><p>Mục tiêu luôn luôn phải đi đôi với thông tin bạn tin tưởng nhất. Nếu bạn đang làm việc để đạt được 1 mục tiêu đã xác định nào đó, và rồi trong quá trình làm phát hiện những thông tin mới mẻ khiến bạn thay đổi cách suy nghĩ, hãy tự hỏi mình có nên điều chỉnh mục tiêu của mình hay không dựa trên luồng thông tin mới này.</p></li>
<li><p>Nếu bạn làm việc trong 1 đội nhóm nào đó nhưng mà bạn không đồng ý hay không hiểu gì về các đo lường thành quả của đội mình, hãy lên tiếng ngay và luôn, sớm còn hơn muộn khi mà mọi việc đã đâu vào đó.</p></li>
<li><p>Nếu bạn hay dính vào việc tranh cãi với các thành viên trong đội nhóm của mình về việc hướng đi cho sản phẩm, có thể lý do chính là do sự không hợp ý, không đồng tình về sự đo lường thành quả của nhau, hãy lên tiếng dựa trên 1 sự đề nghị nào đó hợp lý hơn.</p></li>
<li><p>Nếu bạn đang cố để tìm ra liệu sản phẩm của mình có hợp với thị trường hay không (so với việc cố gắng tối ưu hóa hoặc mở rộng), có lẽ bạn nên đặt mục tiêu vào việc giữ lại khách hàng, tự đặt câu hỏi &ldquo;có bao nhiêu người sử dụng sản phẩm của mình và thấy đủ tốt và quay lại dùng tiếp?&rdquo; thay vì hỏi rằng có bao nhiêu khách hàng.</p></li>
</ol>


<h4><strong>Đội nhóm cơ động</strong></h4>

<ol>
<li><p>Đừng nghĩ về vai trò của bạn (bạn là designer thì cần làm gì? bạn là kĩ sư thì cần làm gì?) mà hãy nghĩ rằng &ldquo;Tôi có thể làm gì tốt nhất để có thể giúp đội của mình thành công?&rdquo;</p></li>
<li><p>Các team ưu tiên tìm hiểu, giải quyết vấn đề có khả năng thành công cao hơn so với các team ưu tiên vào giải pháp. Bởi vì vấn đề cần giải quyết có tạo động lực, còn giải pháp thì có sẵn.</p></li>
<li><p>Cuối cùng thì mọi người luôn có 1 ý tưởng giống nhau đó là xây dựng 1 cái gì đó tuyệt vời.</p></li>
<li><p>Biết người biết ta, biết mình giỏi về cái gì, biết đồng đội giỏi về cái gì, rồi phân chia trách nhiệm cho mỗi người.</p></li>
<li><p>Một team tốt và tồn tại lâu dài cần phải giao tiếp tốt, mỗi thành viên cần phải cảm thấy rằng họ có thể thể hiện cảm nghĩ, sự nhìn nhận của mình, cho dù nó có hơi trái ngược, nhiều luồng ý kiến đa dạng là cách để đạt được kết quả tốt nhất. Cho nên đừng sợ hãi thể hiện ý kiến của mình, đừng sợ hãi lặp đi lặp lại ý kiến đó nếu những người khác chưa hiểu bạn muốn gì, hãy khuyến khích và cố gắng để đồng đội cảm thấy làm điều đó là an toàn.</p></li>
</ol>


<p>Bài dịch từ: <a href="https://medium.com/the-year-of-the-looking-glass/building-products-91aa93bea4bb#.kd7eag413">Building Products</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev vision]]></title>
    <link href="http://blog.teracy.com/2016/08/19/teracy-dev-vision/"/>
    <updated>2016-08-19T16:27:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/19/teracy-dev-vision</id>
    <content type="html"><![CDATA[<p>teracy-dev has been being developed and in use from the first days of Teracy, it&rsquo;s been
about 3 years<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> now. We&rsquo;re in a hurry for a really big, exciting release for the next version of
teracy-dev. I&rsquo;d like to take this chance to share with you about teracy-dev vision first and many
other new features and improvements for the next long awaiting teracy-dev release.</p>

<!-- more -->


<p>Let&rsquo;s get started with a story about my first working days as a developer when joining my first
company 8 years ago. As developers, it&rsquo;s expected that we should have our development environment
ready before starting coding. At that time, my company used Maven to build Java projects and I was
required to install it. However, as a junior, I had difficulties to install it on the Ubuntu
computer provided to me. I struggled with it for nearly a day and eventually I had to ask for
help to install it successfully. This is a true story. Now I can even install it in just some
minutes with a few lines of commands because I have more experience.</p>

<p>Now just imagine what if juniors don&rsquo;t have to set up these boring tools each by each but just enjoy
coding, that&rsquo;s the more fun part. What if all developers should have the same development environment
even they use different kinds of operating systems so that we don&rsquo;t have to deal with the very common
problem: &ldquo;But it works on my machine&rdquo;. What if the production environment is easily set up exactly
the same on a developer machine to debug and fix things and vice versa?</p>

<p>These what ifs lead us to use <code>vagrant</code> as the base to complete these things as the first days of
Teracy journey. We&rsquo;d like to upgrade the vagrant dev environment easily, for example, <code>$ git pull</code>
then <code>$ vagrant reload --provision</code> and you&rsquo;re done. We have default configuration and we could
override it easily. We&rsquo;d like to use this development environment for all our projects: from our
internal projects to our clients&#8217; projects.</p>

<p>We created teracy-dev to solve the mentioned problems above, help boost our productivity and it could
even help us more than that. Everyone just enjoys it, we don&rsquo;t have to deal with installing things
manually, it&rsquo;s auto provided with just one command (<code>$ vagrant up</code>) thanks to the provision software.
We&rsquo;re using Chef to provision but we can use others to provision, too, for example Ansible, Puppet, etc.</p>

<p>We see that teracy-dev is so useful for developers, so we&rsquo;d like to share it, shape its future
together with anyone who wants to work with software. And we envision teracy-dev with the following
statement:</p>

<blockquote><p>teracy-dev is the best universal development tool for everyone.</p></blockquote>


<p>That&rsquo;s our vision for teracy-dev as the base development platform and we&rsquo;re going to make it true.
Note that it should be used for everyone, even with our QA engineers, with our manual testers, with
our employees, with our users as long as they follow exactly a little setup instruction guide.</p>

<p>I believe that everyone should use it as much as we enjoy using and developing it. It&rsquo;s been saving
us and our clients a lot of money as we don&rsquo;t have to spend the time to set up development environment
for each and every project manually.</p>

<p>We improve it day by day though our projects, we listen to our developers, our clients for feedback
on usage and development. However, we still have some problems with it. For example, on Windows, the
file sharing system is really slow. It&rsquo;s not really lightweight and modular enough to serve every
project&rsquo;s needs.</p>

<p>We know all these problems and we&rsquo;re going to fix these all with the next version by leveraging
Docker and Rsync. We intended to use Docker for long, we expected it should be in use since
teracy-dev v0.4.0 but we failed to make it. Now we promise you that teracy-dev v0.5.0 will leverage
Docker as the core workflow and it will rule the world of developers.</p>

<p>We will add more documentation for usage, accelerate the development pace so that you should benefit
from it as we do. Let&rsquo;s try using it once with
<a href="http://dev.teracy.org/docs/0.4.2/getting_started.html">teracy-dev v0.4.2</a>, it&rsquo;s open source and
totally free. You will love it as we do now for 3 years and counting. Let&rsquo;s together make it better
and better and better.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://blog.teracy.com/tags/teracy-dev/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Khi kỹ sư trở thành quản lý: Làm thế nào để trở thành lãnh đạo kỹ thuật giỏi]]></title>
    <link href="http://blog.teracy.com/2016/08/08/khi-ky-su-tro-thanh-quan-ly-lam-the-nao-de-tro-thanh-lanh-dao-ky-thuat-gioi/"/>
    <updated>2016-08-08T08:28:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/08/khi-ky-su-tro-thanh-quan-ly-lam-the-nao-de-tro-thanh-lanh-dao-ky-thuat-gioi</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/08/08/meeting-930x548.jpg" title="Leadership Meeting" ></p>

<p style="text-align:center;"> <em>Ảnh Từ Rawpixel.com/Shutterstock</em></p>

<p>Các quản lý kỹ thuật thường được thăng chức làm lãnh đạo dựa vào sự đánh giá, xếp hạng tốt. Đây được
coi là phương án thực tế vì các quyết định kinh doanh giờ đây ngày càng phụ thuộc nhiều vào yếu tố
công nghệ nền tảng. Các lãnh đạo công nghệ cần phải đánh giá các lựa chọn kỹ thuật, đưa ra những
khuyến nghị phù hợp với các yêu cầu kinh doanh và phải trao đổi, làm rõ các quyết định đó với những
người liên quan không phải là dân kỹ thuật. Nếu các quản lý công nghệ không hiểu công nghệ thật chắc
thì rất khó để đưa ra những quyết định đúng đắn.</p>

<p>Có một thách thức lớn là một kỹ sư giỏi không phải tự nhiên trở thành một lãnh đạo giỏi. Khả năng
lãnh đạo bất kỳ ai ở cương vị nào không phải tự nhiên mà có. Lãnh đạo là kỹ năng phải được rèn luyện
suốt cuộc đời.</p>

<!-- more -->


<p>Để giúp các quản lý kỹ thuật mới chuyển đổi từ vai trò nhân viên thành lãnh đạo, tôi thường làm việc
với họ để phát triển một loạt các kỹ năng không liên quan gì đến kỹ thuật. Mặc dù không ai giống ai,
tôi nhận thấy rằng các nguyên lý được vạch ra sau đây là nền tảng tốt cho những ai muốn trở thành một
lãnh đạo công nghệ <em>hiệu quả</em> &ndash; một người có thể dẫn dắt đồng đội, triển khai thay đổi và liên tục
gặt hái được nhiều thành công.</p>

<h2>1. Vận dụng tư duy hướng kinh doanh và biết cảm thông</h2>

<p>Khi còn là nhân viên, bạn xem xét công nghệ với con mắt thuần tuý của kỹ sư thì chấp nhận được. Bạn
có nhiều thời gian để tập trung vào việc &ldquo;làm thế nào&rdquo; và không cần phải tập trung cho câu hỏi &ldquo;tại
sao&rdquo;. Điều này có nghĩa là khi còn là nhân viên, bạn thoải mái lựa chọn công nghệ mà không phải tính
đến sự ảnh hưởng của nó tới kinh doanh mà để cho cấp lãnh đạo tính các phương án khả thi thực tế. Tuy
nhiên, khi bạn trở thành lãnh đạo, bạn không còn được xa xỉ như vậy nữa. Vì giờ bạn đã là quản lý,
bạn phải đưa ra quyết định dựa trên những thực tế phức tạp ở thương trường, ví dụ như các ràng buộc
tài chính, văn hoá của tổ chức, chính trị nơi công sở, nhược điểm của con người và các ràng buộc kết
quả kinh doanh.</p>

<p>Các nhà quản lý mới thường mắc sai lầm khi đưa ra các luận cứ cho những khởi xướng của mình dựa trên
các điều kiện kỹ thuật chứ không phải điều kiện kinh doanh, và họ cảm thấy tuyệt vọng khi không nhận
được các hỗ trợ đúng đắn, kịp thời. Họ kỳ vọng doanh nghiệp hiểu rõ khởi xướng của mình trên quan
điểm kỹ thuật nhưng cuối cùng nhận ra rằng việc của họ là phải đặt các khuyến nghị của mình trên quan
điểm kinh doanh.</p>

<p>Cách tốt nhất để khắc phục sai lầm này là dành thời gian tìm hiểu các chỉ số kinh doanh mà doanh
nghiệp quan tâm nhất và hiểu được những khó khăn gây ra cho những phòng ban khác. Để làm được điều
này cần sự cảm thông &ndash; một kỹ năng không thể thiếu của một lãnh đạo hiệu quả. Các quản lý công nghệ
nên trao đổi với các đồng nghiệp và lắng nghe các khó khăn, thách thức từ họ. Các quản lý cũng nên
hiểu rõ các chỉ số kinh doanh chính và biết được những yếu tố nào thúc đẩy các chỉ số này. Họ cần
phải vận dụng đến các kỹ năng phân tích, kỹ năng định lượng mà họ có khi còn là kỹ sư thuần tuý và
áp dụng những kỹ năng này cho các vấn đề quản lý. Một khi họ làm được điều này, họ sẽ trở thành lãnh
đạo kinh doanh thay vì đơn thuần chỉ là dân công nghệ, và họ có thể bắt đầu những cuộc trao đổi sâu
sắc để xây dựng, phát triển doanh nghiệp.</p>

<h2>2. Vận dụng tư duy hướng giải pháp</h2>

<p>Một khía cạnh khác của khả năng lãnh đạo mà các quản lý mới thường gặp khó khăn là làm sao để hiểu
cách tiếp cận các vấn đề nằm ngoài sự kiểm soát trực tiếp của mình. Các thay đổi trong tầm ảnh hưởng
trực tiếp của quản lý có thể triển khai được ngay. Ví dụ, nếu một quản lý đảm bảo chất lượng (QA<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>)
muốn sử dụng thêm Cucumber vào chạy kiểm thử tự động để khuyến khích phương pháp phát triển hướng
hành vi (BDD<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>), thì người đó không cần phải lên lịch họp hành với các phòng ban khác để thực hiện
việc này. Nhưng nếu một quản lý kỹ thuật muốn thay đổi cách quản lý dự án từ phương pháp Waterfall
sang phương pháp Agile thì người đó sẽ cần rất nhiều thời gian làm việc với nhiều người nằm ngoài
phòng ban của mình vì đây là thay đổi tổ chức rất lớn.</p>

<p>Khi phải đối mặt với những vấn đề nằm ngoài tầm kiểm soát trực tiếp, những nhà quản lý mới thường
đầu hàng quá sớm và đưa ra kết luận quá vội vàng: &ldquo;Tôi đã gửi email tới Tom trong nhóm Quản lý chương
trình về việc áp dụng Scrum cho dự án tới, nhưng anh ta chẳng trả lời tôi. Rõ ràng là tổ chức ta chưa
sẵn sàng để áp dụng phương pháp Agile.&rdquo; Trong những tình huống như vậy, khi các quản lý mới hấp tấp
đưa ra kết luận của mình, thì chính họ đang trao vấn đề đó tới cấp quản lý cao hơn thay vì tự mình
xử lý vấn đề. Điều này chỉ có thể chấp nhận được khi bạn còn là nhân viên bình thường chứ không thể
chấp nhận được khi bạn đã là lãnh đạo.</p>

<p>Là lãnh đạo, bạn cần có khả năng vượt qua các chướng ngại nằm ngoài tầm kiểm soát trực tiếp của mình.
Điều này có nghĩa là bạn cần thuyết phục các quản lý của phòng ban khác đồng ý áp dụng quy trình mới
theo đề xuất của bạn. Hoặc nếu bạn thuộc cấp điều hành thì bạn cần phải tự giải quyết các vấn đề nằm
xa ngoài tầm kiểm soát của mình, ví dụ như đưa ra bản kế hoạch để tăng doanh thu trong thời kì suy
thoái kinh tế. Chìa khoá để dẫn tới thành công là vận dụng tư duy hướng giải pháp.</p>

<p>Tư duy hướng giải pháp là cách nhìn tập trung vào mục tiêu hơn là vấn đề. Khi bạn phát triển tư duy
hướng giải pháp, bạn tập trung công sức của mình để giành được kết quả mong muốn và bạn không phung
phí thời gian để phàn nàn về những rào cản bạn gặp phải &ndash; bạn chỉ cần tìm cách vượt qua chúng. Quản
lý của bạn khi đó sẽ trở thành bạn đường để giúp bạn giành được mục tiêu chứ không phải là người
giải quyết các vấn đề hộ bạn. Một lãnh đạo có tư duy hướng giải pháp đưa ra các giải pháp tiềm năng
khi cần tham vấn lãnh đạo của mình, và người đó tận dụng kỹ năng chuyên môn cũng như tầm ảnh hưởng
của mình trong tổ chức để theo đuổi và hoành thành mục đích của mình.</p>

<h2>3. Xây dựng kết nối và lấy được niềm tin từ mọi người</h2>

<p>Các công ty cần thiết phải phân chia nhân viên của mình vào các phòng ban theo cấu trúc phân cấp để
dễ bề quản lý. Tuy nhiên thực tế cho thấy nhiều công ty phân chia khá tuỳ tiện. Các phòng ban tồn
tại đơn giản chỉ là để giúp quản lý kinh doanh mà thôi. Có một thách thức là hầu hết các vấn đề kinh
doanh cần sự quan tâm lớn lại hầu như không giải quyết tốt được trong các ranh giới được tổ chức lỏng
lẻo mà chúng ta đã định ra &ndash; mà các vấn đề này nằm rải rác toàn bộ các phòng ban. Do đó, các lãnh đạo
công nghệ hiệu quả cần thật tinh tường khi làm việc với nhiều phòng ban để triển khai thay đổi, và để
làm được điều này cần sự kết nối chặt chẽ.</p>

<p>Thuật ngữ &ldquo;kết nối&rdquo; gây ra nỗi sợ hãi cho không ít người &ndash; đặc biệt với dân công nghệ. Nhưng xây dựng
kết nối của những đồng nghiệp tâm đầu ý hợp không có nghĩa là bạn phải có những cuộc hội thoại gượng
ép ở giờ nghỉ hoặc phải liên tục trao đổi danh thiếp. Ngược lại, cách tốt nhất để xây dựng kết nối
chỉ đơn giản hãy là chính mình. Tạo được niềm tin là rất cần thiết khi xây dựng các mối quan hệ, và
một trong những cách để làm việc này là hãy thẳng thắn và chân thành.</p>

<p>Có một cách hiệu quả để tạo lập các mối quan hệ đó là không chỉ tập trung cho công việc của mình mà
hãy đi giúp đỡ những người khác trong tổ chức của mình. Tình nguyện giúp ai đó với những khởi xướng
của họ, hay là cố gắng hết sức mình giúp đỡ ai đó khi họ cần. Điều này giúp bạn có cơ hội tương tác
với những người nằm ngoài phòng ban của mình và nó sẽ giúp xây dựng niềm tin.</p>

<p>Cũng đừng quên tham dự các sự kiện giao lưu của công ty và xem đây là cơ hội để gặp gỡ những người
ngoài phòng ban của mình. Bạn không cần phải là người đi giao lưu với cái cách nói chuyện dẻo quẹo,
ngon ngọt của dân tiếp thị ở những sự kiện này mà chỉ cần thử thách bản thân gặp một người mới mỗi
lần là được. (Và cũng đừng sợ sệt khi giới thiệu mình với những người cấp cao hơn &ndash; họ cũng chỉ là
những con người bình thường như bạn thôi). Thậm chí nếu bạn không biết nói gì khi giao lưu công ty
thì hãy thân thiện với một đồng nghiệp ở sự kiện đó, điều này sẽ giúp bạn tiếp cận họ dễ hơn trong
tương lai.</p>

<p>Khi bạn bắt đầu xây dựng kết nối trong công ty, bạn sẽ thấy mạng lưới kết nối này cho bạn nhiều sức
mạnh hơn. Khi bạn biết cần gọi cho ai để xử lý được công việc, họ biết bạn và tôn trọng bạn, khi đó
bạn &ldquo;dời non lấp biển&rdquo; cũng được. Những khởi xướng liên quan nhiều phòng ban trở thành cơ hội tốt để
được kết nối với các đồng nghiệp và giúp giải quyết được nhiều vấn đề lớn. Các thay đổi diễn ra thuận
lợi hơn bởi vì bạn đã thiết lập được niềm tin và có thể nhanh chóng xử lý vấn đề luôn. Và khi đó nhu
cầu tham vấn tới lãnh đạo của bạn sẽ giảm đi bởi vì bạn không cần phải nhờ họ giúp mỗi khi bạn cần
làm việc với những người thuộc phòng ban khác.</p>

<h2>4. Hiểu rằng mỗi người có những nhận thức khác nhau về mình</h2>

<p>Khi bước đầu phát triển sự nghiệp, các kỹ sư chỉ tập trung củng cố và phát triển các kỹ năng kỹ
thuật. Chúng ta được thăng tiến dựa trên các nhiệm vụ hữu hình và đo đếm được, ví dụ như học một
ngôn ngữ lập trình mới hay làm chủ một công nghệ mới. Tuy nhiên một khi chúng ta chuyển sang làm
quản lý, mọi thứ thay đổi hoàn toàn. Khi làm quản lý, thành công của chúng ta dựa trên phần lớn các
đặc điểm vô hình, trừu tượng như kỹ năng làm việc nhóm, khả năng lãnh đạo và giao tiếp. Những kỹ
năng này có đặc tính chủ quan, có nghĩa là sự tiến bộ của chúng ta khó cân đong đo đếm, mà phụ thuộc
vào nhận thức của người khác về những cố gắng của mình. Đây là quả đắng mà hầu hết các quản lý kỹ
thuật mới phải chấp nhận.</p>

<p>Điều này có vẻ không công bằng, nhưng đây là cách thế giới vận hành. Khi nói đến khả năng lãnh đạo
thì hiệu quả làm việc của bạn chủ yếu dựa vào nhận xét của các quản lý, của thành viên nhóm và các
đồng nghiệp cho dù mục đích soạn thảo email, làm bài thuyết trình hay đưa ra các bình luận trong
cuộc họp của bạn là gì đi nữa. Mọi người xung quanh đánh giá bạn thông qua từng hành động nhỏ nhất
của bạn khi giao tiếp và họ có những kết luận riêng về những gì bạn nói. Họ cũng tiếp nhận thông tin
về bạn từ người thứ ba, có nghĩa là dựa trên những đánh giá của người khác về những hành động của bạn.</p>

<p>Các lãnh đạo thành công hiểu rằng mỗi người có những nhận thức khác nhau về mình, và họ không phung
phí thời gian để phàn nàn về điều này. Thay vào đó, họ chủ động và làm thật rõ vấn đề khi giao tiếp
và họ cố gắng gấp đôi khi mọi người nhận thức không đúng về các hành động của họ. Đây là lý do vì sao
tôi làm việc với các kỹ năng giao tiếp với mọi quản lý khi báo cáo cho tôi. Chúng tôi thường phân
tích email và trao đổi trực tiếp thêm ở cấp thấp nhất bởi vì từng hành động nhỏ trong giao tiếp đều
hết sức quan trọng. Những điều đơn giản như ngôn ngữ cơ thể, cách ăn mặc, và giọng điệu là những nhân
tố cực kỳ quan trọng để mọi người có cái nhìn đúng hơn về bạn. Và đây là điều rất khó để mọi người
tự đánh giá bản thân mình trong những vấn đề này.</p>

<h2>5. Tiếp nhận tư duy hướng vận hành</h2>

<p>Khả năng thực hiện thay đổi để hoạt động lâu dài là một thành phần chủ chốt của lãnh đạo hiệu quả.
Thật không may, hầu hết các quản lý mới tập trung quá nhiều vào việc triển khai các khởi xướng ban
đầu của mình mà không xem xét làm thế nào để hỗ trợ chương trình đó lâu dài. Xây dựng tư duy hướng
vận hành giúp bạn vượt qua lỗi này. Tư duy hướng vận hành là quan điểm xem xét các nhiệm vụ tiếp theo
cần thực hiện để hỗ trợ toàn bộ vòng đời của một chương trình.</p>

<p>Theo lẽ tự nhiên, các quản lý mới thường rất hào hứng ở giai đoạn đầu khi triển khai khởi xướng mới.
Đây là khoảng thời gian tràn đầy nhiệt thành khi họ tập trung đưa khởi xướng của mình vào áp dụng
thực tế bằng cách viết tài liệu mô tả ý tưởng, nâng cao hỗ trợ và triển khai các công cụ công nghệ
liên quan. Đây là việc rất đáng khen vì nó đòi hỏi sự cố gắng cực kỳ lớn, tuy nhiên đây mới chỉ là
khởi đầu. Giai đoạn tiếp theo được biết đến là giai đoạn &ldquo;thung lũng của sự tuyệt vọng&rdquo; khi mọi thứ
vượt quá tầm kiểm soát. Luồng công việc có vẻ hoàn hảo trên bàn giấy lại không hoạt động tốt ngoài
thực tế. Các thủ tục mới bị bỏ qua và mọi người bắt đầu chê bai các công cụ công nghệ mới. Và điều
tồi tệ nhất là mọi người bắt đầu không còn tin tưởng vào bản thân khởi xướng này nữa.</p>

<p>Đây là giai đoạn khó khăn cho các nhà quản lý mới. Họ thường phản ứng bằng cách giơ tay đầu hàng và
đổ lỗi cho tổ chức: &ldquo;Rõ ràng công ty chưa sẵn sàng để thay đổi.&rdquo; Ngược lại, những nhà quản lý kinh
nghiệm xem đây là giai đoạn bình thường &ndash; một phần tự nhiên của quá trình chuyển đổi tuân theo quy
luật đường cong thay đổi. Họ biết rằng nếu họ tiếp tục kiên quyết theo đuổi mục tiêu đề ra, họ có
thể xuyên thủng &ldquo;thung lũng của sự tuyệt vọng&rdquo; để thấy được những khởi xướng của mình đâm chồi ở
phía bên kia thung lũng. Tư duy hướng vận hành giúp các nhà quản lý củng cố những khởi xướng khi giai
đoạn hào hứng ban đầu mờ nhạt dần bằng cách tập trung vào các hỗ trợ lâu dài bao gồm:</p>

<ul>
<li><p>Tiếp nhận (Adoption): Gây dựng sự cảm thông từ người dùng cuối và phát triển các chiến lược để
giúp họ dễ dàng tiếp nhận các quy trình và công cụ mới.</p></li>
<li><p>Mở rộng (Scalability): Xác định các nút thắt cổ chai trong các thủ tục có thể gây cho chương trình
không còn hoạt động khi áp dụng cho nhóm lớn hơn.</p></li>
<li><p>Dư thừa (Redundancy): Đào tạo nhiều người cùng đảm nhận các vị trí chủ chốt để chẳng may nếu một
ai đó đi nghỉ dưỡng hoặc nghỉ việc thì các khởi xướng vẫn vận hành bình thường.</p></li>
<li><p>Đào tạo (Traning): Triển khai đào tạo để dạy mọi người về những khởi xướng mới.</p></li>
<li><p>Hỗ trợ liên tục (Ongoing support): Tạo lập thủ tục cho mọi người sử dụng khi họ có câu hỏi hay gặp
vấn đề gì. Thiết lập luồng hỗ trợ là đặc biệt cần thiết trong giai đoạn hai của đường cong thay đổi.</p></li>
</ul>


<h2>6. Đọc sách về cách quản lý</h2>

<p>Vì xuất phát từ nền tảng kỹ thuật, chúng ta dành rất nhiều thời gian để đọc các tài liệu kỹ thuật.
Có cảm giác chúng ta dành hầu hết cuộc đời mình đọc sách, blog, bài nghiên cứu, các hướng dẫn trực
tuyến, các bài trên Stack Overflow và các cuộc trao đổi trên Hacker News. Đó là yêu cầu công việc và
là điều chúng ta vẫn nên duy trì khi làm quản lý. Tuy nhiên, để trở thành lãnh đạo công nghệ giỏi,
đọc tài liệu kỹ thuật là chưa đủ. Bạn còn phải động tới hàng đống thông tin ngoài kia về quản lý và
lãnh đạo.</p>

<p>Đây là danh sách các cuốn sách tôi khuyên đọc. Danh sách này không thể bao quát hết được mà được coi
là điểm khởi đầu cho công việc quản lý. Những cuốn sách này có ảnh hưởng lớn nhất tới tôi khi làm
quản lý.</p>

<ul>
<li><p>&ldquo;Good to Great&rdquo; bởi Jim Collins. Một cuốn sách vui và đầy cảm hứng nói về các phong cách lãnh đạo
dẫn dắt kết quả tài chính tốt và lâu dài.</p></li>
<li><p>&ldquo;First, Break All the Rules&rdquo; bởi Marcus Buckingham. Tranh luận rằng các quản lý thành công nhất
đều tập trung vào tận dụng sức mạnh của nhân viên thay vì ám ảnh về những điểm yếu không thay đổi
được.</p></li>
<li><p>&ldquo;Lean In&rdquo; bởi Sheryl Sandberg. Một cuốn sách đột phá bởi COO nổi tiếng của Facebook về lãnh đạo và
giới tính. Hơi chạnh lòng vì đây là một trong số những cuốn nổi tiếng ít ỏi được viết bởi phụ nữ.</p></li>
<li><p>&ldquo;The Lean Startup&rdquo; (Khởi nghiệp tinh gọn) bởi Eric Ries. Đề cập cách tiếp cận hoàn toàn khác về
quản lý sản phẩm bằng cách dựa trên sự học hỏi theo thời gian thực để quyết định ưu tiên các tính
năng. Bạn cũng đừng quên đọc blog của Eric Ries. Ries là dân kỹ thuật &ldquo;chuẩn men&rdquo; và cũng là doanh
nhân thực sự đột phá, điều này tạo nên các bài viết của anh rất sâu sắc và đọc thấy rất vui.</p></li>
<li><p>&ldquo;You&rsquo;re in Charge, Now What?&rdquo; bởi Thomas Neff và James Citrin. Một cuốn kinh điển đề cập đến chiến
lược gây dựng niềm tin và sự tự tin khi mới được đề bạt vào vị trí lãnh đạo. Phù hợp hoàn toàn cho
các quản lý mới.</p></li>
<li><p>&ldquo;Leading Change&rdquo; bởi John Kotter. Một cuốn kinh điển về cách triển khai thay đổi thành công trong
tổ chức.</p></li>
<li><p>&ldquo;The Truth About Leadership&rdquo; bởi James Kouzes và Barry Posner. Đây là cuốn sách xuất sắc dựa trên
nghiên cứu về các nguyên lý chung của lãnh đạo. Chúng tôi sử dụng cuốn này ở công ty làm nền tảng
cho chương trình đạo tạo quản lý.</p></li>
<li><p>&ldquo;The Five Dysfunction of a Team&rdquo; bởi Patrick Lencioni. Một cuốn kinh điển về động lực nhóm. Cuốn
sách khá ngắn gọn và thú vị.</p></li>
<li><p>&ldquo;The Phoenix Project&rdquo; bởi Gene Kim, Kevin Behr và George Spafford. Một cuốn sách phải đọc dành cho
những người làm DevOps (phát triển vận hành). Đây là cuốn sách viết theo dạng tiểu thuyết kinh doanh
về cách áp dụng các nguyên lý sản xuất tinh gọn cho vận hành IT.</p></li>
<li><p>&ldquo;Havard Business Review.&rdquo; HBR là tạp chí mà các nhà quản lý phải đọc. Nó luôn có các bài viết sâu
sắc dựa trên các nghiên cứu về một loạt các chủ đề rộng khắp trong kinh doanh. Nó khá đắt nhưng đáng
đồng tiền bát gạo.</p></li>
</ul>


<h2>7. Tiếp nhận thái độ tích cực</h2>

<p>Khi làm lãnh đạo, mọi người coi bạn là đại điện để cảm nhận về tổ chức dựa trên ý thức và cả tiềm
thức. Nếu bạn lạc quan và nhiệt thành thì những người quanh bạn sẽ có thể lạc quan và hạnh phúc.
Nếu bạn tiêu cực và bi quan, đồng đội của bạn có thể sẽ cọc cằn khó tính và chán nản. Khi làm lãnh
đạo dù bạn có thích hay không thì thái độ của bạn luôn có ảnh hưởng tới đồng đội và đồng nghiệp khá
lớn. Do đó, phải thật chú ý đến cách ăn ở và không ngừng có thái độ lạc quan.</p>

<p>Giờ điều quan trọng là phải phân biệt được ranh giới giữa lạc quan và lạc quan thái quá
(Pollyannaism). Bạn có thể cởi mở và thành thật &ndash; thậm chí trong những thời điểm khó khăn &ndash; mà vẫn
có thái độ tích cực về tương lai. Lạc quan không có nghĩa là phải cười gượng một cách giả tạo. Mà
điều đó có nghĩa là dù ở tình huống xấu đến đâu đi chăng nữa, bạn vẫn có niềm tin vào bản thân và
niềm tin sâu sắc vào sự hiệu quả trong khả năng lãnh đạo của mình. Bạn tin vào chính mình, bạn tin
rằng bạn có thể tạo ra tương lai tốt hơn. Đó chính là sự tự tin mà mọi người tôn trọng và hướng tới.</p>

<p>Lời khuyên của tôi xin gửi tới các lãnh đạo công nghệ là hãy biến đam mê công nghệ thành nguồn động
lực tích cực. Chúng ta đang sống trong thời khắc công nghệ phát triển như vũ bão. Các công cụ, khuôn
mẫu và áp dụng thực tế có sẵn ngày nay cho phép chúng ta làm được những việc phi thường mà cách đây
chỉ vài năm thôi chúng ta khó mà làm nổi. Là dân kỹ thuật, đam mê công nghệ có lẽ là động lực thúc
đẩy chúng ta tiến xa hơn trong sự nghiệp. Nếu chúng ta tìm được nguồn năng lượng đó và tiếp nhận các
nguyên lý về lãnh đạo được bàn luận ở đây, ai mà biết được chúng ta có thể làm được những điều phi
thường gì trong tương lai?</p>

<p>Bài viết của Jake Bennett &ndash; CTO<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> của POP, một công ty kỹ thuật số ở Seattle.</p>

<p>Bài dịch từ: <a href="http://venturebeat.com/2016/07/31/when-engineers-become-managers-how-to-be-a-great-technical-leader/">When engineers become managers: How to be a great technical leader</a></p>

<h2>Xem thêm</h2>

<ul>
<li><a href="http://www.socialsynergetics.com/site/managing-change">http://www.socialsynergetics.com/site/managing-change</a></li>
</ul>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Quality Assurance: Đảm bảo chất lượng<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Behavior Driven Development: Phát triển hướng hành vi<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Chief Technology Officer: Giám đốc công nghệ<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những lỗi khi áp dụng mẫu thiết kế trải nghiệm người dùng (UX design patterns)]]></title>
    <link href="http://blog.teracy.com/2016/08/06/nhung-loi-khi-ap-dung-mau-thiet-ke-trai-nghiem-nguoi-dung-ux-design-patterns/"/>
    <updated>2016-08-06T04:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/06/nhung-loi-khi-ap-dung-mau-thiet-ke-trai-nghiem-nguoi-dung-ux-design-patterns</id>
    <content type="html"><![CDATA[<p>Nếu bạn là một nhà thiết kế có kinh nghiệm, bạn nên hiểu rằng trong  thiết kế giao diện người dùng <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> , việc lấy cảm hứng từ những sản phẩm của người khác không phải là ăn cắp ý tưởng mà là việc học hỏi những kinh nghiệm tốt nhất của những người đi trước, là sử dụng những mẫu thiết kế và làm theo các chỉ dẫn (guideline) nhằm đảm bảo sử dụng các kiểu mẫu quen thuộc và tạo nên các giao diện thực sự hữu ích cho người dùng.</p>

<p>Một số người nói rằng việc cứ bám theo các quy tắc cứng nhắc và bắt chước người khác thì sẽ giết chết sự sáng tạo và rồi cuối cùng mọi ứng dụng sẽ có thiết kế giống nhau. Theo quan điểm của người thiết kế UX (trải nghiệm người dùng) tôi lại thấy một vấn đề khác. Việc quen áp dụng các cách khuyên dùng tốt nhất có thể khiến bạn tin rằng Google/Facebook/Instagram hay các ứng dụng khác luôn đúng, mục tiêu thiết kế của họ cũng giống của bạn nên bạn sẽ không bao giờ tự hỏi “có gì sai ở đây?!”. Để chứng minh điều này dưới đây là một số mẫu thiết kế (hoặc đã từng) được coi là những mẫu thiết kế tốt nhất nhưng rút cuộc nó lại không thực sự tốt như bạn nghĩ.</p>

<!-- more -->


<h3>1. Ẩn menu điều hướng <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>Ít nhất cũng có đến nửa triệu bài báo chủ yếu được viết bởi các designer tranh cãi về menu dạng hamburger (☰) Nếu bạn đã bỏ lỡ chúng thì hãy đọc <a href="http://techcrunch.com/2014/05/24/before-the-hamburger-button-kills-you/">ở đây</a> và <a href="http://deep.design/the-hamburger-menu/">ở đây</a>. Các bài viết ấy thường không bàn cãi về việc sử dụng biểu tượng hamburger mà đó là về việc có nên ẩn các menu điều hướng và hiển thị nó khi người dùng nhấn vào biểu tượng hamburger.
Ban đầu thì việc ẩn hàng loạt menu điều hướng đằng sau nút hamburger này có vẻ như rất tiện lợi cho người thiết kế &ndash; bạn không phải lo lắng về việc màn hình bị chiếm diện tích bởi những menu cha con dài trên màn hình quá nhỏ của thiết bị di động, mọi thứ sẽ được ẩn một cách mặc định và chỉ hiện ra khi người dùng muốn.
Tuy nhiên các thực nghiệm lại chỉ ra rằng việc hiển thị menu điều hướng thường trực trên màn hình lại tăng khả năng tương tác giữa người dùng và ứng dụng, làm người dùng hài lòng hơn và thậm chí còn tăng doanh thu từ ứng dụng. Đó là lý do vì sao các ứng dụng lớn đang dần thay đồi bằng cách bỏ đi nút hamburger và quay lại hiển thị những tính năng hay được sử dụng ngay trên màn hình.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/youtube-nav-change.png" title="Menu điều hướng của Youtube" ></p>

<p style="text-align:center;"> Sự thay đổi menu điều hướng của Youtube &ndash; Luke Wroblewski</p>

<h3>2. Lạm dụng icon.</h3>

<p>Khi thiết kế trên màn hình nhỏ đôi lúc bạn quá lạm dụng việc thay thế các nhãn bằng các icon. Bạn có thể có nhiều lý do để dùng icon như chúng chiếm ít không gian hơn, bạn không phải lo lắng về việc màn hình bị xô lệch khi được dịch sang ngôn ngữ khác hay với ý nghĩ rằng người dùng đã rất quen với icon này rồi.</p>

<p>Với kiểu suy nghĩ như vậy các bảng thiết kế nhiều khi vô tình giấu đi các tính năng của chương trình đằng sau những icon khó hiểu hoặc đôi lúc mình cũng chẳng biết là cái gì nữa và dưới đây là một ví dụ:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/instagram-bad-icon.png" title="Icon khó hiểu của Instagram" ></p>

<p style="text-align:center;"> Liệu bạn có đoán được icon này trong Instagram là để gửi tin nhắn không!</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/google-trans-bad-icon.png" title="Icon Khó hiểu trên Google Translate" ></p>

<p style="text-align:center;"> Hay icon này trong Google Translate dùng để làm gì?</p>

<p>Sẽ là sai lầm khi bạn nghĩ rằng người dùng đã quen với việc dùng những icon trừu tượng như thế này hay bá đạo hơn là nghĩ rằng họ sẽ tò mò mà bỏ thời gian ra tìm hiểu xem nó là cái gì.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/bloom-fm-bad-icon.png" title="Icon khó hiểu trong Bloom.fm" ></p>

<p style="text-align:center;"> Một số icon của Bloom.fm mà thật mình cũng chẳng hiểu nó dùng để làm gì!</p>

<p>Nếu bạn là người thiết kế một icon và bạn cảm thấy sản phẩm của mình cần nhãn để người khác có thể hiểu được thì sản phẩm của bạn thật sự có vấn đề, kể cả khi người dùng sẵn sàng thử để hiểu về nó.</p>

<p>Điều này không có nghĩa là bạn không nên dùng icon, thật sự thì có rất nhiều icon mà người dùng đã quen thuộc và phần lớn những chức năng quen thuộc của một ứng dụng đều đã có icon tương ứng ( tìm kiếm, phát video, email, cài đặt&hellip; ). Tuy vậy vẫn có nhiều icon khá là mơ hồ đối với người dùng vì mỗi ứng dụng sẽ có hành vi khác nhau một chút trên cùng một chức năng (ví dụ như sẽ có chuyện gì xảy ra nếu ta nhấn vào nút trái tim nhỉ (yêu thích, đánh dấu) ??? ).</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/another-example-heart.png" title="đôi lúc thật khó để biết icon quen thuộc thật sự sẽ làm gì" ></p>

<p>Với những tính năng không quen thuộc và phức tạp thì bạn nên sử dụng icon kèm theo nhãn đầy đủ, nhãn sẽ giúp tính năng của bạn rõ ràng hơn và icon sẽ giúp người dùng nhận dạng tính năng nhanh hơn và đem lại một chút cá tính cho ứng dụng của bạn.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/complicate-action-should-have-label.png"></p>

<p style="text-align:center;"> Một ví dụ trong ứng dụng Pixelmator.</p>

<h3>3. Chuyển hướng dựa vào cử chỉ <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>Khi Apple giới thiệu iPhone vào năm 2007, công nghệ cảm ứng đa điểm đã thu hút sự chú ý của ngưới dùng và họ thấy rằng không những có thể chạm và nhấn vào giao diện mà còn có thể phóng to, thu nhỏ và vuốt.</p>

<p>Tương tác dùng cảm ứng đã trở nên quen thuộc hơn với người thiết kế giao diện và đã có nhiều ứng dụng được thử nghiệm sử dụng nhận dạng cử chỉ đa điểm để tương tác.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/clear-app-gestures.jpg"></p>

<p style="text-align:center;"> Chuyển hướng dựa vào cử chỉ trong ứng dụng Clear.</p>

<p>Cũng giống như trường hợp giấu điều hướng và lạm dụng các icon thay vì dùng nhãn văn bản, đôi khi các nhà thiết kế cũng bị cuốn vào việc sử dụng cử chỉ để tiết kiệm không gian màn hình ( Một khi không có biểu tượng nào thể hiện việc bạn có thể vuốt sang trái để xóa thì người dùng chẳng có cách nào để biết là nó tồn tại ). Và cũng như vấn đề về hamburger menu, tính năng nào bị giấu đi thì sẽ ít người dùng nó. Thêm nữa là phần lớn nhận dạng cử chỉ chưa được chuẩn hóa trên các ứng dụng khác nhau, đơn cử là ứng dụng email nổi tiếng cũng hành xử khá là khác nhau đối với việc bạn vuốt sang phải trên mỗi email.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/apple-mail-gestures.png" title="vuốt sang phải trên Apple mail" ></p>

<p style="text-align:center;"> Với Apple mail vuốt sang phải sẽ hiện ra tùy chọn Đánh dấu chưa đọc.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/gmail-gestures.png" title="vuốt sang phải trên Gmail" ></p>

<p style="text-align:center;"> Trong khi đó với ứng dụng Gmail thì vuốt sang phải sẽ là chuyển email sang mục lưu trữ.</p>

<p>Vậy nên hãy nhớ rằng những tính năng sử dụng nhận dạng cử chỉ là tính năng ẩn và điều đó khiến cho người dùng mất nhiều công sức để ghi nhớ &ndash; có may mắn lắm thì bạn mới có thể dạy cho cả thế giới biết vuốt sang phải có nghĩa là gì.</p>

<h3>4. Giới thiệu tính năng mới trực quan trên màn hình cho người dùng mới</h3>

<p>Onboarding, đang là chủ đề nóng trong việc thiết kế giao diện. Tính năng này tự động chạy chỉ dùng một lần khi người dùng lần đầu tiên mở dụng dụng. Phần lớn tính năng này được dùng để giới thiệu và giải thích các tính năng của chương trình một cách trực quan trên màn hình:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/onboarding-overlay.png"></p>

<p style="text-align:center;"> Một ví dụ về Onboarding</p>

<p>Nhìn thì hay nhưng thật ra thì đây là một giải pháp khá tệ đấy. Bởi vì nhiều người đôi lúc sẽ bỏ qua phần giới thiệu của bạn, họ đang muốn sử dụng ứng dụng của bạn ngay cơ mà. Thậm chí nếu họ dành thời gian xem hướng dẫn của bạn thì họ cũng sẽ nhanh chóng quên mọi thứ ngay khi đóng cửa sổ hướng dẫn đó lại. (đặc biệt là với màn hình hướng dẫn có quá nhiều thông tin). Và cuối cùng là, nếu bạn phải giải thích giao diện của mình với người dùng thì điều đó đồng nghĩa rằng giao diện bạn đang có trên ứng dụng thật sự đang có vấn đề.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/ux-design-like-make-a-joke.jpg" title="Thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa." ></p>

<p style="text-align:center;"> Việc thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa.</p>

<p>Onboarding có thể được thiết kế theo nhiều cách khác nhau để trở nên hữu ích hơn đối với người dùng. Như với Slack, màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/slack-onboarding.png" title="Slack sử màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng" ></p>

<p>Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy. Hướng tiếp cận này cũng giúp người dùng quen dần và hiểu hơn các tính năng/ giá trị của ứng dụng.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/duolingo-onboarding.jpg" title="Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy" ></p>

<p>Bạn còn nhớ vấn đề khác nhau giữa Mailbox và AppleMail khi dùng tính năng vuốt sang phải qua email? Đây là cách hướng dẫn người dùng mới về tính năng đó: Người dùng sẽ cần xem những cử chỉ đó được thực hiện như thế nào/ở đâu trước khi thực sự bắt đầu sử dụng ứng dụng:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/apple-mail-onboarding-tutor.png"></p>

<p>Trước khi áp dụng rập khuôn sử dụng Onboarding bằng cách tạo một lớp trong suốt trên chính ứng dụng của mình để giới thiệu các tính năng và hướng dẫn cho người dùng mới, hãy nên dừng lại và thử nghĩ xem liệu người dùng nên được chào đón như thế nào cho hợp lý và bạn sẽ thấy có nhiều cách giải quyết khác hay hơn việc rập khuôn lại từ ứng dụng khác.</p>

<h3>5. Sử dụng màn hình trống</h3>

<p>Màn hình trống đôi lúc là một thứ dễ bị bỏ sót bởi các nhân viên thiết kế thiếu kinh nghiệm, tuy nhiên nó là một phần quan trong trong thiết kế ứng dụng của bạn.</p>

<p>Đôi khi bạn nghĩ rằng trang báo lỗi hay màn mình trống là cơ hội tốt để thể hiện tính sáng tạo của mình nhưng thực ra lại không như vậy.</p>

<p>Hãy xem ví dụ dưới đây của Google photos:</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/gphoto-empty-state.png" title="Màn hình trống trên GPhoto" ></p>

<p>Nhìn qua thì có vẻ ổn nhưng hãy thử nhìn lại màn hình bạn sẽ thấy có một số vấn đề ở đây:</p>

<ul>
<li><p>Tại sao lại có nút tìm kiếm trong khi người dùng chưa tạo cái gì cả?</p></li>
<li><p>Tại sao hình ảnh chính trong màn hình này lại không có phản ứng gì khi tôi chạm vào?</p></li>
<li><p>Gợi ý ở màn hình trên bảo rằng &ldquo;bạn có thể tạo nội dung bằng cách sử dụng nút + ở phía trên màn hình&rdquo; và điều đó thật là vụng về, bản thân cái gợi ý ở trên nên tự bao gồm nút để tạo nội dung luôn nhỉ?</p></li>
</ul>


<p>Và như thế màn hình trống này không làm cho việc sử dụng ứng dụng dễ dàng hơn, nó không giúp người dùng hiểu rõ hơn về ứng dụng của bạn.</p>

<p>Màn hình trống sẽ làm mọi thứ dễ dàng hơn nếu nó thiết kế theo kiểu như dưới đây.</p>

<p><img class="center" src="http://blog.teracy.com/images/2016/08/06/empty-state-good-example.png" title="Một ví dụ về màn hình trống tốt" ></p>

<p>Đừng quên rằng màn hình trống (tương tự như các trang 404 trên web) không chỉ là nơi thể hiện khả năng sáng tạo và đặc tính thương hiệu mà còn có vai trò quan trọng hơn để thể hiện tính năng của chương trình. Vì vậy hãy làm cho màn hình trống trở nên trực quan hơn.</p>

<h3>6. Hãy luôn tự hỏi mọi thứ</h3>

<p>Những điều tôi chia sẽ ở đây không phải là để chỉ trích các mẫu thiết kế hay các thực nghiệm tốt nhất. Hãy nhớ rằng các mẫu thiết kế trên các ứng dụng nổi tiếng đôi lúc có đối tượng người dùng khác với ứng dụng mà bạn tạo và điều đó có nghĩa rằng không có chìa khóa vàng chung cho tất cả mọi thứ. Vì thế hay tự nghiên cứu để tạo nên một thiết kế riêng cho mình, mọi thứ cần phải được đo đếm và kiểm thử để rút ra cách giải quyết tốt nhất cho ứng dụng của mình.</p>

<p>Lược dịch từ <a href="https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570">Misused mobile UX patterns</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>UI<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Navigation menu<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Gesture based navigation<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 nguyên tắc trong thiết kế bot]]></title>
    <link href="http://blog.teracy.com/2016/08/05/8-nguyen-tac-trong-thiet-ket-bot/"/>
    <updated>2016-08-05T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/05/8-nguyen-tac-trong-thiet-ket-bot</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://blog.teracy.com/images/2016/08/05/bot-design.png" title="Bot Design" ></p>

<p>Thiết kế UI đàm thoại<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> thu hút được nhiều sự quan tâm nhưng để chúng phát huy được hiệu quả trong thực tế thì vẫn là một vấn đề chưa rõ ràng.</p>

<p>Tuy nhiên những nguyên tắc thiết kế cơ bản có định hướng có thể giúp chúng ta thiết kế những thứ thật sự hữu dụng mà mọi người sẽ muốn dùng hàng ngày.</p>

<p>Chúng ta không thiếu những bài viết về những UI đàm thoại trong tương lai, nhưng lại có quá ít các bài viết về tính thực tiễn khi thiết kế sự tương tác của các chatbot.</p>

<p>Có vẻ như đây chính xác là những gì mà hiện tại chúng ta đang cần. Nỗ lực ban đầu khi thực hiện các chatbot đều thất bại, chủ yếu là do các chatbot phụ thuộc quá nhiều vào việc xử lý ngôn ngữ tự nhiên hoặc khả năng của A.I mà vẫn chưa làm
được. Ngoài ra người ta cũng cố gắng loại bỏ những thứ không phù hợp trong mô hình mới này.</p>

<p>Vì quá quan tâm đến công nghệ mới mà chúng ta quên đi nhân tố quan trọng nhất trong lĩnh vực này đó là con người &ndash; được cho là sẽ giao tiếp với bot.</p>

<!-- more -->


<p>Vậy chúng ta dự định thiết kế các bot như thế nào? Các bot có ích trong trường hợp nào? Nên thân thiện và đơn giản như Slackbot hay thông minh như Facebook M? Nên cho phép thoải mái nhập văn bản hay tạo ra các tùy chọn như IVR<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>? Đây là những câu hỏi không khó trả lời, nhưng thực tế chúng ta vẫn đang khám phá cách sử dụng phương tiện mới này để tạo ra những trải nghiệm thật tốt.</p>

<p>Những tình huống này đòi hỏi các quan điểm thống nhất. Khi bạn làm việc trong lĩnh vực chatbot với nhiều quan điểm khác nhau thì bạn cần phải tuân theo các nguyên tắc thiết kế thật rõ ràng.</p>

<p>(Bài viết này được đăng lần đầu trên Inside Intercom &ndash; trang web mà chúng tôi thường xuyên chia sẻ suy nghĩ của mình về thiết kế, startup và quản lý sản phẩm).</p>

<h1>Các nguyên tắc thiết kế là gì?</h1>

<p>Tất cả các sản phẩm tốt đều tuân theo các nguyên tắc có quan điểm rõ ràng và các nguyên tắc đó phải được đặt lên hàng đầu.</p>

<p>Hiểu theo nghĩa đơn giản nhất thì các nguyên tắc thiết kế là tập hợp các quan điểm được cả nhóm ủng hộ. Các nguyên tắc phải rõ ràng, không mơ hồ và là tôn chỉ để mọi người hướng đến.</p>

<p>Tạo ra các nguyên tắc thiết kế hay là cả một nghệ thuật. Nó không đơn thuần chỉ là những chân lý. Vì nếu như vậy, mọi người sẽ chỉ biết gật đầu, và chẳng giúp bạn được gì khi triển khai thực hiện.</p>

<p>Ví dụ, &ldquo;chúng tôi không làm những thiết kế quá phức tạp&rdquo; là một nguyên tắc chán kinh khủng &ndash; Thực tế sẽ không ai tranh cãi điều ngược lại. Những chân lý như vậy không thể giúp định hướng khả thi cho các quyết định của bạn.</p>

<p>Ngược lại, &ldquo;Chúng tôi thích sự đơn giản hơn là việc gì cũng muốn làm&rdquo; là một nguyên tắc thiết kế tuyệt vời. Chúng ta cũng có thể đưa ra một lập luận ngược với nguyên tắc trên đó là &ldquo;Chúng tôi bổ sung tính phức tạp để người dùng có thể tạo ra những thứ tuyệt vời hơn&rdquo;. Những nguyên tắc có quan điểm rõ ràng như vậy sẽ giúp bạn có được những quyết định thống nhất khi thiết kế.
Với định hướng như vậy, hãy cùng đưa ra một số nguyên tắc giúp chúng ta tiến bộ khi thiết kế các UI đàm thoại.</p>

<h1>Các nguyên tắc thiết kế bot</h1>

<h2>1. Không nên giả lập là con người</h2>

<p>Trò mồi chài người dùng có thể làm họ cảm thấy như mình đang bị lừa, hoặc là họ không hiểu hệ thống hoạt động như thế nào. Cả hai trường hợp này đều là những trải nghiệm người dùng không tốt. Điều đó có nghĩa là chúng ta không nên sử dụng các chỉ dẫn như &ldquo;đang đánh máy&rdquo; hay các trì hoãn giả tạo để có vẻ khiến cho bot mang nhân cách nhiều hơn. Thay vì đó, các thông điệp bot nên theo các kiểu cách khác nhau, và được dán nhãn rõ ràng để thể hiện rằng nó không phải là con người. Điều này cũng sẽ không ngăn cản chúng ta tạo ra cá tính cho bot.</p>

<h2>2. Đơn giản hóa hết mức có thể</h2>

<p>Các đàm thoại bot nên gắn với các chủ đề cụ thể và theo lộ trình đàm thoại tuyến tính, như vậy sẽ tránh được các đường rẽ nhánh phức tạp. Không nên tạo ra các A.I tự cảm nhận và chung chung. Tốt hơn là nên trình bày và giải thích những giới hạn của bot. Như vậy, các nhà thiết kế bot cũng sẽ không phải giải thích gì cho các trường hợp bị lỗi lừa bot và người dùng cũng sẽ không cảm thấy mệt mỏi với các thông điệp đàm thoại phức tạp.</p>

<h2>3. Tôn trọng phương tiện chat</h2>

<p>Lợi thế của các ứng dụng gửi tin nhắn thông minh đó là có thể loại bỏ rất nhiều ứng dụng, giao diện và làm giảm tính tương tác, thay vào đó là một UI chat đơn giản. Do đó, sẽ thật là vô nghĩa khi loanh quanh và vứt cả 1 ứng dụng vào trong một cuộc đàm thoại. Hãy giữ mọi thứ thật tự nhiên với ứng dụng đàm thoại. Mọi tương tác của bot là gọi và trả lời kèm theo các bình luận trong một luồng chat và người dùng sẽ phản hồi lại trong vùng trả lời. Các bot không thể thay đổi nội dung đàm thoại như con người. Cùng với đó, hãy sử dụng các quy ước: hiển thị một tấm thẻ được định dạng bắt mắt cho phép xem trước trang liên kết hơn là việc in ra một URL vô nghĩa trong phản hồi của bot.</p>

<h2>4. Tối ưu cho người dùng cuối</h2>

<p>Các bot nên được dùng để cải thiện trải nghiệm người dùng cuối chứ không chỉ là công cụ hỗ trợ tốt cho các đội chăm sóc khách hàng. Người thiết kế nên tự hỏi rằng: Con người có tốt hơn cho người dùng cuối không? Nếu câu trả lời là có thì bạn không nên sử dụng bot. Bot không nên làm thay những việc con người có thể làm tốt hơn, mà nên cải thiện những cái mà con người còn làm chậm chạp. Máy móc nên làm việc, con người thì nên suy nghĩ.</p>

<h2>5. Sử dụng một cách tiết kiệm</h2>

<p>Các tương tác của bot nên ngắn gọn và chính xác. Không nên có một cuộc trò chuyện kéo dài qua lại với bot, điều này sẽ làm mất thời gian của cả hai bên. Bất cứ khi nào cần quá 2 lần nhập là thấy nặng nề rồi.</p>

<h2>6. Cung cấp đường thoát</h2>

<p>Luôn luôn có lựa chọn dự phòng cho người dùng, cho phép họ bày tỏ ý định của mình như: &ldquo;Tôi muốn đợi và nói chuyện với một con người thực sự. Tôi không muốn tiếp tục nói chuyện với robot nữa.&rdquo;</p>

<h2>7. Sử dụng đầu vào có cấu trúc khi có thể</h2>

<p>Một cuộc đàm thoại mà càng có nhiều hướng đi khác nhau thì nguy cơ đi vào ngõ cụt càng lớn. Đừng đặt người dùng vào tình thế khiến họ phải đoán xem điều gì là đúng cần phải làm. Bàn phím mềm cho phép nhập một lượng ký tự nhất định và có thể tránh phải đánh máy nhiều. Ví dụ, thay vì yêu cầu người dùng cuối gõ các từ &ldquo;có&rdquo; hoặc &ldquo;không&rdquo;, hãy cho họ 2 nút tùy chọn. Hoặc xác nhận đầu vào có cấu trúc như địa chỉ email trước khi gửi. Bằng cách này, bạn có thể đưa ra được các phản hồi đúng mục đích và tránh phải xử lý các văn bản phức tạp mà đầu vào không đoán trước được.</p>

<h2>8. Mọi người đều thấy được điểm giống nhau</h2>

<p>Các bot không chỉ xuất hiện với người dùng cuối mà người thiết kế bot cũng cần phải ghi lại được các bối cảnh hội thoại &ndash; bot trả lời như thế nào và người dùng cuối phản hồi lại ra sao. Các thông điệp dài hoặc phổ biến của bot có thể hiện thị ở trạng thái đóng để quản trị viên quản lý dễ dàng hơn. Trường hợp ngoại lệ là các thông điệp bot mang tính riêng tư với quản trị viên thì cần hiển thị luôn.</p>

<h1>Tuân thủ nhưng không bị giới hạn bởi các nguyên tắc</h1>

<p>Điều quan trọng cần chú ý đó là những nguyên tắc trên chắc chắn sẽ luôn được phát triển, do khả năng mới về mặt công nghệ hoặc đơn giản là một số nguyên tắc hướng dẫn chưa đúng. Chúng ta nên chấp nhận cả hai thực tế trên.
Tuy nhiên việc nắm bắt được các nguyên tắc trên sẽ làm cho mọi thứ trở lên dễ dàng hơn. Chúng ta đã có các nguyên tắc và giờ chỉ cần áp dụng chúng một cách có hệ thống và đồng nhất. Nếu không có các nguyên tắc này, bạn chỉ có thể thực hiện các ý tưởng của mình một cách ngẫu nhiên và hi vọng nó sẽ hiệu quả như mong muốn.</p>

<p>Bài dịch từ <a href="https://medium.com/intercom-inside/8-principles-of-bot-design-51f03df1d84c#.hb10iooyq">8 principles of bot design</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>conversational UI (user interface)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>IVR (Interactive Voice Response) &ndash; tổng đài trả lời tự động<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
