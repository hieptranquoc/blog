<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: en | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/categories/en/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2016-09-27T11:20:37+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to develop Angular 2 applications easily with Docker and angular-cli]]></title>
    <link href="http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli/"/>
    <updated>2016-09-22T12:44:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2016/09/22/angular-boilerplate.png" title="angular-boilerplate" ></p>

<p>Everyone who is new to Angular 2 usually has many difficulties to get started with it, even with the
getting started article from the Angular 2 official documentation. That&rsquo;s the reason why
<a href="https://cli.angular.io/">angular-cli</a> is created to ease the pain. <code>angular-cli</code> is a great CLI
tool, however, it takes a lot of time to get it working by installing nodejs and <code>angular-cli</code>.
Luckily, we&rsquo;ve created <a href="https://github.com/teracyhq/docker-angular-cli">docker-angular-cli</a> project
to build a Docker image so that anyone could use it right away for any Angular 2 projects without the
hassle of installing nodejs and <code>angular-cli</code>. This guide will help you get started in the most
easily and convenient way. It&rsquo;s assumed that you don&rsquo;t need to master Docker but only require that
Docker is installed on your machine and you could follow the instructions below.</p>

<!-- more -->


<h2>0. Prerequisites</h2>

<ul>
<li><p>Make sure the latest <code>Docker</code> and <code>docker-compose</code> is installed on your machine. If not, follow
<a href="https://docs.docker.com/docker-for-mac/">https://docs.docker.com/docker-for-mac/</a> or <a href="https://docs.docker.com/engine/installation/linux/">https://docs.docker.com/engine/installation/linux/</a> or
<a href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a> to install them.</p></li>
<li><p><code>docker-angular-cli</code> is tested with <code>Docker</code> v1.12.1 and <code>docker-compose</code> v1.8.0 with the native app
on Mac and on Ubuntu. It should work well on Windows, too.</p></li>
</ul>


<h2>1. Init a new project</h2>

<p>First, to init a new Angular 2 project, follow:</p>

<p><code>
$ mkdir new-ng-project
$ cd new-ng-project
$ docker run -it --rm -v "$PWD":/usr/src -w /usr/src teracy/angular-cli /bin/bash
</code></p>

<p>After that, you should be presented with bash console for the docker container. Use <code>ng init</code> to
init a new project.</p>

<p>```</p>

<h1>ng init &mdash;name &lt;project-name> &mdash;style scss</h1>

<p>```</p>

<p>You should see the &lt;project-name> yourself. By default, the style file is <code>css</code>. I recommend using
<code>scss</code> extension for style files.</p>

<h2>2. Add Dockerfile and docker-compose.yml file</h2>

<p>Add Dockerfile and docker-compose.yml as I did with <a href="https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642">https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642</a></p>

<h2>3. Note for angular-boilerplate</h2>

<p>For easier setup with best practices, you can combine the 2 steps above (1 + 2) with:</p>

<p><code>
$ git clone https://github.com/teracyhq/angular-boilerplate.git --depth=1 new-ng-project
</code></p>

<p>More useful stuff will come to <a href="https://github.com/teracyhq/angular-boilerplate">angular-boilerplate</a>
later such as CI, CD, production deployment, server side rendering, desktop app and native apps, etc
best practices.</p>

<h2>4. Serve</h2>

<p>To start serving the web app, follow:</p>

<p><code>
$ docker-compose up serve
</code></p>

<p>and then open <a href="http://localhost:4200">http://localhost:4200</a> to see the web app.</p>

<h2>5. Test</h2>

<p>To run the unit test with Karma and Chrome, follow:</p>

<p><code>
$ docker-compose up test
</code></p>

<p>and you should see the unit test running on Chrome browser pre-installed on the Docker image.</p>

<h2>6. Exec commands</h2>

<p>To exec some commands, for example:</p>

<p>for linting (code style checking):</p>

<p><code>
$ docker-compose exec serve ng lint
</code></p>

<p>or for installing more npm packages:</p>

<p><code>
$ docker-compose exec serve npm install
</code></p>

<p>or for running unit tests:</p>

<p><code>
$ docker-compose exec serve ng test --browsers Chrome_no_sandbox
</code></p>

<p>You can exec any commands on the running container.</p>

<h2>7. Develop</h2>

<p>Or if you want to open a new ssh session, open a new terminal window, and execute this:</p>

<p><code>
$ cd new-ng-project
$ docker-compose run serve /bin/bash
</code></p>

<p>and then you should see something like:</p>

<p><code>
Starting virtual X frame buffer: Xvfb.
Executing command /bin/bash
root@6d15153f5858:~#
</code>
And now you can execute any commands you want.</p>

<p>That&rsquo;s it. Now you should start developing Angular 2 applications more easily with <code>docker-compose</code>
and <code>angular-cli</code> by using <code>docker-angular-cli</code>.</p>

<p>You can follow the following tutorial to create a simple todo application: <a href="https://www.sitepoint.com/angular-2-tutorial/">https://www.sitepoint.com/angular-2-tutorial/</a></p>

<h2>8. Learn more</h2>

<ul>
<li><a href="https://github.com/AngularClass/awesome-angular2">https://github.com/AngularClass/awesome-angular2</a></li>
<li><a href="https://github.com/timjacobi/angular2-education">https://github.com/timjacobi/angular2-education</a></li>
</ul>


<p>If you need any consultancy or outsourcing, please contact us. We&rsquo;re eager to build world class web
applications for you!</p>

<p>Happy developing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[teracy-dev vision]]></title>
    <link href="http://blog.teracy.com/2016/08/19/teracy-dev-vision/"/>
    <updated>2016-08-19T16:27:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/19/teracy-dev-vision</id>
    <content type="html"><![CDATA[<p>teracy-dev has been being developed and in use from the first days of Teracy, it&rsquo;s been
about 3 years<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> now. We&rsquo;re in a hurry for a really big, exciting release for the next version of
teracy-dev. I&rsquo;d like to take this chance to share with you about teracy-dev vision first and many
other new features and improvements for the next long awaiting teracy-dev release.</p>

<!-- more -->


<p>Let&rsquo;s get started with a story about my first working days as a developer when joining my first
company 8 years ago. As developers, it&rsquo;s expected that we should have our development environment
ready before starting coding. At that time, my company used Maven to build Java projects and I was
required to install it. However, as a junior, I had difficulties to install it on the Ubuntu
computer provided to me. I struggled with it for nearly a day and eventually I had to ask for
help to install it successfully. This is a true story. Now I can even install it in just some
minutes with a few lines of commands because I have more experience.</p>

<p>Now just imagine what if juniors don&rsquo;t have to set up these boring tools each by each but just enjoy
coding, that&rsquo;s the more fun part. What if all developers should have the same development environment
even they use different kinds of operating systems so that we don&rsquo;t have to deal with the very common
problem: &ldquo;But it works on my machine&rdquo;. What if the production environment is easily set up exactly
the same on a developer machine to debug and fix things and vice versa?</p>

<p>These what ifs lead us to use <code>vagrant</code> as the base to complete these things as the first days of
Teracy journey. We&rsquo;d like to upgrade the vagrant dev environment easily, for example, <code>$ git pull</code>
then <code>$ vagrant reload --provision</code> and you&rsquo;re done. We have default configuration and we could
override it easily. We&rsquo;d like to use this development environment for all our projects: from our
internal projects to our clients' projects.</p>

<p>We created teracy-dev to solve the mentioned problems above, help boost our productivity and it could
even help us more than that. Everyone just enjoys it, we don&rsquo;t have to deal with installing things
manually, it&rsquo;s auto provided with just one command (<code>$ vagrant up</code>) thanks to the provision software.
We&rsquo;re using Chef to provision but we can use others to provision, too, for example Ansible, Puppet, etc.</p>

<p>We see that teracy-dev is so useful for developers, so we&rsquo;d like to share it, shape its future
together with anyone who wants to work with software. And we envision teracy-dev with the following
statement:</p>

<p><blockquote><p>teracy-dev is the best universal development tool for everyone.</p></blockquote></p>

<p>That&rsquo;s our vision for teracy-dev as the base development platform and we&rsquo;re going to make it true.
Note that it should be used for everyone, even with our QA engineers, with our manual testers, with
our employees, with our users as long as they follow exactly a little setup instruction guide.</p>

<p>I believe that everyone should use it as much as we enjoy using and developing it. It&rsquo;s been saving
us and our clients a lot of money as we don&rsquo;t have to spend the time to set up development environment
for each and every project manually.</p>

<p>We improve it day by day though our projects, we listen to our developers, our clients for feedback
on usage and development. However, we still have some problems with it. For example, on Windows, the
file sharing system is really slow. It&rsquo;s not really lightweight and modular enough to serve every
project&rsquo;s needs.</p>

<p>We know all these problems and we&rsquo;re going to fix these all with the next version by leveraging
Docker and Rsync. We intended to use Docker for long, we expected it should be in use since
teracy-dev v0.4.0 but we failed to make it. Now we promise you that teracy-dev v0.5.0 will leverage
Docker as the core workflow and it will rule the world of developers.</p>

<p>We will add more documentation for usage, accelerate the development pace so that you should benefit
from it as we do. Let&rsquo;s try using it once with
<a href="http://dev.teracy.org/docs/0.4.2/getting_started.html">teracy-dev v0.4.2</a>, it&rsquo;s open source and
totally free. You will love it as we do now for 3 years and counting. Let&rsquo;s together make it better
and better and better.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://blog.teracy.com/tags/teracy-dev/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to use django-celery-email on Heroku]]></title>
    <link href="http://blog.teracy.com/2015/12/21/how-to-use-django-celery-email-on-heroku/"/>
    <updated>2015-12-21T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2015/12/21/how-to-use-django-celery-email-on-heroku</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2015/12/21/django_celery.png" title="Django Celery" ></p>

<p>When I was asked to use a distributed task queue for emails on a Django project, I chose
django-celery-email. However, during developing and testing, I faced some problems due to the lack
of clear guide from django-celery-email, so I wrote this post as a step by step guide for anyone
who wants use it with much ease. So let&rsquo;s get started!</p>

<!-- more -->


<h2>Project Setup</h2>

<ul>
<li><p>You need to setup local development environment with teracy-dev v0.4.2:
<a href="http://dev.teracy.org/docs/0.4.2/getting_started.html">http://dev.teracy.org/docs/0.4.2/getting_started.html</a></p></li>
<li><p>We&rsquo;re going to use <a href="https://github.com/teracyhq/django-boilerplate">https://github.com/teracyhq/django-boilerplate</a> v0.4.0 to develop Django
applications:</p></li>
</ul>


<p><code>
$ vagrant ssh
$ ws
$ cd personal
$ mkdir django-celery
$ cd django-celery
$ git init
$ git remote add djbp https://github.com/teracyhq/django-boilerplate
$ git fetch djbp
$ git merge djbp/v0.4.0
</code></p>

<ul>
<li>We need to create a virtual environment for the Django app and to install dependencies:</li>
</ul>


<p><code>
$ mkvirtualenv django-celery
$ pip install -r requirements/dev.txt
</code></p>

<ul>
<li>Set the required environment variables:</li>
</ul>


<p>By following <a href="http://12factor.net/config,">http://12factor.net/config,</a> we should <code>export</code> the required variables. For development
convenience, .env file is supported and recommeded only for development mode. So let&rsquo;s create .env
file at <code>django-celery/.env</code> with the following content:</p>

<p><code>
ADMINS=(('&lt;your_name&gt;', '&lt;your_email&gt;'),)
DATABASE_URL=sqlite:///project/data/dj-celery.db
</code></p>

<p><code>ADMINS</code> variable is used for testing emails, you should fill in your admins details.</p>

<ul>
<li>Run the Django application:</li>
</ul>


<p><code>
$ ./manage.py migrate # migrate for the first time to create db schema creation and migration
$ ./manage.py runserver 0.0.0.0:8000
</code></p>

<p>You should see something like this:</p>

<p>```
(django-celery)vagrant@vagrant:~/workspace/personal/django-celery$ ./manage.py runserver 0.0.0.0:8000
Performing system checks&hellip;</p>

<p>System check identified no issues (0 silenced).
December 01, 2015 &ndash; 13:09:11
Django version 1.8.7, using settings &lsquo;settings.project.dev&rsquo;
Starting development server at <a href="http://0.0.0.0:8000/">http://0.0.0.0:8000/</a>
Quit the server with CONTROL-C.
```</p>

<p>Open <a href="http://localhost:8000,">http://localhost:8000,</a> you should see the 404 error page and it&rsquo;s expected. We&rsquo;ll add
functionalities for the application by next steps.</p>

<h2>Heroku Deployment</h2>

<p>Let&rsquo;s deploy the Django application on Heroku to apply continuous delivery philosophy.</p>

<p>Make sure you have an account at <a href="https://heroku.com">https://heroku.com</a></p>

<ul>
<li>Install Heroku Toolbelt</li>
</ul>


<p><code>
$ wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></p>

<ul>
<li>Login</li>
</ul>


<p><code>
$ heroku login
</code></p>

<ul>
<li>Create a Heroku application</li>
</ul>


<p><code>
$ ws
$ cd personal/django-celery
$ heroku create &lt;your_app_name&gt;
</code></p>

<ul>
<li>Configure</li>
</ul>


<p><code>
$ heroku config:set DJANGO_SETTINGS_MODULE=project.settings.prod
$ heroku config:set ADMINS="(('&lt;your_name&gt;', '&lt;your_email&gt;'),)"
</code></p>

<ul>
<li>Deploy</li>
</ul>


<p><code>
$ git push heroku master
$ heroku run python manage.py migrate
</code></p>

<p>After that, you should access your deployment app at: <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/</p>

<p>I created <code>dj-celery</code> app name and it&rsquo;s availalbe at: <a href="https://dj-celery.herokuapp.com/">https://dj-celery.herokuapp.com/</a></p>

<p>From now on, to update the deployment on Heroku, we just need to push new commits to the heroku
repository.</p>

<h2>django-userena Setup</h2>

<p>To see how emails work with celery, let&rsquo;s add user management functionalities which should also send
emails for confirming when signing up.</p>

<p>There is already an application for that, it is: <code>django-userena</code>.</p>

<ul>
<li><p>Install:</p>

<p>By following the installation guide at:
<a href="http://django-userena.readthedocs.org/en/latest/installation.html#installing-django-userena">http://django-userena.readthedocs.org/en/latest/installation.html#installing-django-userena</a> and
adapting to <code>django-boilerplate</code>.</p>

<ul>
<li><p>Add <code>django-userena&gt;=1.4.1,&lt;1.5.0</code> to <code>requirements/project/common.txt</code>, so we&rsquo;ll use 1.4.x
versions of <code>django-userena</code> like I did at:
<a href="https://github.com/hoatle/django-celery/commit/f153b2940aa1d3432f77fe5e5c5f219775ac071c">https://github.com/hoatle/django-celery/commit/f153b2940aa1d3432f77fe5e5c5f219775ac071c</a></p></li>
<li><p>Install with: <code>$ pip install -r requirements/dev.txt --upgrade</code> (<code>upgrade</code> here means installing
and upgrading any outdated packages)</p></li>
</ul>
</li>
<li><p>Configure:</p>

<p>By following the guide at:
<a href="http://django-userena.readthedocs.org/en/latest/installation.html#required-settings">http://django-userena.readthedocs.org/en/latest/installation.html#required-settings</a> like I did
at: <a href="https://github.com/hoatle/django-celery/commit/bd566a86ff654b69463be649e561800782cd91c9">https://github.com/hoatle/django-celery/commit/bd566a86ff654b69463be649e561800782cd91c9</a></p>

<p>There is a migration issue that requires to create apps/userena_patch like I did at:
<a href="https://github.com/hoatle/django-celery/commit/5ef6393aa64a9064aefe399cc07d64e492b2d580">https://github.com/hoatle/django-celery/commit/5ef6393aa64a9064aefe399cc07d64e492b2d580</a></p></li>
<li><p><code>makemigrations</code> for the accounts app:</p></li>
</ul>


<p><code>
$ ./manage.py makemigrations
</code></p>

<p>  Commit the changes like I did at:
  <a href="https://github.com/hoatle/django-celery/commit/d306ed4a25b1494a0955f08a8a7aa598fa30b578">https://github.com/hoatle/django-celery/commit/d306ed4a25b1494a0955f08a8a7aa598fa30b578</a></p>

<ul>
<li>Migrate and Run:</li>
</ul>


<p><code>
$ ./manage.py migrate
$ ./manage.py check_permissions
$ ./manage.py runserver 0.0.0.0:8000
</code></p>

<p>You should see the page of <a href="http://localhost:8000/accounts/signup">http://localhost:8000/accounts/signup</a> now. Let&rsquo;s signup a user and you
should see something similar on the console:</p>

<p>```
MIME-Version: 1.0
Content-Type: text/plain; charset=&ldquo;utf-8&rdquo;
Content-Transfer-Encoding: 7bit
Subject: Your signup at localhost.
From: webmaster@localhost
To: <a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#115;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#117;&#115;&#x65;&#x72;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#115;&#97;&#109;&#x70;&#108;&#101;&#x2e;&#117;&#115;&#101;&#x72;&#x40;&#x67;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a>
Date: Mon, 21 Dec 2015 11:02:30 -0000
Message-ID: <a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x32;&#x30;&#49;&#x35;&#x31;&#50;&#x32;&#x31;&#49;&#49;&#48;&#50;&#x33;&#x30;&#46;&#50;&#x33;&#x34;&#54;&#x33;&#x2e;&#x38;&#x30;&#x38;&#x34;&#x35;&#x40;&#x76;&#97;&#103;&#x72;&#x61;&#x6e;&#x74;&#x2e;&#118;&#x6d;">&#50;&#48;&#49;&#53;&#49;&#50;&#x32;&#x31;&#49;&#x31;&#48;&#50;&#51;&#x30;&#x2e;&#x32;&#x33;&#52;&#54;&#51;&#x2e;&#x38;&#x30;&#56;&#x34;&#53;&#x40;&#118;&#x61;&#103;&#114;&#x61;&#110;&#116;&#46;&#118;&#109;</a></p>

<p>Dear hoatle,</p>

<p>Thank you for signing up at localhost.</p>

<p>To activate your account you should click on the link below:</p>

<p><a href="http://localhost:8000/accounts/activate/fe547230a3039c476a127408e9d824894d0a9064/">http://localhost:8000/accounts/activate/fe547230a3039c476a127408e9d824894d0a9064/</a></p>

<p>Thanks for using our site!</p>

<p>Sincerely,
localhost</p>

<hr />

<p>```</p>

<ul>
<li>To deploy Heroku:</li>
</ul>


<p>Note: we need to set SITE_DOMAIN and SITE_NAME to match the created Heroku application.
These variables are already configured by django-boilerplate by default on development mode.</p>

<p><code>
$ heroku config:set SITE_DOMAIN=&lt;your_app_name&gt;.herokuapp.com
$ heroku config:set SITE_NAME=&lt;your_site_name&gt;
$ git push heroku master
$ heroku run python manage.py migrate
$ heroku run python manage.py check_permissions
</code></p>

<p>You should see the page of <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/accounts/signup now. However, don&rsquo;t
try to signup on the Heroku app yet because we need to configure the email backend.</p>

<h2>SMTP Email Backend Setup</h2>

<p>By default, development mode uses console backend and production mode uses SMTP backend for emails.
Let&rsquo;s use SMTP backend for both development mode on localhost and production mode on Heroku.</p>

<p>For easier setup, let&rsquo;s use mailgun addon (free plan) from the Heroku app:
<a href="https://elements.heroku.com/addons/mailgun">https://elements.heroku.com/addons/mailgun</a></p>

<p><code>
$ heroku addons:create mailgun:starter
</code></p>

<p>To see all available variables, use:</p>

<p><code>
$ heroku config
</code></p>

<p>and you should see something similar to this:</p>

<p><code>
=== dj-celery Config Vars
ADMINS:                 (('&lt;your_name&gt;', '&lt;your_email&gt;'),)
DATABASE_URL:           postgres://erdidqkixwegwg:hGZztw2Oh3EmNWfD5IfTb3XcyO@ec2-107-21-224-11.compute-1.amazonaws.com:5432/dembq6s6m1mohq
DJANGO_SETTINGS_MODULE: project.settings.prod
MAILGUN_API_KEY:        key-9587e40f127a1fe8fbab10622be69169
MAILGUN_DOMAIN:         appb8c22c19f6654edeb3c25768d4674002.mailgun.org
MAILGUN_PUBLIC_KEY:     pubkey-51b28300a981d7f184bb55c4726742d8
MAILGUN_SMTP_LOGIN:     postmaster@appb8c22c19f6654edeb3c25768d4674002.mailgun.org
MAILGUN_SMTP_PASSWORD:  f1c39a13079d8db398073fc6717de59a
MAILGUN_SMTP_PORT:      587
MAILGUN_SMTP_SERVER:    smtp.mailgun.org
SITE_DOMAIN:            dj-celery.herokuapp.com
SITE_NAME:              dj-celery
</code></p>

<p>We see that <code>MAILGUN_XXX</code> variables are provided, we will use it on development
mode by adding the following lines into the .env file from the config content of your app
environment:</p>

<p>```
EMAIL_BACKEND=&lsquo;django.core.mail.backends.smtp.EmailBackend&rsquo;</p>

<p>MAILGUN_API_KEY=&lt;your_app_environment_value>
MAILGUN_DOMAIN=&lt;your_app_environment_value>
MAILGUN_PUBLIC_KEY=&lt;your_app_environment_value>
MAILGUN_SMTP_LOGIN=&lt;your_app_environment_value>
MAILGUN_SMTP_PASSWORD=&lt;your_app_environment_value>
MAILGUN_SMTP_PORT=&lt;your_app_environment_value>
MAILGUN_SMTP_SERVER=&lt;your_app_environment_value>
```</p>

<p>Let&rsquo;s test if the email works:</p>

<p>```
$ ./manage.py shell</p>

<p>Python 2.7.6 (default, Apr 15 2015, 20:14:49)
Type &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<p>IPython 4.0.1 &mdash; An enhanced Interactive Python.
?         &ndash;> Introduction and overview of IPython&rsquo;s features.
%quickref &ndash;> Quick reference.
help      &ndash;> Python&rsquo;s own help system.
object?   &ndash;> Details about &lsquo;object&rsquo;, use &lsquo;object??&rsquo; for extra details.</p>

<p>In [1]: from django.core import mail</p>

<p>In [2]: mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)</p>

<p>In [3]:
```</p>

<p>You need to check your mailbox to see that a test email should be sent to you.</p>

<p>Now you could signup and receive email at: <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/accounts/signup/</p>

<h2>django-celery-email Setup</h2>

<p>If could see that <code>mail.mail_admins</code> is blocked and waiting until the email sending is finished.
To avoid these blocking, let&rsquo;s use Celery. Celery app is already setup by django-boilerplate at:
<a href="https://github.com/teracyhq/django-boilerplate/commit/7ea4306ae295d38ae35610b0882db1ea81a5d613">https://github.com/teracyhq/django-boilerplate/commit/7ea4306ae295d38ae35610b0882db1ea81a5d613</a></p>

<p>Let&rsquo;s just follow <a href="https://pypi.python.org/pypi/django-celery-email">https://pypi.python.org/pypi/django-celery-email</a> to configure it like I did at:
<a href="https://github.com/hoatle/django-celery/commit/96575fe6fdb746a3f5a8526bbf236864c6880fb6">https://github.com/hoatle/django-celery/commit/96575fe6fdb746a3f5a8526bbf236864c6880fb6</a></p>

<p>and then:</p>

<p><code>
$ pip install -r requirements/dev.txt --upgrade
</code></p>

<p>update EMAIL_BACKEND for .env file with:</p>

<p><code>
EMAIL_BACKEND='djcelery_email.backends.CeleryEmailBackend'
</code></p>

<p>One important step is to enable Celery by using <a href="https://elements.heroku.com/addons/cloudamqp">https://elements.heroku.com/addons/cloudamqp</a></p>

<p>To use cloudamqp heroku addon:</p>

<p><code>
$ heroku addons:create cloudamqp:lemur
</code></p>

<p>and you should see <code>CLOUDAMQP_URL</code> environment variable by <code>$ heroku config</code></p>

<p>Let&rsquo;s add that variable into the .env file:</p>

<p><code>
CLOUDAMQP_URL=&lt;your_app_environment_value&gt;
</code></p>

<p>The full .env file I created was at: <a href="https://gist.github.com/hoatle/7cb82d437213db4f373d">https://gist.github.com/hoatle/7cb82d437213db4f373d</a></p>

<p>To start Celery app: <code>$ ./scripts/celery.sh</code>, and you should see the following content:</p>

<p>```
 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; celery@vagrant v3.1.19 (Cipater)
&mdash;&mdash; <em><strong><em> &mdash;&mdash;&ndash;
&mdash;&ndash; * </em></strong>  * &mdash; Linux-3.13.0-49-generic-x86_64-with-debian-wheezy-sid
&mdash; * &ndash; </em><em><strong> &mdash;&ndash;
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; [config]
&ndash; <strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> app:         Project:0x2f9a710
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> transport:   amqp://ssnipivn:<strong>@jaguar.rmq.cloudamqp.com:5672/ssnipivn
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> results:     disabled
&ndash; </em><strong> &mdash;&ndash; * &mdash;&ndash; .> concurrency: 2 (prefork)
&mdash; </strong><strong><strong><em> &mdash;&mdash;
&mdash;&ndash; </em></strong></strong> &mdash;&mdash;&ndash; [queues]
 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; .> celery           exchange=celery(direct) key=celery</p>

<p>[tasks]
  . djcelery_email_send_multiple</p>

<p>[2015-12-21 12:13:22,788: INFO/Beat] beat: Starting&hellip;
[2015-12-21 12:13:24,532: INFO/MainProcess] Connected to amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
[2015-12-21 12:13:26,851: INFO/MainProcess] mingle: searching for neighbors
[2015-12-21 12:13:31,216: INFO/MainProcess] mingle: all alone
/home/vagrant/.virtualenvs/django-celery/lib/python2.7/site-packages/celery/fixups/django.py:265: UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments!
  warnings.warn(&lsquo;Using settings.DEBUG leads to a memory leak, never &rsquo;</p>

<p>[2015-12-21 12:13:36,019: WARNING/MainProcess] /home/vagrant/.virtualenvs/django-celery/lib/python2.7/site-packages/celery/fixups/django.py:265: UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments!
  warnings.warn(&lsquo;Using settings.DEBUG leads to a memory leak, never &rsquo;</p>

<p>[2015-12-21 12:13:36,023: WARNING/MainProcess] celery@vagrant ready.
```</p>

<p>After that, sending test email to admins should work without any blocking by opening a new terminal
window:</p>

<p>```
$ vagrant ssh
$ ws
$ cd personal/django-celery
$ workon django-celery
$ ./manage.py shell</p>

<p>Python 2.7.6 (default, Apr 15 2015, 20:14:49)
Type &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<p>IPython 4.0.1 &mdash; An enhanced Interactive Python.
?         &ndash;> Introduction and overview of IPython&rsquo;s features.
%quickref &ndash;> Quick reference.
help      &ndash;> Python&rsquo;s own help system.
object?   &ndash;> Details about &lsquo;object&rsquo;, use &lsquo;object??&rsquo; for extra details.</p>

<p>In [1]: from django.core import mail</p>

<p>In [2]: mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)
```</p>

<p>That&rsquo;s it. We&rsquo;re done on development mode. Let&rsquo;s deploy on Heroku with:</p>

<p><code>
$ git push heroku master
$ heroku ps:scale celery=1
</code></p>

<p><code>$ heroku logs -p celery</code> to see the logs of celery, you should see something like this:</p>

<p><code>
2015-12-21T12:30:35.946701+00:00 heroku[celery.1]: Starting process with command `scripts/celery.sh`
2015-12-21T12:30:37.616409+00:00 app[celery.1]: /app/.heroku/python/lib/python2.7/site-packages/dotenv.py:53: UserWarning: Not reading /app/.env - it doesn't exist.
2015-12-21T12:30:37.616419+00:00 app[celery.1]:   warnings.warn("Not reading {0} - it doesn't exist.".format(dotenv))
2015-12-21T12:30:38.278350+00:00 app[celery.1]: [2015-12-21 12:30:38,278: INFO/MainProcess] Connected to amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
2015-12-21T12:30:38.220898+00:00 app[celery.1]: [2015-12-21 12:30:38,220: WARNING/MainProcess] /app/.heroku/python/lib/python2.7/site-packages/celery/apps/worker.py:161: CDeprecationWarning:
2015-12-21T12:30:38.220902+00:00 app[celery.1]: Starting from version 3.2 Celery will refuse to accept pickle by default.
2015-12-21T12:30:38.220904+00:00 app[celery.1]: The pickle serializer is a security concern as it may give attackers
2015-12-21T12:30:38.220903+00:00 app[celery.1]:
2015-12-21T12:30:38.220905+00:00 app[celery.1]: the ability to execute any command.  It's important to secure
2015-12-21T12:30:38.220908+00:00 app[celery.1]: the default choice.
2015-12-21T12:30:38.220907+00:00 app[celery.1]: that enabling pickle should require a deliberate action and not be
2015-12-21T12:30:38.220906+00:00 app[celery.1]: your broker from unauthorized access when using pickle, so we think
2015-12-21T12:30:38.220909+00:00 app[celery.1]:
2015-12-21T12:30:38.220910+00:00 app[celery.1]: If you depend on pickle then you should set a setting to disable this
2015-12-21T12:30:38.220910+00:00 app[celery.1]: warning and to be sure that everything will continue working
2015-12-21T12:30:38.220914+00:00 app[celery.1]: You must only enable the serializers that you will actually use.
2015-12-21T12:30:38.220913+00:00 app[celery.1]:     CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
2015-12-21T12:30:38.220912+00:00 app[celery.1]:
2015-12-21T12:30:38.220915+00:00 app[celery.1]:
2015-12-21T12:30:38.220913+00:00 app[celery.1]:
2015-12-21T12:30:38.220915+00:00 app[celery.1]:
2015-12-21T12:30:38.220911+00:00 app[celery.1]: when you upgrade to Celery 3.2::
2015-12-21T12:30:38.220917+00:00 app[celery.1]:
2015-12-21T12:30:38.223101+00:00 app[celery.1]: ---- **** -----
2015-12-21T12:30:38.220916+00:00 app[celery.1]:   warnings.warn(CDeprecationWarning(W_PICKLE_DEPRECATED))
2015-12-21T12:30:38.223104+00:00 app[celery.1]: - ** ---------- .&gt; app:         Project:0x7f590f5fad10
2015-12-21T12:30:38.223107+00:00 app[celery.1]: --- ***** ----- [queues]
2015-12-21T12:30:38.223111+00:00 app[celery.1]:   . djcelery_email_send_multiple
2015-12-21T12:30:38.223102+00:00 app[celery.1]: --- * ***  * -- Linux-3.13.0-66-generic-x86_64-with-debian-jessie-sid
2015-12-21T12:30:38.262153+00:00 app[celery.1]: [2015-12-21 12:30:38,261: INFO/Beat] beat: Starting...
2015-12-21T12:30:38.223098+00:00 app[celery.1]:  
2015-12-21T12:30:38.301313+00:00 app[celery.1]: [2015-12-21 12:30:38,301: INFO/MainProcess] mingle: searching for neighbors
2015-12-21T12:30:38.223105+00:00 app[celery.1]: - ** ---------- .&gt; results:     disabled
2015-12-21T12:30:38.223109+00:00 app[celery.1]:                 
2015-12-21T12:30:38.223100+00:00 app[celery.1]:  -------------- celery@91af8d04-4b15-482e-937b-0f9a49a0eff7 v3.1.19 (Cipater)
2015-12-21T12:30:38.223102+00:00 app[celery.1]: -- * - **** ---
2015-12-21T12:30:38.223106+00:00 app[celery.1]: - *** --- * --- .&gt; concurrency: 8 (prefork)
2015-12-21T12:30:38.223109+00:00 app[celery.1]:
2015-12-21T12:30:38.223103+00:00 app[celery.1]: - ** ---------- [config]
2015-12-21T12:30:38.223106+00:00 app[celery.1]: -- ******* ----
2015-12-21T12:30:38.223110+00:00 app[celery.1]: [tasks]
2015-12-21T12:30:38.223104+00:00 app[celery.1]: - ** ---------- .&gt; transport:   amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
2015-12-21T12:30:38.223108+00:00 app[celery.1]:  -------------- .&gt; celery           exchange=celery(direct) key=celery
2015-12-21T12:30:38.223111+00:00 app[celery.1]:
2015-12-21T12:30:39.322701+00:00 app[celery.1]: [2015-12-21 12:30:39,322: INFO/MainProcess] mingle: all alone
2015-12-21T12:30:39.352403+00:00 app[celery.1]: [2015-12-21 12:30:39,352: WARNING/MainProcess] celery@91af8d04-4b15-482e-937b-0f9a49a0eff7 ready.
2015-12-21T12:30:36.537615+00:00 heroku[celery.1]: State changed from starting to up
</code></p>

<p>You could try sending test emails to admins with:</p>

<p>```
$ heroku run python manage.py shell
Running python manage.py shell on dj-celery&hellip; up, run.9412
/app/.heroku/python/lib/python2.7/site-packages/dotenv.py:53: UserWarning: Not reading /app/.env &ndash; it doesn&rsquo;t exist.
  warnings.warn(&ldquo;Not reading {0} &ndash; it doesn&rsquo;t exist.&rdquo;.format(dotenv))
Python 2.7.10 (default, May 27 2015, 20:38:41)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.
(InteractiveConsole)</p>

<blockquote><blockquote><blockquote><p>from django.core import mail
mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)
```</p></blockquote></blockquote></blockquote>

<p>That&rsquo;s it, email sending is not blocked anymore. The full project for this guide is located at:
<a href="https://github.com/hoatle/django-celery">https://github.com/hoatle/django-celery</a></p>

<h2>Remote Debugging Python Tip</h2>

<p>This is a bonus if you need to remote debug Python applications. You could apply this for
Django projects, too: <a href="http://dev.teracy.org/docs/develop/python_dev_guide.html#debugging">http://dev.teracy.org/docs/develop/python_dev_guide.html#debugging</a></p>

<h2>Summary</h2>

<p>In this post, I&rsquo;ve guided you step by step to setup Celery as a distributed task queue for emails
on Django projects. It&rsquo;s very easy to set everything up thanks to the django-boilerplate project.</p>

<p>If you need any Django consultant or Django development, don&rsquo;t hesitate to contact us at:
<a href="&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#x68;&#113;&#64;&#116;&#101;&#114;&#97;&#99;&#x79;&#x2e;&#99;&#111;&#109;">&#x68;&#x71;&#x40;&#x74;&#x65;&#x72;&#x61;&#x63;&#x79;&#x2e;&#x63;&#111;&#109;</a> and we&rsquo;re very eager to work with you on Django, Python projects.</p>

<p>Happy Django developing!</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/bread-and-pepper/django-userena">https://github.com/bread-and-pepper/django-userena</a></li>
<li><a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></li>
<li><a href="https://pypi.python.org/pypi/django-celery-email">https://pypi.python.org/pypi/django-celery-email</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to make JWT requests with httpie-jwt-auth plugin?]]></title>
    <link href="http://blog.teracy.com/2015/09/03/how-to-make-jwt-requests-with-httpie-jwt-auth-plugin/"/>
    <updated>2015-09-03T11:33:00+00:00</updated>
    <id>http://blog.teracy.com/2015/09/03/how-to-make-jwt-requests-with-httpie-jwt-auth-plugin</id>
    <content type="html"><![CDATA[<p>At Teracy, we embrace JWT (JSON Web Tokens)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>  for REST APIs to make secure requests. Just for
your information: &ldquo;JSON Web Tokens are an open, industry standard RFC 7519 method for representing
claims securely between two parties&rdquo;.</p>

<!-- more -->


<p>We&rsquo;re using JWT for our REST APIs basing on the flask-boilerplate<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> project that are empowering
our clients' web applications and our internal projects.</p>

<p>And to test REST APIs, we&rsquo;re using a really simple powerful http client called httpie<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> .</p>

<p>To make a JWT request with <code>httpie</code>, you need to use the following command:</p>

<p><code>
$ http example.org Authorization:'Bearer jwt_token_here'
</code></p>

<p>Hower, typing <code>Authorization</code> with the exact value format is a bit hard and error-prone, that&rsquo;s the
reason why we created <a href="https://github.com/teracyhq/httpie-jwt-auth">httpie-jwt-auth</a> plugin with the first v0.1.0 release. After installing
<code>httpie-jwt-auth</code>, you could use this instead:</p>

<p><code>
$ http --auth-type=jwt --auth=jwt_token_here: example.org
</code></p>

<p>That&rsquo;s it. It&rsquo;s really easy to use for any JWT requests with <code>httpie</code>.</p>

<p>Please note that colon character at the end of <code>jwt_token_here</code>, we&rsquo;re going to work on removing
the redundant colon character with: <a href="https://github.com/teracyhq/httpie-jwt-auth/issues/3">https://github.com/teracyhq/httpie-jwt-auth/issues/3</a></p>

<p>Hope that you&rsquo;ll like it and use it as much as we do.</p>

<p>Happy developing and debugging!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://jwt.io/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>https://github.com/teracyhq/flask-boilerplate<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>https://github.com/jkbrzt/httpie<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Teracy happy birthday Slack bot]]></title>
    <link href="http://blog.teracy.com/2015/07/22/teracy-birthday-slack-bot/"/>
    <updated>2015-07-22T09:19:00+00:00</updated>
    <id>http://blog.teracy.com/2015/07/22/teracy-birthday-slack-bot</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2015/07/22/teracy_birthday_slack_bot.png" title="Teracy happy birthday Slack bot" ></p>

<p>Getting everything automated is one of my daily tasks, such as running tests automatically each time
there is a new commit, packaging products and sending them to customers, or deploying the
staging/ production servers when a project manager releases a new version, and more.</p>

<!-- more -->


<p>Today my task is something quite different: Congrats team members on their birthdays automatically
by the data got from Google calendar. After a little search, there are many automation solutions to
do it: from commercial Zapier, IFFT to opensource like Huginn.
I want something simple to use, maintenance-free, and free for small usage, so my last
choice is Zapier. It has already had the recipe<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to read events from Google calendar and another
action to interactive with Slack that will be easy to start (although the document of the recipe
is not quite clear for a new user like me). Here is the recipe for Zapier:</p>

<p><img class="center" src="/images/2015/07/22/Zapier_recipe_config.png" title="Zapier recipe config" ></p>

<p>With this recipe, Zapier will notify to the #_general slack channel with the message got from the
calendar description at the time of the event start. To make thing more interesting, I want to
attach a birthday cake image which has an employee name on it along with the message so I use PHP GD
to show a dynamic birthday cake taking the employee name from the calendar title and add it to the
image. It took me 30 minutes to get the birthday cake image which has space for the text, choose a
font and add it to my script. Finally, uploading it to our server and here is the result:</p>

<p><img class="center" src="/images/2015/07/22/cake_sample.png" title="Birthday cake" ></p>

<p>This PHP script<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> along with the Zapier recipe above makes the birthday reminder more interesting.
What I&rsquo;m thinking now is some funny fortune teller texts which are added randomly to the cake, a
lucky draw game for the team members to pick up their birthday gift and hopefully some online
merchants will open their API for our script to bring the gift to our team members' homes.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>https://zapier.com/zapbook/google-calendar/slack/<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>https://github.com/teracyhq/birthday-image<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
