<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: how-to | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/categories/how-to/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2016-11-23T11:33:27+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to develop and deploy React applications easily and fast with Webpack, ES6+ and Docker]]></title>
    <link href="http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker/"/>
    <updated>2016-11-07T07:18:00+00:00</updated>
    <id>http://blog.teracy.com/2016/11/07/how-to-develop-and-deploy-react-applications-easily-and-fast-with-webpack-es6-plus-and-docker</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>React is an awesome library to work with, however, we must pick up other libraries to build up a
robust application such as redux, redux-connect, server side rendering, redux-form, etc. After that,
we must organize the application structure with best practices to develop and deploy it. Doing all
these tasks requires some good experiences, so it&rsquo;s very difficult for a newbie. Good news is that there
are many starter boilerplate projects out there for us to choose. And today we&rsquo;d like to introduce
you a starter React boilerplate for faster development and deployment.</p>

<!-- more -->


<p>There is a good starter React boilerplate with the following outstanding batteries included:</p>

<ul>
<li>Universal rendering (both client and server side rendering from the same client side code)</li>
<li>Babel for ES6+ for writing modern JS syntax today</li>
<li>Webpack for bundling, hot module reloading</li>
<li>Redux, Redux Dev Tools, redux-form, React Router</li>
<li>ESLint consistent style checking</li>
<li>Unit testing</li>
<li>bootstrap and font-awesome</li>
<li>And many other cool things</li>
</ul>


<p>However, the project is not active anymore, so we decided to fork and update it a bit to work with
Docker easier and faster. Let&rsquo;s get started with
<a href="https://github.com/hoatle/react-redux-universal-hot-example">https://github.com/hoatle/react-redux-universal-hot-example</a> then.</p>

<h2>Prerequisites</h2>

<p><img class="center" src="/images/2016/11/07/react-prerequisites.gif" title="React Project Prerequisites" ></p>

<p>Make sure you have the following softwares installed:</p>

<ul>
<li>git</li>
<li>docker</li>
<li>docker-compose</li>
</ul>


<p>Make sure that docker and docker-compose are available by checking <code>git version</code>, <code>docker info</code> and
<code>docker-compose version</code> as following:</p>

<p><code>bash
$ git version
git version 2.10.2
</code></p>

<p><code>bash
$ docker info
Containers: 9
Running: 1
Paused: 0
Stopped: 8
Images: 216
Server Version: 1.12.1
Storage Driver: aufs
Root Dir: /var/lib/docker/aufs
Backing Filesystem: extfs
Dirs: 244
Dirperm1 Supported: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
Volume: local
Network: host bridge null overlay
Swarm: inactive
Runtimes: runc
Default Runtime: runc
Security Options: seccomp
Kernel Version: 4.4.20-moby
Operating System: Alpine Linux v3.4
OSType: linux
Architecture: x86_64
CPUs: 2
Total Memory: 1.953 GiB
Name: moby
ID: W2PL:SOAQ:Y24X:VTFK:2Z3X:3CON:HWRK:7EMB:E2D4:EAPJ:NSKY:YHJ2
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): true
File Descriptors: 20
Goroutines: 34
System Time: 2016-11-07T07:45:16.819335883Z
EventsListeners: 1
No Proxy: *.local, 169.254/16
Username: hoatle
Registry: https://index.docker.io/v1/
Insecure Registries:
127.0.0.0/8
</code></p>

<p><code>bash
$ docker-compose version
docker-compose version 1.8.0, build f3628c7
docker-py version: 1.9.0
CPython version: 2.7.9
OpenSSL version: OpenSSL 1.0.2h 3 May 2016
</code></p>

<p>If you get the similar output, you&rsquo;re good to go to the next step.</p>

<h2>Git clone the project</h2>

<p><img class="center" src="/images/2016/11/07/react-clone.gif" title="React Project Git Clone" ></p>

<p>We&rsquo;re developing a React application named: &ldquo;my-app&rdquo;. Let&rsquo;s clone the starter project first:</p>

<p><code>bash
$ mkdir -p ~/teracy-dev/workspace
$ cd ~/teracy-dev/workspace
$ git clone https://github.com/hoatle/react-redux-universal-hot-example.git my-app
</code></p>

<h2>Development</h2>

<p><img class="center" src="/images/2016/11/07/react-development.gif" title="React Project Development" ></p>

<p>Docker is really awesome to create an isolated consistent development and deployment environment and
it&rsquo;s super fast, too. We&rsquo;re leveraging Docker and Docker workflow for all our projects at Teracy,
both internal and outsourcing projects.
After cloning the starter project, let&rsquo;s start developing with:</p>

<p><code>bash
$ cd ~/teracy-dev/workspace/my-app
$ docker-compose pull &amp;&amp; docker-compose up
</code></p>

<p>If you get the following error output:</p>

<p><code>bash
ERROR: for dev Cannot start service dev: driver failed programming external connectivity on endpoint myapp_dev_1 (e2105083bdacaf5bb0684aa7a34ae0dc92b20cc748a31491368c7afa3e51da30): Error starting userland proxy: Bind for 0.0.0.0:3000 failed: port is already allocated
ERROR: Encountered errors while bringing up the project.
</code></p>

<p>then make sure the port 3000 is available for &ldquo;my-app&rdquo; to use.</p>

<p>If you get the following output:</p>

<p><code>bash
$ docker-compose pull &amp;&amp; docker-compose up
Pulling dev (hoatle/react-redux-universal-hot-example:dev_latest)...
dev_latest: Pulling from hoatle/react-redux-universal-hot-example
43c265008fae: Already exists
af36d2c7a148: Already exists
143e9d501644: Already exists
df720fc8e4f1: Already exists
eae19baa28ff: Already exists
9004de327d6a: Already exists
753292cc4b91: Already exists
21edf49ccd04: Pull complete
5571a198d5e5: Pull complete
12965aa2aa24: Pull complete
cd5c00a0e311: Pull complete
5b4a21012860: Pull complete
Digest: sha256:947e1889ff53d65cd2e9dd3357d45cf8714504995564e0a7183a5ff13a605ac0
Status: Downloaded newer image for hoatle/react-redux-universal-hot-example:dev_latest
Creating myapp_dev_1
Attaching to myapp_dev_1
dev_1 | yarn install v0.16.1
dev_1 | success Already up-to-date.
dev_1 | Done in 0.31s.
dev_1 | npm info it worked if it ends with ok
dev_1 | npm info using npm@3.10.8
dev_1 | npm info using node@v6.9.1
dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~predev: numerologist-app@0.1.0-SNAPSHOT
dev_1 | npm info lifecycle numerologist-app@0.1.0-SNAPSHOT~dev: numerologist-app@0.1.0-SNAPSHOT
dev_1 |
dev_1 | &gt; numerologist-app@0.1.0-SNAPSHOT dev /opt/app
dev_1 | &gt; concurrent --kill-others "npm run watch-client" "npm run start-dev" "npm run start-dev-api"
dev_1 |
dev_1 | Warning: "concurrent" command is deprecated, use "concurrently" instead.
dev_1 |
dev_1 | [1] npm
dev_1 | [1] info it worked if it ends with ok
dev_1 | [1] npm info using npm@3.10.8
dev_1 | [1] npm info using node@v6.9.1
dev_1 | [0] npm
dev_1 | [0]
dev_1 | [0] info
dev_1 | [0]
dev_1 | [0] it worked if it ends with
dev_1 | [0] ok
dev_1 | [0] npm
dev_1 | [0]
dev_1 | [0] info
dev_1 | [0]
dev_1 | [0] using
dev_1 | [0] npm@3.10.8
dev_1 | [0] npm
dev_1 | [0]
dev_1 | [0] info
dev_1 | [0]
dev_1 | [0] using node@v6.9.1
dev_1 | [2] npm
dev_1 | [2]
dev_1 | [2] info
dev_1 | [2]
dev_1 | [2] it worked if it ends with
dev_1 | [2] ok
dev_1 | [2] npm
dev_1 | [2]
dev_1 | [2] info
dev_1 | [2]
dev_1 | [2] using
dev_1 | [2] npm@3.10.8
dev_1 | [2] npm
dev_1 | [2]
dev_1 | [2] info
dev_1 | [2]
dev_1 | [2] using
dev_1 | [2] node@v6.9.1
dev_1 | [1] npm
dev_1 | [1]
dev_1 | [1] info lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [1] npm
dev_1 | [1]
dev_1 | [1] info
dev_1 | [1]
dev_1 | [1] lifecycle
dev_1 | [1] numerologist-app@0.1.0-SNAPSHOT~start-dev: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [1]
dev_1 | [1] &gt; numerologist-app@0.1.0-SNAPSHOT start-dev /opt/app
dev_1 | [1] &gt; better-npm-run start-dev
dev_1 | [1]
dev_1 | [1] running better-npm-run in /opt/app
dev_1 | [1] Executing script: start-dev
dev_1 | [1]
dev_1 | [1] to be executed: node ./bin/server.js
dev_1 | [0] npm
dev_1 | [0]
dev_1 | [0] info
dev_1 | [0]
dev_1 | [0] lifecycle
dev_1 | [0] numerologist-app@0.1.0-SNAPSHOT~prewatch-client: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [0] npm
dev_1 | [0]
dev_1 | [0] info
dev_1 | [0]
dev_1 | [0] lifecycle
dev_1 | [0] numerologist-app@0.1.0-SNAPSHOT~watch-client: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [0]
dev_1 | [0] &gt; numerologist-app@0.1.0-SNAPSHOT watch-client /opt/app
dev_1 | [0] &gt; better-npm-run watch-client
dev_1 | [0]
dev_1 | [2] npm
dev_1 | [2]
dev_1 | [2] info
dev_1 | [2] lifecycle numerologist-app@0.1.0-SNAPSHOT~prestart-dev-api: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [0] running better-npm-run in /opt/app
dev_1 | [2] npm
dev_1 | [2]
dev_1 | [2] info
dev_1 | [2] lifecycle
dev_1 | [2] numerologist-app@0.1.0-SNAPSHOT~start-dev-api: numerologist-app@0.1.0-SNAPSHOT
dev_1 | [2]
dev_1 | [2] &gt; numerologist-app@0.1.0-SNAPSHOT start-dev-api /opt/app
dev_1 | [2] &gt; better-npm-run start-dev-api
dev_1 | [2]
dev_1 | [0] Executing script: watch-client
dev_1 | [0]
dev_1 | [0] to be executed: node webpack/webpack-dev-server.js
dev_1 | [2] running better-npm-run in /opt/app
dev_1 | [2] Executing script: start-dev-api
dev_1 | [2]
dev_1 | [2] to be executed: node ./bin/api.js
dev_1 | [0] ==&gt; ðŸš§ Webpack development server listening on port 3001
dev_1 | [2] ----
dev_1 | [2] ==&gt; ðŸŒŽ API is running on port 3030
dev_1 | [2] ==&gt; ðŸ’» Send requests to http://localhost:3030
dev_1 | [1] ----
dev_1 | [1] ==&gt; âœ… React Redux Example is running, talking to API server on 3030.
dev_1 | [1] ==&gt; ðŸ’» Open http://0.0.0.0:3000 in a browser to view the app.
dev_1 | [0] Hash: 4bfaa3d4b9c381888d2a
dev_1 | [0] Version: webpack 1.13.3
dev_1 | [0] Time: 44424ms
dev_1 | [0] Asset Size Chunks Chunk Names
dev_1 | [0] af7ae505a9eed503f8b8e6982036873e.woff2 77.2 kB [emitted]
dev_1 | [0] f4769f9bdb7466be65088239c12046d1.eot 20.1 kB [emitted]
dev_1 | [0] fa2772327f55d8198301fdb8bcfc8158.woff 23.4 kB [emitted]
dev_1 | [0] e18bbf611f2a2e43afc071aa2f4e1512.ttf 45.4 kB [emitted]
dev_1 | [0] 89889688147bd7575d6327160d64e760.svg 109 kB [emitted]
dev_1 | [0] 674f50d287a8c48dc19ba404d20fe713.eot 166 kB [emitted]
dev_1 | [0] 448c34a56d699c29117adc64c43affeb.woff2 18 kB [emitted]
dev_1 | [0] fee66e712a8a08eef5805a46892932ad.woff 98 kB [emitted]
dev_1 | [0] b06871f281fee6b241d60582ae9369b9.ttf 166 kB [emitted]
dev_1 | [0] 912ec66d7572ff821749319396470bde.svg 444 kB [emitted]
dev_1 | [0] c29770d03d2e95e3ea5899d57c6cfeab.jpg 92.2 kB [emitted]
dev_1 | [0] main-4bfaa3d4b9c381888d2a.js 9.61 MB 0 [emitted] main
dev_1 | [0] webpack built 4bfaa3d4b9c381888d2a in 44424ms
</code></p>

<p>Then it&rsquo;s good to go, open <a href="http://localhost:3000">http://localhost:3000</a> to see the starter project home page.</p>

<p>Try to make some changes to the source code, you should see the changes reflected immediately without
any page reloading, this is called hot module reloading, a really awesome feature to boost development
productivity.</p>

<p><img class="center" src="/images/2016/11/07/react-instant-changes.gif" title="React Project Instant Changes" ></p>

<h2>Deployment</h2>

<p>We&rsquo;re going to deploy the Docker image. There are guides that you can follow:</p>

<ul>
<li>Deploy on Heroku: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-heroku.md</a></li>
<li>Simple deployment with docker-compose: <a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/docs/dev-guide/how-to-deploy-on-production-with-docker-compose.md</a></li>
</ul>


<p>There are many production best practices that we should improve for the starter project.</p>

<h2>CI (continuous integration) and CD (continuous delivery)</h2>

<p>By using CI and CD systems like travis-ci and gitlab-ci, we could stick to the following process:</p>

<ul>
<li>Pull request (merge request) is sent &ndash;> CI checks.</li>
<li>Code changes &ndash;> CI checks.</li>
<li>CI checking is passed, then CD starts.</li>
<li>CD will deploy automatically, for example, to Heroku or other providers or your in-house data
center.</li>
</ul>


<p>You can update all of these steps by adjusting the following files accordingly:</p>

<ul>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.travis.yml</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml">https://github.com/hoatle/react-redux-universal-hot-example/blob/master/.gitlab-ci.yml</a></li>
</ul>


<p>At the CI checking step, we build Docker images (both development and production images):</p>

<ul>
<li><a href="https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/">https://hub.docker.com/r/hoatle/react-redux-universal-hot-example/tags/</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry">https://gitlab.com/hoatle/react-redux-universal-hot-example/container_registry</a></li>
</ul>


<p>The development images install all development stuff (excluding the source code) so that
all the developers should have the same development environment as long as they&rsquo;re using the same
development image.</p>

<p>The production (distribution) images install and package all runtime stuff so that everyone could
run the applications right away with the same runtime environment.</p>

<p>You can see these CI systems in action:</p>

<ul>
<li><a href="https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds">https://travis-ci.org/hoatle/react-redux-universal-hot-example/builds</a></li>
<li><a href="https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines">https://gitlab.com/hoatle/react-redux-universal-hot-example/pipelines</a></li>
</ul>


<p>Building on travis-ci is super fast and it&rsquo;s very slow on gitlab-ci. However, using gitlab is free
for unlimited projects, it includes Docker registry for free, too.</p>

<p>You can install gitlab on your server, it should be faster but you have to pay for the devops
maintenance cost.</p>

<p>If you could pay for Docker Hub, Github and Travis-CI, it&rsquo;s super fast and convenient for development
without the devops maintenance cost.</p>

<p>Or even better, ping us for consulting :&ndash;).</p>

<h2>react-boilerplate introduction</h2>

<p><code>react-redux-universal-hot-example</code> is a good start, however, there are still many improvements that
we&rsquo;d like to add, for example:</p>

<ul>
<li>Better code and component organization convention. The Angular 2 convention is a really great
inspiration for this.</li>
<li>Update dependencies to latest versions.</li>
<li>Build the deployment Docker that should include runtime stuff only, not development stuff.</li>
<li>Server side code should be production ready and optimized.</li>
</ul>


<p>And there are more to do. So we intent to create a better <code>react-redux-universal-hot-example</code> version,
we call it <code>react-boilerplate</code>.</p>

<p>The project is located at: <a href="https://github.com/teracyhq/react-boilerplate">https://github.com/teracyhq/react-boilerplate</a> . We&rsquo;ll announce v0.1.0 as soon
as possible when it&rsquo;s ready. So stay tuned! At present we should use <code>react-redux-universal-hot-example</code>.</p>

<h2>React application consulting and developing service</h2>

<p>We&rsquo;re offering React application consulting and developing service.</p>

<p>If you want React development and production deployment help, don&rsquo;t hesitate to ping us. We&rsquo;re
eager to help you to develop world-class React applications with better and better developer experience
and production deployment.</p>

<h2>Learn more</h2>

<p>You should learn more about React at:</p>

<ul>
<li><a href="http://exploringjs.com/es6/">http://exploringjs.com/es6/</a></li>
<li><a href="https://github.com/veggiemonk/awesome-docker">https://github.com/veggiemonk/awesome-docker</a></li>
<li><a href="https://github.com/enaqx/awesome-react">https://github.com/enaqx/awesome-react</a></li>
<li><a href="https://github.com/hoatle/react-redux-universal-hot-example#about">https://github.com/hoatle/react-redux-universal-hot-example#about</a></li>
</ul>


<p>Hopefully, this is a good start for React newbies to explore the whole new world of modern web
application development.</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to develop Angular 2 applications easily with Docker and angular-cli]]></title>
    <link href="http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli/"/>
    <updated>2016-09-22T12:44:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/22/how-to-develop-angular-2-applications-easily-with-docker-and-angular-cli</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2016/09/22/angular-boilerplate.png" title="angular-boilerplate" ></p>

<p>Everyone who is new to Angular 2 usually has many difficulties to get started with it, even with the
getting started article from the Angular 2 official documentation. That&rsquo;s the reason why
<a href="https://cli.angular.io/">angular-cli</a> is created to ease the pain. <code>angular-cli</code> is a great CLI
tool, however, it takes a lot of time to get it working by installing nodejs and <code>angular-cli</code>.
Luckily, we&rsquo;ve created <a href="https://github.com/teracyhq/docker-angular-cli">docker-angular-cli</a> project
to build a Docker image so that anyone could use it right away for any Angular 2 projects without the
hassle of installing nodejs and <code>angular-cli</code>. This guide will help you get started in the most
easily and convenient way. It&rsquo;s assumed that you don&rsquo;t need to master Docker but only require that
Docker is installed on your machine and you could follow the instructions below.</p>

<!-- more -->


<h2>0. Prerequisites</h2>

<ul>
<li><p>Make sure the latest <code>Docker</code> and <code>docker-compose</code> is installed on your machine. If not, follow
<a href="https://docs.docker.com/docker-for-mac/">https://docs.docker.com/docker-for-mac/</a> or <a href="https://docs.docker.com/engine/installation/linux/">https://docs.docker.com/engine/installation/linux/</a> or
<a href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a> to install them.</p></li>
<li><p><code>docker-angular-cli</code> is tested with <code>Docker</code> v1.12.1 and <code>docker-compose</code> v1.8.0 with the native app
on Mac and on Ubuntu. It should work well on Windows, too.</p></li>
</ul>


<h2>1. Init a new project</h2>

<p>First, to init a new Angular 2 project, follow:</p>

<p><code>
$ mkdir new-ng-project
$ cd new-ng-project
$ docker run -it --rm -v "$PWD":/usr/src -w /usr/src teracy/angular-cli /bin/bash
</code></p>

<p>After that, you should be presented with bash console for the docker container. Use <code>ng init</code> to
init a new project.</p>

<p>```</p>

<h1>ng init &mdash;name &lt;project-name> &mdash;style scss</h1>

<p>```</p>

<p>You should see the &lt;project-name> yourself. By default, the style file is <code>css</code>. I recommend using
<code>scss</code> extension for style files.</p>

<h2>2. Add Dockerfile and docker-compose.yml file</h2>

<p>Add Dockerfile and docker-compose.yml as I did with <a href="https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642">https://github.com/teracyhq/angular-boilerplate/commit/082a879c5df3fa0ae6ddc000d84512754b62a642</a></p>

<h2>3. Note for angular-boilerplate</h2>

<p>For easier setup with best practices, you can combine the 2 steps above (1 + 2) with:</p>

<p><code>
$ git clone https://github.com/teracyhq/angular-boilerplate.git --depth=1 new-ng-project
</code></p>

<p>More useful stuff will come to <a href="https://github.com/teracyhq/angular-boilerplate">angular-boilerplate</a>
later such as CI, CD, production deployment, server side rendering, desktop app and native apps, etc
best practices.</p>

<h2>4. Serve</h2>

<p>To start serving the web app, follow:</p>

<p><code>
$ docker-compose up serve
</code></p>

<p>and then open <a href="http://localhost:4200">http://localhost:4200</a> to see the web app.</p>

<h2>5. Test</h2>

<p>To run the unit test with Karma and Chrome, follow:</p>

<p><code>
$ docker-compose up test
</code></p>

<p>and you should see the unit test running on Chrome browser pre-installed on the Docker image.</p>

<h2>6. Exec commands</h2>

<p>To exec some commands, for example:</p>

<p>for linting (code style checking):</p>

<p><code>
$ docker-compose exec serve ng lint
</code></p>

<p>or for installing more npm packages:</p>

<p><code>
$ docker-compose exec serve npm install
</code></p>

<p>or for running unit tests:</p>

<p><code>
$ docker-compose exec serve ng test --browsers Chrome_no_sandbox
</code></p>

<p>You can exec any commands on the running container.</p>

<h2>7. Develop</h2>

<p>Or if you want to open a new ssh session, open a new terminal window, and execute this:</p>

<p><code>
$ cd new-ng-project
$ docker-compose run serve /bin/bash
</code></p>

<p>and then you should see something like:</p>

<p><code>
Starting virtual X frame buffer: Xvfb.
Executing command /bin/bash
root@6d15153f5858:~#
</code>
And now you can execute any commands you want.</p>

<p>That&rsquo;s it. Now you should start developing Angular 2 applications more easily with <code>docker-compose</code>
and <code>angular-cli</code> by using <code>docker-angular-cli</code>.</p>

<p>You can follow the following tutorial to create a simple todo application: <a href="https://www.sitepoint.com/angular-2-tutorial/">https://www.sitepoint.com/angular-2-tutorial/</a></p>

<h2>8. Learn more</h2>

<ul>
<li><a href="https://github.com/AngularClass/awesome-angular2">https://github.com/AngularClass/awesome-angular2</a></li>
<li><a href="https://github.com/timjacobi/angular2-education">https://github.com/timjacobi/angular2-education</a></li>
</ul>


<p>If you need any consultancy or outsourcing, don&rsquo;t hesitate to contact us. We&rsquo;re eager to build world class web
applications for you!</p>

<p>Happy developing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to use django-celery-email on Heroku]]></title>
    <link href="http://blog.teracy.com/2015/12/21/how-to-use-django-celery-email-on-heroku/"/>
    <updated>2015-12-21T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2015/12/21/how-to-use-django-celery-email-on-heroku</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2015/12/21/django_celery.png" title="Django Celery" ></p>

<p>When I was asked to use a distributed task queue for emails on a Django project, I chose
django-celery-email. However, during developing and testing, I faced some problems due to the lack
of clear guide from django-celery-email, so I wrote this post as a step by step guide for anyone
who wants use it with much ease. So let&rsquo;s get started!</p>

<!-- more -->


<h2>Project Setup</h2>

<ul>
<li><p>You need to setup local development environment with teracy-dev v0.4.2:
<a href="http://dev.teracy.org/docs/0.4.2/getting_started.html">http://dev.teracy.org/docs/0.4.2/getting_started.html</a></p></li>
<li><p>We&rsquo;re going to use <a href="https://github.com/teracyhq/django-boilerplate">https://github.com/teracyhq/django-boilerplate</a> v0.4.0 to develop Django
applications:</p></li>
</ul>


<p><code>
$ vagrant ssh
$ ws
$ cd personal
$ mkdir django-celery
$ cd django-celery
$ git init
$ git remote add djbp https://github.com/teracyhq/django-boilerplate
$ git fetch djbp
$ git merge djbp/v0.4.0
</code></p>

<ul>
<li>We need to create a virtual environment for the Django app and to install dependencies:</li>
</ul>


<p><code>
$ mkvirtualenv django-celery
$ pip install -r requirements/dev.txt
</code></p>

<ul>
<li>Set the required environment variables:</li>
</ul>


<p>By following <a href="http://12factor.net/config,">http://12factor.net/config,</a> we should <code>export</code> the required variables. For development
convenience, .env file is supported and recommeded only for development mode. So let&rsquo;s create .env
file at <code>django-celery/.env</code> with the following content:</p>

<p><code>
ADMINS=(('&lt;your_name&gt;', '&lt;your_email&gt;'),)
DATABASE_URL=sqlite:///project/data/dj-celery.db
</code></p>

<p><code>ADMINS</code> variable is used for testing emails, you should fill in your admins details.</p>

<ul>
<li>Run the Django application:</li>
</ul>


<p><code>
$ ./manage.py migrate # migrate for the first time to create db schema creation and migration
$ ./manage.py runserver 0.0.0.0:8000
</code></p>

<p>You should see something like this:</p>

<p>```
(django-celery)vagrant@vagrant:~/workspace/personal/django-celery$ ./manage.py runserver 0.0.0.0:8000
Performing system checks&hellip;</p>

<p>System check identified no issues (0 silenced).
December 01, 2015 &ndash; 13:09:11
Django version 1.8.7, using settings &lsquo;settings.project.dev&rsquo;
Starting development server at <a href="http://0.0.0.0:8000/">http://0.0.0.0:8000/</a>
Quit the server with CONTROL-C.
```</p>

<p>Open <a href="http://localhost:8000,">http://localhost:8000,</a> you should see the 404 error page and it&rsquo;s expected. We&rsquo;ll add
functionalities for the application by next steps.</p>

<h2>Heroku Deployment</h2>

<p>Let&rsquo;s deploy the Django application on Heroku to apply continuous delivery philosophy.</p>

<p>Make sure you have an account at <a href="https://heroku.com">https://heroku.com</a></p>

<ul>
<li>Install Heroku Toolbelt</li>
</ul>


<p><code>
$ wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh
</code></p>

<ul>
<li>Login</li>
</ul>


<p><code>
$ heroku login
</code></p>

<ul>
<li>Create a Heroku application</li>
</ul>


<p><code>
$ ws
$ cd personal/django-celery
$ heroku create &lt;your_app_name&gt;
</code></p>

<ul>
<li>Configure</li>
</ul>


<p><code>
$ heroku config:set DJANGO_SETTINGS_MODULE=project.settings.prod
$ heroku config:set ADMINS="(('&lt;your_name&gt;', '&lt;your_email&gt;'),)"
</code></p>

<ul>
<li>Deploy</li>
</ul>


<p><code>
$ git push heroku master
$ heroku run python manage.py migrate
</code></p>

<p>After that, you should access your deployment app at: <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/</p>

<p>I created <code>dj-celery</code> app name and it&rsquo;s availalbe at: <a href="https://dj-celery.herokuapp.com/">https://dj-celery.herokuapp.com/</a></p>

<p>From now on, to update the deployment on Heroku, we just need to push new commits to the heroku
repository.</p>

<h2>django-userena Setup</h2>

<p>To see how emails work with celery, let&rsquo;s add user management functionalities which should also send
emails for confirming when signing up.</p>

<p>There is already an application for that, it is: <code>django-userena</code>.</p>

<ul>
<li><p>Install:</p>

<p>By following the installation guide at:
<a href="http://django-userena.readthedocs.org/en/latest/installation.html#installing-django-userena">http://django-userena.readthedocs.org/en/latest/installation.html#installing-django-userena</a> and
adapting to <code>django-boilerplate</code>.</p>

<ul>
<li><p>Add <code>django-userena&gt;=1.4.1,&lt;1.5.0</code> to <code>requirements/project/common.txt</code>, so we&rsquo;ll use 1.4.x
versions of <code>django-userena</code> like I did at:
<a href="https://github.com/hoatle/django-celery/commit/f153b2940aa1d3432f77fe5e5c5f219775ac071c">https://github.com/hoatle/django-celery/commit/f153b2940aa1d3432f77fe5e5c5f219775ac071c</a></p></li>
<li><p>Install with: <code>$ pip install -r requirements/dev.txt --upgrade</code> (<code>upgrade</code> here means installing
and upgrading any outdated packages)</p></li>
</ul>
</li>
<li><p>Configure:</p>

<p>By following the guide at:
<a href="http://django-userena.readthedocs.org/en/latest/installation.html#required-settings">http://django-userena.readthedocs.org/en/latest/installation.html#required-settings</a> like I did
at: <a href="https://github.com/hoatle/django-celery/commit/bd566a86ff654b69463be649e561800782cd91c9">https://github.com/hoatle/django-celery/commit/bd566a86ff654b69463be649e561800782cd91c9</a></p>

<p>There is a migration issue that requires to create apps/userena_patch like I did at:
<a href="https://github.com/hoatle/django-celery/commit/5ef6393aa64a9064aefe399cc07d64e492b2d580">https://github.com/hoatle/django-celery/commit/5ef6393aa64a9064aefe399cc07d64e492b2d580</a></p></li>
<li><p><code>makemigrations</code> for the accounts app:</p></li>
</ul>


<p><code>
$ ./manage.py makemigrations
</code></p>

<p>  Commit the changes like I did at:
  <a href="https://github.com/hoatle/django-celery/commit/d306ed4a25b1494a0955f08a8a7aa598fa30b578">https://github.com/hoatle/django-celery/commit/d306ed4a25b1494a0955f08a8a7aa598fa30b578</a></p>

<ul>
<li>Migrate and Run:</li>
</ul>


<p><code>
$ ./manage.py migrate
$ ./manage.py check_permissions
$ ./manage.py runserver 0.0.0.0:8000
</code></p>

<p>You should see the page of <a href="http://localhost:8000/accounts/signup">http://localhost:8000/accounts/signup</a> now. Let&rsquo;s signup a user and you
should see something similar on the console:</p>

<p>```
MIME-Version: 1.0
Content-Type: text/plain; charset=&ldquo;utf-8&rdquo;
Content-Transfer-Encoding: 7bit
Subject: Your signup at localhost.
From: webmaster@localhost
To: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#58;&#115;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x75;&#115;&#x65;&#114;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x73;&#x61;&#x6d;&#112;&#108;&#101;&#46;&#117;&#115;&#101;&#114;&#x40;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a>
Date: Mon, 21 Dec 2015 11:02:30 -0000
Message-ID: <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#50;&#x30;&#x31;&#x35;&#49;&#50;&#50;&#49;&#x31;&#49;&#48;&#x32;&#51;&#48;&#46;&#50;&#51;&#x34;&#x36;&#51;&#46;&#56;&#x30;&#56;&#x34;&#x35;&#64;&#118;&#x61;&#x67;&#114;&#x61;&#110;&#x74;&#x2e;&#118;&#109;">&#x32;&#x30;&#x31;&#x35;&#x31;&#50;&#x32;&#49;&#49;&#x31;&#48;&#x32;&#51;&#48;&#46;&#50;&#x33;&#52;&#54;&#x33;&#46;&#56;&#48;&#x38;&#52;&#53;&#x40;&#118;&#x61;&#103;&#114;&#97;&#x6e;&#x74;&#x2e;&#118;&#x6d;</a></p>

<p>Dear hoatle,</p>

<p>Thank you for signing up at localhost.</p>

<p>To activate your account you should click on the link below:</p>

<p><a href="http://localhost:8000/accounts/activate/fe547230a3039c476a127408e9d824894d0a9064/">http://localhost:8000/accounts/activate/fe547230a3039c476a127408e9d824894d0a9064/</a></p>

<p>Thanks for using our site!</p>

<p>Sincerely,
localhost</p>

<hr />

<p>```</p>

<ul>
<li>To deploy Heroku:</li>
</ul>


<p>Note: we need to set SITE_DOMAIN and SITE_NAME to match the created Heroku application.
These variables are already configured by django-boilerplate by default on development mode.</p>

<p><code>
$ heroku config:set SITE_DOMAIN=&lt;your_app_name&gt;.herokuapp.com
$ heroku config:set SITE_NAME=&lt;your_site_name&gt;
$ git push heroku master
$ heroku run python manage.py migrate
$ heroku run python manage.py check_permissions
</code></p>

<p>You should see the page of <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/accounts/signup now. However, don&rsquo;t
try to signup on the Heroku app yet because we need to configure the email backend.</p>

<h2>SMTP Email Backend Setup</h2>

<p>By default, development mode uses console backend and production mode uses SMTP backend for emails.
Let&rsquo;s use SMTP backend for both development mode on localhost and production mode on Heroku.</p>

<p>For easier setup, let&rsquo;s use mailgun addon (free plan) from the Heroku app:
<a href="https://elements.heroku.com/addons/mailgun">https://elements.heroku.com/addons/mailgun</a></p>

<p><code>
$ heroku addons:create mailgun:starter
</code></p>

<p>To see all available variables, use:</p>

<p><code>
$ heroku config
</code></p>

<p>and you should see something similar to this:</p>

<p><code>
=== dj-celery Config Vars
ADMINS:                 (('&lt;your_name&gt;', '&lt;your_email&gt;'),)
DATABASE_URL:           postgres://erdidqkixwegwg:hGZztw2Oh3EmNWfD5IfTb3XcyO@ec2-107-21-224-11.compute-1.amazonaws.com:5432/dembq6s6m1mohq
DJANGO_SETTINGS_MODULE: project.settings.prod
MAILGUN_API_KEY:        key-9587e40f127a1fe8fbab10622be69169
MAILGUN_DOMAIN:         appb8c22c19f6654edeb3c25768d4674002.mailgun.org
MAILGUN_PUBLIC_KEY:     pubkey-51b28300a981d7f184bb55c4726742d8
MAILGUN_SMTP_LOGIN:     postmaster@appb8c22c19f6654edeb3c25768d4674002.mailgun.org
MAILGUN_SMTP_PASSWORD:  f1c39a13079d8db398073fc6717de59a
MAILGUN_SMTP_PORT:      587
MAILGUN_SMTP_SERVER:    smtp.mailgun.org
SITE_DOMAIN:            dj-celery.herokuapp.com
SITE_NAME:              dj-celery
</code></p>

<p>We see that <code>MAILGUN_XXX</code> variables are provided, we will use it on development
mode by adding the following lines into the .env file from the config content of your app
environment:</p>

<p>```
EMAIL_BACKEND=&lsquo;django.core.mail.backends.smtp.EmailBackend&rsquo;</p>

<p>MAILGUN_API_KEY=&lt;your_app_environment_value>
MAILGUN_DOMAIN=&lt;your_app_environment_value>
MAILGUN_PUBLIC_KEY=&lt;your_app_environment_value>
MAILGUN_SMTP_LOGIN=&lt;your_app_environment_value>
MAILGUN_SMTP_PASSWORD=&lt;your_app_environment_value>
MAILGUN_SMTP_PORT=&lt;your_app_environment_value>
MAILGUN_SMTP_SERVER=&lt;your_app_environment_value>
```</p>

<p>Let&rsquo;s test if the email works:</p>

<p>```
$ ./manage.py shell</p>

<p>Python 2.7.6 (default, Apr 15 2015, 20:14:49)
Type &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<p>IPython 4.0.1 &mdash; An enhanced Interactive Python.
?         &ndash;> Introduction and overview of IPython&rsquo;s features.
%quickref &ndash;> Quick reference.
help      &ndash;> Python&rsquo;s own help system.
object?   &ndash;> Details about &lsquo;object&rsquo;, use &lsquo;object??&rsquo; for extra details.</p>

<p>In [1]: from django.core import mail</p>

<p>In [2]: mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)</p>

<p>In [3]:
```</p>

<p>You need to check your mailbox to see that a test email should be sent to you.</p>

<p>Now you could signup and receive email at: <a href="https://">https://</a>&lt;your_app_name>.herokuapp.com/accounts/signup/</p>

<h2>django-celery-email Setup</h2>

<p>If could see that <code>mail.mail_admins</code> is blocked and waiting until the email sending is finished.
To avoid these blocking, let&rsquo;s use Celery. Celery app is already setup by django-boilerplate at:
<a href="https://github.com/teracyhq/django-boilerplate/commit/7ea4306ae295d38ae35610b0882db1ea81a5d613">https://github.com/teracyhq/django-boilerplate/commit/7ea4306ae295d38ae35610b0882db1ea81a5d613</a></p>

<p>Let&rsquo;s just follow <a href="https://pypi.python.org/pypi/django-celery-email">https://pypi.python.org/pypi/django-celery-email</a> to configure it like I did at:
<a href="https://github.com/hoatle/django-celery/commit/96575fe6fdb746a3f5a8526bbf236864c6880fb6">https://github.com/hoatle/django-celery/commit/96575fe6fdb746a3f5a8526bbf236864c6880fb6</a></p>

<p>and then:</p>

<p><code>
$ pip install -r requirements/dev.txt --upgrade
</code></p>

<p>update EMAIL_BACKEND for .env file with:</p>

<p><code>
EMAIL_BACKEND='djcelery_email.backends.CeleryEmailBackend'
</code></p>

<p>One important step is to enable Celery by using <a href="https://elements.heroku.com/addons/cloudamqp">https://elements.heroku.com/addons/cloudamqp</a></p>

<p>To use cloudamqp heroku addon:</p>

<p><code>
$ heroku addons:create cloudamqp:lemur
</code></p>

<p>and you should see <code>CLOUDAMQP_URL</code> environment variable by <code>$ heroku config</code></p>

<p>Let&rsquo;s add that variable into the .env file:</p>

<p><code>
CLOUDAMQP_URL=&lt;your_app_environment_value&gt;
</code></p>

<p>The full .env file I created was at: <a href="https://gist.github.com/hoatle/7cb82d437213db4f373d">https://gist.github.com/hoatle/7cb82d437213db4f373d</a></p>

<p>To start Celery app: <code>$ ./scripts/celery.sh</code>, and you should see the following content:</p>

<p>```
 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; celery@vagrant v3.1.19 (Cipater)
&mdash;&mdash; <em><strong><em> &mdash;&mdash;&ndash;
&mdash;&ndash; * </em></strong>  * &mdash; Linux-3.13.0-49-generic-x86_64-with-debian-wheezy-sid
&mdash; * &ndash; </em><em><strong> &mdash;&ndash;
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; [config]
&ndash; <strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> app:         Project:0x2f9a710
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> transport:   amqp://ssnipivn:<strong>@jaguar.rmq.cloudamqp.com:5672/ssnipivn
&ndash; </strong> &mdash;&mdash;&mdash;&mdash;&mdash; .> results:     disabled
&ndash; </em><strong> &mdash;&ndash; * &mdash;&ndash; .> concurrency: 2 (prefork)
&mdash; </strong><strong><strong><em> &mdash;&mdash;
&mdash;&ndash; </em></strong></strong> &mdash;&mdash;&ndash; [queues]
 &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; .> celery           exchange=celery(direct) key=celery</p>

<p>[tasks]
  . djcelery_email_send_multiple</p>

<p>[2015-12-21 12:13:22,788: INFO/Beat] beat: Starting&hellip;
[2015-12-21 12:13:24,532: INFO/MainProcess] Connected to amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
[2015-12-21 12:13:26,851: INFO/MainProcess] mingle: searching for neighbors
[2015-12-21 12:13:31,216: INFO/MainProcess] mingle: all alone
/home/vagrant/.virtualenvs/django-celery/lib/python2.7/site-packages/celery/fixups/django.py:265: UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments!
  warnings.warn(&lsquo;Using settings.DEBUG leads to a memory leak, never &rsquo;</p>

<p>[2015-12-21 12:13:36,019: WARNING/MainProcess] /home/vagrant/.virtualenvs/django-celery/lib/python2.7/site-packages/celery/fixups/django.py:265: UserWarning: Using settings.DEBUG leads to a memory leak, never use this setting in production environments!
  warnings.warn(&lsquo;Using settings.DEBUG leads to a memory leak, never &rsquo;</p>

<p>[2015-12-21 12:13:36,023: WARNING/MainProcess] celery@vagrant ready.
```</p>

<p>After that, sending test email to admins should work without any blocking by opening a new terminal
window:</p>

<p>```
$ vagrant ssh
$ ws
$ cd personal/django-celery
$ workon django-celery
$ ./manage.py shell</p>

<p>Python 2.7.6 (default, Apr 15 2015, 20:14:49)
Type &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.</p>

<p>IPython 4.0.1 &mdash; An enhanced Interactive Python.
?         &ndash;> Introduction and overview of IPython&rsquo;s features.
%quickref &ndash;> Quick reference.
help      &ndash;> Python&rsquo;s own help system.
object?   &ndash;> Details about &lsquo;object&rsquo;, use &lsquo;object??&rsquo; for extra details.</p>

<p>In [1]: from django.core import mail</p>

<p>In [2]: mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)
```</p>

<p>That&rsquo;s it. We&rsquo;re done on development mode. Let&rsquo;s deploy on Heroku with:</p>

<p><code>
$ git push heroku master
$ heroku ps:scale celery=1
</code></p>

<p><code>$ heroku logs -p celery</code> to see the logs of celery, you should see something like this:</p>

<p><code>
2015-12-21T12:30:35.946701+00:00 heroku[celery.1]: Starting process with command `scripts/celery.sh`
2015-12-21T12:30:37.616409+00:00 app[celery.1]: /app/.heroku/python/lib/python2.7/site-packages/dotenv.py:53: UserWarning: Not reading /app/.env - it doesn't exist.
2015-12-21T12:30:37.616419+00:00 app[celery.1]:   warnings.warn("Not reading {0} - it doesn't exist.".format(dotenv))
2015-12-21T12:30:38.278350+00:00 app[celery.1]: [2015-12-21 12:30:38,278: INFO/MainProcess] Connected to amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
2015-12-21T12:30:38.220898+00:00 app[celery.1]: [2015-12-21 12:30:38,220: WARNING/MainProcess] /app/.heroku/python/lib/python2.7/site-packages/celery/apps/worker.py:161: CDeprecationWarning:
2015-12-21T12:30:38.220902+00:00 app[celery.1]: Starting from version 3.2 Celery will refuse to accept pickle by default.
2015-12-21T12:30:38.220904+00:00 app[celery.1]: The pickle serializer is a security concern as it may give attackers
2015-12-21T12:30:38.220903+00:00 app[celery.1]:
2015-12-21T12:30:38.220905+00:00 app[celery.1]: the ability to execute any command.  It's important to secure
2015-12-21T12:30:38.220908+00:00 app[celery.1]: the default choice.
2015-12-21T12:30:38.220907+00:00 app[celery.1]: that enabling pickle should require a deliberate action and not be
2015-12-21T12:30:38.220906+00:00 app[celery.1]: your broker from unauthorized access when using pickle, so we think
2015-12-21T12:30:38.220909+00:00 app[celery.1]:
2015-12-21T12:30:38.220910+00:00 app[celery.1]: If you depend on pickle then you should set a setting to disable this
2015-12-21T12:30:38.220910+00:00 app[celery.1]: warning and to be sure that everything will continue working
2015-12-21T12:30:38.220914+00:00 app[celery.1]: You must only enable the serializers that you will actually use.
2015-12-21T12:30:38.220913+00:00 app[celery.1]:     CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'msgpack', 'yaml']
2015-12-21T12:30:38.220912+00:00 app[celery.1]:
2015-12-21T12:30:38.220915+00:00 app[celery.1]:
2015-12-21T12:30:38.220913+00:00 app[celery.1]:
2015-12-21T12:30:38.220915+00:00 app[celery.1]:
2015-12-21T12:30:38.220911+00:00 app[celery.1]: when you upgrade to Celery 3.2::
2015-12-21T12:30:38.220917+00:00 app[celery.1]:
2015-12-21T12:30:38.223101+00:00 app[celery.1]: ---- **** -----
2015-12-21T12:30:38.220916+00:00 app[celery.1]:   warnings.warn(CDeprecationWarning(W_PICKLE_DEPRECATED))
2015-12-21T12:30:38.223104+00:00 app[celery.1]: - ** ---------- .&gt; app:         Project:0x7f590f5fad10
2015-12-21T12:30:38.223107+00:00 app[celery.1]: --- ***** ----- [queues]
2015-12-21T12:30:38.223111+00:00 app[celery.1]:   . djcelery_email_send_multiple
2015-12-21T12:30:38.223102+00:00 app[celery.1]: --- * ***  * -- Linux-3.13.0-66-generic-x86_64-with-debian-jessie-sid
2015-12-21T12:30:38.262153+00:00 app[celery.1]: [2015-12-21 12:30:38,261: INFO/Beat] beat: Starting...
2015-12-21T12:30:38.223098+00:00 app[celery.1]:  
2015-12-21T12:30:38.301313+00:00 app[celery.1]: [2015-12-21 12:30:38,301: INFO/MainProcess] mingle: searching for neighbors
2015-12-21T12:30:38.223105+00:00 app[celery.1]: - ** ---------- .&gt; results:     disabled
2015-12-21T12:30:38.223109+00:00 app[celery.1]:                 
2015-12-21T12:30:38.223100+00:00 app[celery.1]:  -------------- celery@91af8d04-4b15-482e-937b-0f9a49a0eff7 v3.1.19 (Cipater)
2015-12-21T12:30:38.223102+00:00 app[celery.1]: -- * - **** ---
2015-12-21T12:30:38.223106+00:00 app[celery.1]: - *** --- * --- .&gt; concurrency: 8 (prefork)
2015-12-21T12:30:38.223109+00:00 app[celery.1]:
2015-12-21T12:30:38.223103+00:00 app[celery.1]: - ** ---------- [config]
2015-12-21T12:30:38.223106+00:00 app[celery.1]: -- ******* ----
2015-12-21T12:30:38.223110+00:00 app[celery.1]: [tasks]
2015-12-21T12:30:38.223104+00:00 app[celery.1]: - ** ---------- .&gt; transport:   amqp://ssnipivn:**@jaguar.rmq.cloudamqp.com:5672/ssnipivn
2015-12-21T12:30:38.223108+00:00 app[celery.1]:  -------------- .&gt; celery           exchange=celery(direct) key=celery
2015-12-21T12:30:38.223111+00:00 app[celery.1]:
2015-12-21T12:30:39.322701+00:00 app[celery.1]: [2015-12-21 12:30:39,322: INFO/MainProcess] mingle: all alone
2015-12-21T12:30:39.352403+00:00 app[celery.1]: [2015-12-21 12:30:39,352: WARNING/MainProcess] celery@91af8d04-4b15-482e-937b-0f9a49a0eff7 ready.
2015-12-21T12:30:36.537615+00:00 heroku[celery.1]: State changed from starting to up
</code></p>

<p>You could try sending test emails to admins with:</p>

<p>```
$ heroku run python manage.py shell
Running python manage.py shell on dj-celery&hellip; up, run.9412
/app/.heroku/python/lib/python2.7/site-packages/dotenv.py:53: UserWarning: Not reading /app/.env &ndash; it doesn&rsquo;t exist.
  warnings.warn(&ldquo;Not reading {0} &ndash; it doesn&rsquo;t exist.&rdquo;.format(dotenv))
Python 2.7.10 (default, May 27 2015, 20:38:41)
[GCC 4.8.2] on linux2
Type &ldquo;help&rdquo;, &ldquo;copyright&rdquo;, &ldquo;credits&rdquo; or &ldquo;license&rdquo; for more information.
(InteractiveConsole)</p>

<blockquote><blockquote><blockquote><p>from django.core import mail
mail.mail_admins(&lsquo;test&rsquo;, &lsquo;test&rsquo;)
```</p></blockquote></blockquote></blockquote>

<p>That&rsquo;s it, email sending is not blocked anymore. The full project for this guide is located at:
<a href="https://github.com/hoatle/django-celery">https://github.com/hoatle/django-celery</a></p>

<h2>Remote Debugging Python Tip</h2>

<p>This is a bonus if you need to remote debug Python applications. You could apply this for
Django projects, too: <a href="http://dev.teracy.org/docs/develop/python_dev_guide.html#debugging">http://dev.teracy.org/docs/develop/python_dev_guide.html#debugging</a></p>

<h2>Summary</h2>

<p>In this post, I&rsquo;ve guided you step by step to setup Celery as a distributed task queue for emails
on Django projects. It&rsquo;s very easy to set everything up thanks to the django-boilerplate project.</p>

<p>If you need any Django consultant or Django development, don&rsquo;t hesitate to contact us at:
<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x68;&#x71;&#x40;&#x74;&#x65;&#x72;&#97;&#99;&#x79;&#46;&#x63;&#111;&#109;">&#x68;&#113;&#x40;&#x74;&#101;&#x72;&#97;&#x63;&#121;&#46;&#99;&#x6f;&#x6d;</a> and we&rsquo;re very eager to work with you on Django, Python projects.</p>

<p>Happy Django developing!</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/bread-and-pepper/django-userena">https://github.com/bread-and-pepper/django-userena</a></li>
<li><a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></li>
<li><a href="https://pypi.python.org/pypi/django-celery-email">https://pypi.python.org/pypi/django-celery-email</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage software dependency with semantic versioning]]></title>
    <link href="http://blog.teracy.com/2013/08/12/manage-software-dependency-with-semantic-versioning/"/>
    <updated>2013-08-12T19:42:00+00:00</updated>
    <id>http://blog.teracy.com/2013/08/12/manage-software-dependency-with-semantic-versioning</id>
    <content type="html"><![CDATA[<p>Do you know what it means to release your software labeled with <code>alpha</code>, <code>beta</code>, <code>release candidate</code>
or <code>final release</code>? When and where to increase the number range? What&rsquo;s the difference between
0.1.0, 1.0.0, 1.2.0 and 2.0.0? We&rsquo;re going to make it clear on this post.</p>

<!-- more -->


<h2>Problem</h2>

<p>Usually, your software is composed of different small pieces of software libraries and they have
different release schemas. When upgrading these libraries, it&rsquo;s very hard to know if your
software still works normally without reading their APIs documentation, release notes and running
many tests yourself to make sure the upgrading does not break anything and this hurts.</p>

<p><blockquote><p></p></p><p><p>In the world of software management there exists a dread place called &ldquo;dependency hell.&rdquo; The bigger your system grows and the more packages you integrate into your software, the more likely you are to find yourself, one day, in this pit of despair.</p></p><p><p>In systems with many dependencies, releasing new package versions can quickly become a nightmare.</p></p><p><p></p><footer><strong>Tom Preston-Werner <a href="http://semver.org/spec/v2.0.0.html">http://semver.org/spec/v2.0.0.html</a> Semantic Versioning 2.0.0</strong></footer></blockquote></p>

<p>Yes, it&rsquo;s true and some software companies I know are still struggling with the problem of dependency
management. I myself had this kind of nightmare many times when working on a big growing software
system with many layers of dependency and that&rsquo;s the reason I really want to improve its development
experience.</p>

<p>Fortunately, <code>semantic versioning</code> specification<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> was introduced and it&rsquo;s general enough to be
applied to other existing dependency management tools and systems:</p>

<p>From <code>Java</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> world with <code>Maven</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>From <code>Python</code><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> world with <code>setuptools</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> and <code>pip</code><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> on top of <code>setuptools</code></p>

<p>From <code>Ruby</code><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> world with <code>bundler</code><sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup></p>

<p>From <code>PHP</code><sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> world with <code>composer</code><sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup></p>

<p>and you name it.</p>

<p>All these kinds of dependency management tools have different kinds of version schemas, we need to
make it more consistent among projects within an organization.</p>

<h2>Requirements</h2>

<p>As <code>sementic versioning</code> specification is general enough, it&rsquo;s possible to extend it for more
specific uses. We should have a semantic versioning base that is extensible for different dependency
management tools.</p>

<p>So a <code>Base</code> must:</p>

<ul>
<li><p>Extend <code>semantic versioning</code></p></li>
<li><p>Provide a general policy to avoid &ldquo;incompatible&rdquo; with existing dependency management tools as much
as possible.</p></li>
</ul>


<h2>Solution</h2>

<p>At Teracy, we try to get all projects to follow a common base semantic versioning policy so that
everything is clear and consistent.</p>

<p>You could have a look at the docs here <a href="http://dev.teracy.org/docs/develop/semantic_versioning.html">http://dev.teracy.org/docs/develop/semantic_versioning.html</a> ,
there is still much work left to be done, but it&rsquo;s good enough for <code>Python</code>&rsquo;s versioning
now.</p>

<h2>Summary</h2>

<p>This is just an initiative to achieve a common base that is compatible with existing dependency
management tools as much as possible. It will make a developer life easier with a consistent
semantic versioning schema like <a href="http://dev.teracy.org/docs/develop/semantic_versioning.html">http://dev.teracy.org/docs/develop/semantic_versioning.html</a></p>

<p>Have a nice day and happy working!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://semver.org/spec/v2.0.0.html<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>http://www.java.com<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>http://maven.apache.org<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>http://python.org<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>https://pypi.python.org/pypi/setuptools<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>https://pypi.python.org/pypi/pip<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p>http://www.ruby-lang.org<a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p>http://bundler.io<a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p>http://php.net<a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p>http://getcomposer.org<a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic sphinx docs deployment with sphinx-deployment]]></title>
    <link href="http://blog.teracy.com/2013/08/09/automatic-sphinx-docs-deployment-with-sphinx-deployment/"/>
    <updated>2013-08-09T03:13:00+00:00</updated>
    <id>http://blog.teracy.com/2013/08/09/automatic-sphinx-docs-deployment-with-sphinx-deployment</id>
    <content type="html"><![CDATA[<p>At Teracy, all our documentations are written with the help from <code>sphinx</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It&rsquo;s easy to setup and
manage. However, we could not find a good enough <strong>deployment solution</strong> for <code>sphinx</code> documentation
project. What does &ldquo;good enough&rdquo; here means? It means:</p>

<ul>
<li><p>The installation and configuration should be easy with <code>git</code> and command line.</p></li>
<li><p>The deployment could be &ldquo;decoupled&rdquo; from <code>sphinx</code> project for easy upgrade and maintenance. It&rsquo;s
better if we could have this deployment solution provided by <code>sphinx</code> out of the box.</p></li>
<li><p>The deployment should support as many services as possible: <code>github pages</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>, <code>Rsync</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, and
<code>PaaS</code><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> services like <code>heroku</code><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, etc.</p></li>
<li><p>The usage should be easy like:</p>

<ul>
<li><code>$ make setup</code> to setup deployment basing on the configurations</li>
<li><code>$ make generate</code> to generate content basing on the configurations</li>
<li><code>$ make deploy</code> to deploy the project basing on the configurations</li>
</ul>
</li>
</ul>


<!-- more -->


<p>We could not find a solution good enough meeting our requirements, so we created
<a href="https://github.com/teracy-official/sphinx-deployment">sphinx-deployment</a> project that implements the ideas and requirements above.</p>

<p>Currently, it&rsquo;s on very very early development stage to just
support deployment on <code>github pages</code> automatically with <code>travis-ci</code><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>, and
<a href="https://travis-ci.org/teracy-official/dev">https://travis-ci.org/teracy-official/dev</a> as an example.</p>

<p>There are many things that we need to do, please help use to shape the project&rsquo;s future by
contributing with <code>forking</code>, <code>hacking</code> and <code>pull requests</code> or giving your ideas. Your contributions
are all welcome. Please head to the development branch at
<a href="https://github.com/teracy-official/sphinx-deployment/tree/develop">https://github.com/teracy-official/sphinx-deployment/tree/develop</a></p>

<p>Have a nice day and happy hacking!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>http://sphinx-doc.org<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>https://help.github.com/categories/20/articles<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>http://en.wikipedia.org/wiki/Rsync<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>http://en.wikipedia.org/wiki/Platform_as_a_service<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>http://heroku.com<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p>http://travis-ci.org<a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
