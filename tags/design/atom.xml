<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: design | Teracy's Blog]]></title>
  <link href="http://blog.teracy.com/tags/design/atom.xml" rel="self"/>
  <link href="http://blog.teracy.com/"/>
  <updated>2016-09-29T11:17:28+00:00</updated>
  <id>http://blog.teracy.com/</id>
  <author>
    <name><![CDATA[Teracy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Những điều cần biết để xây dựng thử nghiệm người dùng hiệu quả]]></title>
    <link href="http://blog.teracy.com/2016/09/29/nhung-dieu-can-biet-de-xay-dung--thu-nghiem-nguoi-dung-hieu-qua/"/>
    <updated>2016-09-29T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/09/29/nhung-dieu-can-biet-de-xay-dung--thu-nghiem-nguoi-dung-hieu-qua</id>
    <content type="html"><![CDATA[<p>{% img center /images/2016/09/29/xay-dung-thu-nghiem-nguoi-dung.png Xây dựng thử nghiệm người dùng %}</p>

<p>Gần đây số lượng các ứng dụng trong thị trường android và iOs đã vượt xa con số 8 triệu, ngoài ra còn
có một con số không giới hạn các trang web và các ứng dụng web đang xuất hiện khắp nơi trên thế giới
nữa. Với khối lượng khổng lồ các ứng dụng đó thì điều khan hiếm nhất là khoảng thời gian tập trung
của người dùng cho mỗi ứng dụng.</p>

<p>Thách thức lớn nhất trong thiết kế UX là thu hút được nhiều thời gian tập trung của người dùng.
Điều này đặt ra một thách thức với người chủ sở hữu sản phẩm và những người thiết kế UX làm sao thiết kế
ra những ứng dụng thu hút được sự chú ý và tham gia của người dùng.</p>

<h1>Tại sao thử nghiệm người dùng lại đặc biệt quan trọng như vậy</h1>

<p>Một trong những cách rất hiệu quả để đảm bảo chuyển đổi và tham gia tốt hơn là thực hiện &ldquo;thử nghiệm
người dùng&rdquo; (Hay đúng hơn là thử nghiệm khả năng sử dụng). Đó là một cách khoa học để tìm ra những gì
mà người dùng dễ dàng tìm thấy và những điều họ phải làm. Nghiên cứu về người dùng thường xuyên được
thảo luận bởi rất nhiều lãnh đạo nhóm thiết kế bao gồm <a href="https://medium.com/@ideo">IDEO</a>,
<a href="https://medium.com/@frogdesign">frog</a> và nhiều nhà thiết kế khác.</p>

<p>Chúng tôi đã quan sát một số những đội ngũ hàng đầu thế giới có kinh nghiệm thiết kế phục vụ hàng triệu
người dùng trên toàn cầu và đã rút ra được vài bài học nhanh chóng mà bạn có thể sử dụng trong nghiên
cứu người dùng săp tới của mình:</p>

<h1>1. Biết được bạn đang mong muốn gì</h1>

<p>Thậm chí trước khi bạn nghĩ về thử nghiệm người dùng, bạn nên đặt ra cho mình một mục tiêu nào đó.
Các cách xây dựng mục tiêu có thể sẽ khác nhau nếu như bạn đang giải quyết vấn đề về thiết kế của
một ứng dụng hiện có hoặc khi bạn thẩm định một thiết kế hoàn toàn mới của một ứng dụng sắp được tung ra.</p>

<ul>
<li><strong>Đối với ứng dụng/trang web hiện có</strong>: Bạn có được những quan sát về các vấn đề thiết kế từ Google
Analytics, Mixpanel. Giải pháp của vấn đề này đó là bạn là người dùng thử nghiệm trên những thách thức
hiện tại trong khi khám phá các cách khác để cải thiện. Ví dụ: đối với ứng dụng thương mại điện tử,
người dùng có thể thêm một số sản phẩm vào giỏ hàng, nhưng họ sẽ quay lại để xem chi tiết sản phẩm thay vì thanh toán.</li>
</ul>


<p>Đối với những ứng dụng hiện có, cải thiện kết quả kinh doanh chính là mục tiêu chính của thử nghiệm người dùng.</p>

<p>Ví dụ, mục tiêu chính đối với ứng dụng hiện có trong ví dụ trên là chuyển từ giỏ hàng sang mục thanh toán.</p>

<ul>
<li><strong>Đối với ứng dụng/trang web sắp ra</strong>: với ứng dụng sắp được tung ra, bạn cần phải có giả thuyết thiết kế nhất định bao gồm: hướng dẫn thương hiệu, thành phần thiết kế&hellip; Ví dụ: với trường hợp ứng dụng âm nhạc, bạn đưa ra lựa chọn các tab cho các loại nhạc khác nhau thay vì dùng bộ lọc.
Đối với ứng dụng sắp ra, mục tiêu chính có thể là xác nhận các giả thuyết thiết kế.</li>
</ul>


<p>Trong ví dụ của chúng tôi, chúng tôi muốn xác nhận liệu người dùng sẽ sử dụng các tuỳ chọn để tìm các loại âm nhạc thay vì sử dụng bộ lọc.
<strong>Việc thiết lập mục tiêu ngay từ đầu khi kiểm thử sẽ giúp bạn có những câu hỏi đúng</strong>.</p>

<h1>2. Tuyển chọn người dùng thử nghiệm cẩn thận</h1>

<p>Khi bạn đã quyết định được mục tiêu thử nghiệm người dùng, bạn cần phải kiểm tra người dùng để thực hiện
thử nghiệm người dùng. Khi một sản phẩm được xây dựng, bạn cũng đã có hồ sơ người dùng và bạn có một vài người dùng thực &ndash; những người muốn được xem các ứng dựng mới. Bạn có thể cùng họ thực hiện kiểm thử.</p>

<p>Mặc dù rất dễ dàng để kiểm thử với người dùng hiện tại nhưng cũng thật cẩn thận để loại bỏ thành kiến từ những trải nghiệm của họ.</p>

<p>Để giảm bớt thành kiến từ những kinh nghiệm sẵn có, bạn có thể muốn tạo một phiên bản đầy đủ các ứng dụng để làm cho toàn bộ trải nghiệm của họ tự nhiên hơn.</p>

<p>Bạn có thể muốn vẽ minh hoạ liên quan mật thiết tới người dùng của bạn.</p>

<p>{% img center /images/2016/09/29/ho-so-nguoi-dung-cua-airbnb.jpeg % Hồ sơ người dùng của airbnb}</p>

<p>Tuy nhiên, trong trường hợp của một ứng dụng mới, bạn hiểu vấn đề bạn sẽ phải giải quyết và giải
quyết cho ai. Hãy thu hẹp vấn đề càng nhỏ càng tốt. Dưới đây là một số câu hỏi mà bạn cần hỏi khi lựa
chọn người dùng mẫu cho thử nghiệm người dùng:
&ndash; <strong>Liên quan</strong>: Ứng dụng của bạn có liên quan tới người dùng thử nghiệm không?
&ndash; Tần suất sử dụng: Người dùng này có thường xuyên sử dụng ứng dụng của bạn trong công việc mà người đó làm hay không?
&ndash; <strong>Nhân khẩu học</strong>: Sự khác biệt văn hoá là một yếu tố quan trọng đối với trải nghiệm của người dùng. Tập trung vào nơi ở, tuổi, giới tính khi lựa chọn người dùng mẫu.
&ndash; <strong>Mức thu nhập</strong>: Những người dùng này có sẵn sàng trả tiền để sử dụng ứng dụng/dịch vụ của bạn không? Điều này bao gồm cả khả năng tài chính và thói quen mua sắm.</p>

<p>Bạn còn nghĩ ra được ý tưởng nào nữa không? Hãy cho chúng tôi biết nhé.</p>

<h1>3. Thời điểm nào thích hợp cho việc kiểm thử người dùng?</h1>

<p>&ldquo;Tôi sẽ đợi tới giao diện cuối cùng để tiến hành kiểm thử người dùng&rdquo;. Chủ sở hữu sản phẩm chỉ tiến hành kiểm thử người dùng khi họ có được phiên bản cuối cùng. Đó không phải là một ý hay, bởi vì khi đó bạn sẽ phải lặp lại hầu hết thời gian và công sức đã bỏ ra.
Lặp lại ngay khi có thể trong quy trình thiết kế để tiết kiệm thời gian và công sức.
{% img center /images/2016/09/29/quy-trinh-thiet-ke.jpeg Quy trình thiết kế %}</p>

<p>Những mong đợi trong các giai đoạn khác nhau của quy trình kiểm thử người dùng.
&ndash; <strong>Từ ý tưởng đến phác hoạ bằng tay</strong>: Thảo luận các ý kiến trên giấy bút hoặc trên bảng trắng. Tập hợp các phác hoạ bằng tay vào CanvasFlip và mời người dùng nội bộ kiểm thử.
&ndash; <strong>Từ phác họa bằng tay đến thiết kế khung sườn (wireframing)</strong>: Trong giai đoạn này, bạn gần như đã tạo được hình dáng phiên bản giao diện người dùng, xác định các icon và nhãn. Cách tốt nhất là giới thiệu chúng đến người dùng bên ngoài nhưng ở quy mô nhỏ.
&ndash; <strong>Từ thiết kế khung sườn đến mockup ban đầu</strong>: Khi bạn xây dựng các mockup, bạn nên giới thiệu chúng đến người dùng để thu được các trải nghiệm ban đầu. Bạn tiếp tục sửa đổi và đưa ra bản giao diện người dùng cuối cùng trên cơ sở nhận xét của người dùng ở giai đoạn này.
Hầu hết các nhóm nổi tiếng đều sử dụng công cụ phân tích UX như CanvasFlip để tạo ra dòng UX tương tác (nguyên mẫu) và tạo ra bộ phân tích UX như video người dùng, quy trình chuyển đổi hình phễu, và bản đồ nhiệt tương tác.</p>

<h1>4. Mức độ tham gia của bạn như thế nào trong quá trình kiểm thử người dùng</h1>

<p>Luôn có sự đánh đổi giữa việc tạo ra một ngữ cảnh kiểm thử theo giời gian thực và việc quan sát người dùng.
Khi bạn quan sát người dùng chặt chẽ,họ sẽ càng có ý thức và đưa ra quyết định mang tính quyết đoán hơn so với bản năng.</p>

<p>{% img center /images/2016/09/29/kiem-thu-tinh-kha-dung.png Kiểm thử tính khả dụng %}</p>

<p>Trên cơ sở mức độ tham gia của người dùng, có thực hiện 3 cách kiểm thử người dùng:
&ndash; <strong>Kiểm duyệt tại chỗ</strong>: Trong giai đoạn này, bạn sẽ luôn ở cạnh người dùng, yêu cầu tiến hành các tác vụ, ra câu hỏi và quan sát phản ứng. Điều này sẽ có ích ở giai đoạn đầu phát triển thiết kế.
&ndash; <strong>Kiểm duyệt từ xa</strong>: Trong giai đoạn này, bạn có thể kết nối qua Skype, Google Hangout, Zoom hoặc Go-to-Meeting&hellip; Bạn có thể yêu cầu nhiệm vụ thực hiện và quan sát phản ứng. Nói chung là giữ cho sự tương tác càng ít càng tốt. Điều này hữu dụng trong giai đoạn dựng khung và thiết kế mockup.
&ndash; <strong>Không kiểm duyệt</strong>: đúng như tên của nó, một thử nghiệm người dùng không được kiểm duyệt được tiến hành mà gần như không có sự can thiệp nào. Người dùng được đưa cho một nguyên mẫu thiết kê (phototype) và yêu cầu chạy thử hoặc đưa ra một tác vụ để thực hiện. Ví dụ: Mua/tìm kiếm một item nào đó.</p>

<h1>5. Cách phân tích kết quả thử nghiệm người dùng</h1>

<p>Khi bạn tiến hành thử nghiệm người dùng bằng bản thiết kế hiện có, bạn thường thực thực hiện với phần dễ trước. Tiếp đến sẽ là những phần quan trọng và phức tạp hơn &ndash; để phân tích kết quả kiểm thử người dùng, tìm ra những thứ cần loại bỏ và xem xét mức độ ảnh hưởng của các kết quả đó đối với thiết kế hiện tại.</p>

<p><strong>Phân tích kết quả thử nghiệm người dùng ở giai đoạn đầu</strong></p>

<p>Giai đoạn đầu thường tiến hành thử nghiệm người dùng ở mức có kiểm soát. Kết quả thu được thường mang tính chủ quan, qua đó có thể hiểu được mong đợi và hành vi của người dùng và trên cơ sở đó để xây dụng thiết kế. Khi đã hiểu được các tính năng, các mẫu thiết kế, các lựa chọn điều hướng, sơ đồ icon, ưu iên về font chữ, nhãn, bạn có thể xây dựng khung cho toàn bộ quy trình thiết kế còn lại.</p>

<p><strong>Phân tích kết quả thử nghiệm người dùng ở giai đoạn sau</strong></p>

<p>Khi nghiên cứu kết quả thử nghiệm người dùng ở giai đoạn sau, bạn buộc phải tuân theo thuyết thiết kế đã xây dựng ở giai đoạn trước. Các thuyết đó theo dạng &ldquo;chuyển đổi theo dòng UX&rdquo; hoặc &ldquo;Thẩm định CTA&rdquo; trong các thiết kế màn hình. Ví dụ, bạn muốn biết có bao nhiêu người dùng đã bỏ đi khi đã chọn xong sản phẩm và đang chuẩn bị sang bước thanh toán. Hay có bao nhiêu người dùng đã click vào &ldquo;Login&rdquo; CTA so với phần còn lại của màn hình.</p>

<p>Khi bạn hiểu được hành vi và mong đợi của người dùng, bạn sẽ có lựa chọn tốt hơn giữa thử nghiệm người dùng ở mức kiểm soát từ xa và không kiểm soát.</p>

<p>Công cụ kiểm thử tính khả dụng từ xa như Canvasflip có thể cung cấp rất nhiều thông tin hữu ích.</p>

<p><strong>Biết được người dùng sẽ bỏ UX-flow từ chỗ nào</strong>
Trong kênh chuyển đổi trên (được tạo ra với CanvasFlip.com), bạn có thể thấy được sừ rời bỏ lớn tại vòng lặp thứ 1 trong màn hình &ldquo;Experiencies&rdquo;.</p>

<p>{% img center /images/2016/09/29/quy-trinh-chuyen-doi-hinh-pheu.png Quy trình chuyển đổi hình phễu %}</p>

<p><strong>Nơi người dùng tương tác nhiều nhất trong giao diện</strong></p>

<p>Một bản đồ nhiệt tương tác về thử nghiệm người dùng được tạo ra bởi CanvasFlip.com giúp bạn biết được khu vực tương tác thường xuyên của người dùng trong giao diện người dùng.</p>

<p>{% img center /images/2016/09/29/ban-do-nhiet-tuong-tac.png Bản đồ nhiệt tương tác %}</p>

<p><strong>Phân tích hành trình của từng cá nhân người dùng</strong></p>

<p>Với CanvasFlip.com, bạn có thể phân tích được những điều hướng của người dùng và thời gian người dùng ở lại mỗi màn hình.
{% img center /images/2016/09/29/hanh-trinh-cua-nguoi-dung.png Hành trình của người dùng %}</p>

<p><strong>Xem toàn bộ video phiên người dùng để phân tích và cải thiện hành vi người dùng</strong></p>

<p>Bạn có thể ghi lại các điều hướng người dùng, sau đó tìm ra nơi người dùng gặp vấn đề và tìm cách cải thiện trải nghiệm người dùng.
{% img center /images/2016/09/29/ghi-lai-dieu-huong-nguoi-dung.png Ghi lại điều hướng người dùng %}</p>

<h1>Kết luận</h1>

<p>Với nỗ lực nhằm tạo ra một trải nghiệm người dùng tuyệt vời, cần phải tiến hành thử nghiệm người dùng và để thực hiện thử nghiệm hiệu quả, bạn phải biết cần gì/ sửa đổi gì, lựa chọn nhóm người dùng càng hẹp càng tốt, kiểm thử ngay từ lúc đầu, và sử dụng những thông tin hữu ích để rút ra kết luận từ kết quả thử nghiệm người dùng.</p>

<p>Bài dịch từ: <a href="https://blog.prototypr.io/everything-you-should-know-to-conduct-a-kickass-user-testing-89977e653123#.shhsbhhoy">Everything you should know to conduct a kickass user testing</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Những lỗi khi áp dụng mẫu thiết kế trải nghiệm người dùng (UX design patterns)]]></title>
    <link href="http://blog.teracy.com/2016/08/06/nhung-loi-khi-ap-dung-mau-thiet-ke-trai-nghiem-nguoi-dung-ux-design-patterns/"/>
    <updated>2016-08-06T04:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/06/nhung-loi-khi-ap-dung-mau-thiet-ke-trai-nghiem-nguoi-dung-ux-design-patterns</id>
    <content type="html"><![CDATA[<p>Nếu bạn là một nhà thiết kế có kinh nghiệm, bạn nên hiểu rằng trong  thiết kế giao diện người dùng <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> , việc lấy cảm hứng từ những sản phẩm của người khác không phải là ăn cắp ý tưởng mà là việc học hỏi những kinh nghiệm tốt nhất của những người đi trước, là sử dụng những mẫu thiết kế và làm theo các chỉ dẫn (guideline) nhằm đảm bảo sử dụng các kiểu mẫu quen thuộc và tạo nên các giao diện thực sự hữu ích cho người dùng.</p>

<p>Một số người nói rằng việc cứ bám theo các quy tắc cứng nhắc và bắt chước người khác thì sẽ giết chết sự sáng tạo và rồi cuối cùng mọi ứng dụng sẽ có thiết kế giống nhau. Theo quan điểm của người thiết kế UX (trải nghiệm người dùng) tôi lại thấy một vấn đề khác. Việc quen áp dụng các cách khuyên dùng tốt nhất có thể khiến bạn tin rằng Google/Facebook/Instagram hay các ứng dụng khác luôn đúng, mục tiêu thiết kế của họ cũng giống của bạn nên bạn sẽ không bao giờ tự hỏi “có gì sai ở đây?!”. Để chứng minh điều này dưới đây là một số mẫu thiết kế (hoặc đã từng) được coi là những mẫu thiết kế tốt nhất nhưng rút cuộc nó lại không thực sự tốt như bạn nghĩ.</p>

<!-- more -->


<h3>1. Ẩn menu điều hướng <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></h3>

<p>Ít nhất cũng có đến nửa triệu bài báo chủ yếu được viết bởi các designer tranh cãi về menu dạng hamburger (☰) Nếu bạn đã bỏ lỡ chúng thì hãy đọc <a href="http://techcrunch.com/2014/05/24/before-the-hamburger-button-kills-you/">ở đây</a> và <a href="http://deep.design/the-hamburger-menu/">ở đây</a>. Các bài viết ấy thường không bàn cãi về việc sử dụng biểu tượng hamburger mà đó là về việc có nên ẩn các menu điều hướng và hiển thị nó khi người dùng nhấn vào biểu tượng hamburger.
Ban đầu thì việc ẩn hàng loạt menu điều hướng đằng sau nút hamburger này có vẻ như rất tiện lợi cho người thiết kế &ndash; bạn không phải lo lắng về việc màn hình bị chiếm diện tích bởi những menu cha con dài trên màn hình quá nhỏ của thiết bị di động, mọi thứ sẽ được ẩn một cách mặc định và chỉ hiện ra khi người dùng muốn.
Tuy nhiên các thực nghiệm lại chỉ ra rằng việc hiển thị menu điều hướng thường trực trên màn hình lại tăng khả năng tương tác giữa người dùng và ứng dụng, làm người dùng hài lòng hơn và thậm chí còn tăng doanh thu từ ứng dụng. Đó là lý do vì sao các ứng dụng lớn đang dần thay đồi bằng cách bỏ đi nút hamburger và quay lại hiển thị những tính năng hay được sử dụng ngay trên màn hình.</p>

<p>{% img center /images/2016/08/06/youtube-nav-change.png Menu điều hướng của Youtube %}</p>

<p style="text-align:center;"> Sự thay đổi menu điều hướng của Youtube &ndash; Luke Wroblewski</p>

<h3>2. Lạm dụng icon.</h3>

<p>Khi thiết kế trên màn hình nhỏ đôi lúc bạn quá lạm dụng việc thay thế các nhãn bằng các icon. Bạn có thể có nhiều lý do để dùng icon như chúng chiếm ít không gian hơn, bạn không phải lo lắng về việc màn hình bị xô lệch khi được dịch sang ngôn ngữ khác hay với ý nghĩ rằng người dùng đã rất quen với icon này rồi.</p>

<p>Với kiểu suy nghĩ như vậy các bảng thiết kế nhiều khi vô tình giấu đi các tính năng của chương trình đằng sau những icon khó hiểu hoặc đôi lúc mình cũng chẳng biết là cái gì nữa và dưới đây là một ví dụ:</p>

<p>{% img center /images/2016/08/06/instagram-bad-icon.png Icon khó hiểu của Instagram %}</p>

<p style="text-align:center;"> Liệu bạn có đoán được icon này trong Instagram là để gửi tin nhắn không!</p>

<p>{% img center /images/2016/08/06/google-trans-bad-icon.png Icon Khó hiểu trên Google Translate %}</p>

<p style="text-align:center;"> Hay icon này trong Google Translate dùng để làm gì?</p>

<p>Sẽ là sai lầm khi bạn nghĩ rằng người dùng đã quen với việc dùng những icon trừu tượng như thế này hay bá đạo hơn là nghĩ rằng họ sẽ tò mò mà bỏ thời gian ra tìm hiểu xem nó là cái gì.</p>

<p>{% img center /images/2016/08/06/bloom-fm-bad-icon.png Icon khó hiểu trong Bloom.fm %}</p>

<p style="text-align:center;"> Một số icon của Bloom.fm mà thật mình cũng chẳng hiểu nó dùng để làm gì!</p>

<p>Nếu bạn là người thiết kế một icon và bạn cảm thấy sản phẩm của mình cần nhãn để người khác có thể hiểu được thì sản phẩm của bạn thật sự có vấn đề, kể cả khi người dùng sẵn sàng thử để hiểu về nó.</p>

<p>Điều này không có nghĩa là bạn không nên dùng icon, thật sự thì có rất nhiều icon mà người dùng đã quen thuộc và phần lớn những chức năng quen thuộc của một ứng dụng đều đã có icon tương ứng ( tìm kiếm, phát video, email, cài đặt&hellip; ). Tuy vậy vẫn có nhiều icon khá là mơ hồ đối với người dùng vì mỗi ứng dụng sẽ có hành vi khác nhau một chút trên cùng một chức năng (ví dụ như sẽ có chuyện gì xảy ra nếu ta nhấn vào nút trái tim nhỉ (yêu thích, đánh dấu) ??? ).</p>

<p>{% img center /images/2016/08/06/another-example-heart.png đôi lúc thật khó để biết icon quen thuộc thật sự sẽ làm gì %}</p>

<p>Với những tính năng không quen thuộc và phức tạp thì bạn nên sử dụng icon kèm theo nhãn đầy đủ, nhãn sẽ giúp tính năng của bạn rõ ràng hơn và icon sẽ giúp người dùng nhận dạng tính năng nhanh hơn và đem lại một chút cá tính cho ứng dụng của bạn.</p>

<p>{% img center /images/2016/08/06/complicate-action-should-have-label.png %}</p>

<p style="text-align:center;"> Một ví dụ trong ứng dụng Pixelmator.</p>

<h3>3. Chuyển hướng dựa vào cử chỉ <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></h3>

<p>Khi Apple giới thiệu iPhone vào năm 2007, công nghệ cảm ứng đa điểm đã thu hút sự chú ý của ngưới dùng và họ thấy rằng không những có thể chạm và nhấn vào giao diện mà còn có thể phóng to, thu nhỏ và vuốt.</p>

<p>Tương tác dùng cảm ứng đã trở nên quen thuộc hơn với người thiết kế giao diện và đã có nhiều ứng dụng được thử nghiệm sử dụng nhận dạng cử chỉ đa điểm để tương tác.</p>

<p>{% img center /images/2016/08/06/clear-app-gestures.jpg %}</p>

<p style="text-align:center;"> Chuyển hướng dựa vào cử chỉ trong ứng dụng Clear.</p>

<p>Cũng giống như trường hợp giấu điều hướng và lạm dụng các icon thay vì dùng nhãn văn bản, đôi khi các nhà thiết kế cũng bị cuốn vào việc sử dụng cử chỉ để tiết kiệm không gian màn hình ( Một khi không có biểu tượng nào thể hiện việc bạn có thể vuốt sang trái để xóa thì người dùng chẳng có cách nào để biết là nó tồn tại ). Và cũng như vấn đề về hamburger menu, tính năng nào bị giấu đi thì sẽ ít người dùng nó. Thêm nữa là phần lớn nhận dạng cử chỉ chưa được chuẩn hóa trên các ứng dụng khác nhau, đơn cử là ứng dụng email nổi tiếng cũng hành xử khá là khác nhau đối với việc bạn vuốt sang phải trên mỗi email.</p>

<p>{% img center /images/2016/08/06/apple-mail-gestures.png vuốt sang phải trên Apple mail %}</p>

<p style="text-align:center;"> Với Apple mail vuốt sang phải sẽ hiện ra tùy chọn Đánh dấu chưa đọc.</p>

<p>{% img center /images/2016/08/06/gmail-gestures.png vuốt sang phải trên Gmail %}</p>

<p style="text-align:center;"> Trong khi đó với ứng dụng Gmail thì vuốt sang phải sẽ là chuyển email sang mục lưu trữ.</p>

<p>Vậy nên hãy nhớ rằng những tính năng sử dụng nhận dạng cử chỉ là tính năng ẩn và điều đó khiến cho người dùng mất nhiều công sức để ghi nhớ &ndash; có may mắn lắm thì bạn mới có thể dạy cho cả thế giới biết vuốt sang phải có nghĩa là gì.</p>

<h3>4. Giới thiệu tính năng mới trực quan trên màn hình cho người dùng mới</h3>

<p>Onboarding, đang là chủ đề nóng trong việc thiết kế giao diện. Tính năng này tự động chạy chỉ dùng một lần khi người dùng lần đầu tiên mở dụng dụng. Phần lớn tính năng này được dùng để giới thiệu và giải thích các tính năng của chương trình một cách trực quan trên màn hình:</p>

<p>{% img center /images/2016/08/06/onboarding-overlay.png %}</p>

<p style="text-align:center;"> Một ví dụ về Onboarding</p>

<p>Nhìn thì hay nhưng thật ra thì đây là một giải pháp khá tệ đấy. Bởi vì nhiều người đôi lúc sẽ bỏ qua phần giới thiệu của bạn, họ đang muốn sử dụng ứng dụng của bạn ngay cơ mà. Thậm chí nếu họ dành thời gian xem hướng dẫn của bạn thì họ cũng sẽ nhanh chóng quên mọi thứ ngay khi đóng cửa sổ hướng dẫn đó lại. (đặc biệt là với màn hình hướng dẫn có quá nhiều thông tin). Và cuối cùng là, nếu bạn phải giải thích giao diện của mình với người dùng thì điều đó đồng nghĩa rằng giao diện bạn đang có trên ứng dụng thật sự đang có vấn đề.</p>

<p>{% img center /images/2016/08/06/ux-design-like-make-a-joke.jpg Thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa. %}</p>

<p style="text-align:center;"> Việc thiết kế giao diện giống như bạn đang kể truyện cười. Nếu bạn phải giải thích câu chuyện thì chẳng còn gì hay nữa.</p>

<p>Onboarding có thể được thiết kế theo nhiều cách khác nhau để trở nên hữu ích hơn đối với người dùng. Như với Slack, màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng.</p>

<p>{% img center /images/2016/08/06/slack-onboarding.png Slack sử màn hình chào của họ tập trung việc giới thiệu khái quát về lợi ích mang lại hơn là giới thiệu chi tiết về các tính năng %}</p>

<p>Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy. Hướng tiếp cận này cũng giúp người dùng quen dần và hiểu hơn các tính năng/ giá trị của ứng dụng.</p>

<p>{% img center /images/2016/08/06/duolingo-onboarding.jpg Duolingo thì biến Onboarding thành các bài học và cổ vũ người dùng học các bài học đấy %}</p>

<p>Bạn còn nhớ vấn đề khác nhau giữa Mailbox và AppleMail khi dùng tính năng vuốt sang phải qua email? Đây là cách hướng dẫn người dùng mới về tính năng đó: Người dùng sẽ cần xem những cử chỉ đó được thực hiện như thế nào/ở đâu trước khi thực sự bắt đầu sử dụng ứng dụng:</p>

<p>{% img center /images/2016/08/06/apple-mail-onboarding-tutor.png %}</p>

<p>Trước khi áp dụng rập khuôn sử dụng Onboarding bằng cách tạo một lớp trong suốt trên chính ứng dụng của mình để giới thiệu các tính năng và hướng dẫn cho người dùng mới, hãy nên dừng lại và thử nghĩ xem liệu người dùng nên được chào đón như thế nào cho hợp lý và bạn sẽ thấy có nhiều cách giải quyết khác hay hơn việc rập khuôn lại từ ứng dụng khác.</p>

<h3>5. Sử dụng màn hình trống</h3>

<p>Màn hình trống đôi lúc là một thứ dễ bị bỏ sót bởi các nhân viên thiết kế thiếu kinh nghiệm, tuy nhiên nó là một phần quan trong trong thiết kế ứng dụng của bạn.</p>

<p>Đôi khi bạn nghĩ rằng trang báo lỗi hay màn mình trống là cơ hội tốt để thể hiện tính sáng tạo của mình nhưng thực ra lại không như vậy.</p>

<p>Hãy xem ví dụ dưới đây của Google photos:</p>

<p>{% img center /images/2016/08/06/gphoto-empty-state.png Màn hình trống trên GPhoto %}</p>

<p>Nhìn qua thì có vẻ ổn nhưng hãy thử nhìn lại màn hình bạn sẽ thấy có một số vấn đề ở đây:</p>

<ul>
<li><p>Tại sao lại có nút tìm kiếm trong khi người dùng chưa tạo cái gì cả?</p></li>
<li><p>Tại sao hình ảnh chính trong màn hình này lại không có phản ứng gì khi tôi chạm vào?</p></li>
<li><p>Gợi ý ở màn hình trên bảo rằng &ldquo;bạn có thể tạo nội dung bằng cách sử dụng nút + ở phía trên màn hình&rdquo; và điều đó thật là vụng về, bản thân cái gợi ý ở trên nên tự bao gồm nút để tạo nội dung luôn nhỉ?</p></li>
</ul>


<p>Và như thế màn hình trống này không làm cho việc sử dụng ứng dụng dễ dàng hơn, nó không giúp người dùng hiểu rõ hơn về ứng dụng của bạn.</p>

<p>Màn hình trống sẽ làm mọi thứ dễ dàng hơn nếu nó thiết kế theo kiểu như dưới đây.</p>

<p>{% img center /images/2016/08/06/empty-state-good-example.png Một ví dụ về màn hình trống tốt %}</p>

<p>Đừng quên rằng màn hình trống (tương tự như các trang 404 trên web) không chỉ là nơi thể hiện khả năng sáng tạo và đặc tính thương hiệu mà còn có vai trò quan trọng hơn để thể hiện tính năng của chương trình. Vì vậy hãy làm cho màn hình trống trở nên trực quan hơn.</p>

<h3>6. Hãy luôn tự hỏi mọi thứ</h3>

<p>Những điều tôi chia sẽ ở đây không phải là để chỉ trích các mẫu thiết kế hay các thực nghiệm tốt nhất. Hãy nhớ rằng các mẫu thiết kế trên các ứng dụng nổi tiếng đôi lúc có đối tượng người dùng khác với ứng dụng mà bạn tạo và điều đó có nghĩa rằng không có chìa khóa vàng chung cho tất cả mọi thứ. Vì thế hay tự nghiên cứu để tạo nên một thiết kế riêng cho mình, mọi thứ cần phải được đo đếm và kiểm thử để rút ra cách giải quyết tốt nhất cho ứng dụng của mình.</p>

<p>Lược dịch từ <a href="https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570">Misused mobile UX patterns</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>UI<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Navigation menu<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Gesture based navigation<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[8 nguyên tắc trong thiết kế bot]]></title>
    <link href="http://blog.teracy.com/2016/08/05/8-nguyen-tac-trong-thiet-ket-bot/"/>
    <updated>2016-08-05T09:40:00+00:00</updated>
    <id>http://blog.teracy.com/2016/08/05/8-nguyen-tac-trong-thiet-ket-bot</id>
    <content type="html"><![CDATA[<p>{% img center /images/2016/08/05/bot-design.png Bot Design %}</p>

<p>Thiết kế UI đàm thoại<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> thu hút được nhiều sự quan tâm nhưng để chúng phát huy được hiệu quả trong thực tế thì vẫn là một vấn đề chưa rõ ràng.</p>

<p>Tuy nhiên những nguyên tắc thiết kế cơ bản có định hướng có thể giúp chúng ta thiết kế những thứ thật sự hữu dụng mà mọi người sẽ muốn dùng hàng ngày.</p>

<p>Chúng ta không thiếu những bài viết về những UI đàm thoại trong tương lai, nhưng lại có quá ít các bài viết về tính thực tiễn khi thiết kế sự tương tác của các chatbot.</p>

<p>Có vẻ như đây chính xác là những gì mà hiện tại chúng ta đang cần. Nỗ lực ban đầu khi thực hiện các chatbot đều thất bại, chủ yếu là do các chatbot phụ thuộc quá nhiều vào việc xử lý ngôn ngữ tự nhiên hoặc khả năng của A.I mà vẫn chưa làm
được. Ngoài ra người ta cũng cố gắng loại bỏ những thứ không phù hợp trong mô hình mới này.</p>

<p>Vì quá quan tâm đến công nghệ mới mà chúng ta quên đi nhân tố quan trọng nhất trong lĩnh vực này đó là con người &ndash; được cho là sẽ giao tiếp với bot.</p>

<!-- more -->


<p>Vậy chúng ta dự định thiết kế các bot như thế nào? Các bot có ích trong trường hợp nào? Nên thân thiện và đơn giản như Slackbot hay thông minh như Facebook M? Nên cho phép thoải mái nhập văn bản hay tạo ra các tùy chọn như IVR<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>? Đây là những câu hỏi không khó trả lời, nhưng thực tế chúng ta vẫn đang khám phá cách sử dụng phương tiện mới này để tạo ra những trải nghiệm thật tốt.</p>

<p>Những tình huống này đòi hỏi các quan điểm thống nhất. Khi bạn làm việc trong lĩnh vực chatbot với nhiều quan điểm khác nhau thì bạn cần phải tuân theo các nguyên tắc thiết kế thật rõ ràng.</p>

<p>(Bài viết này được đăng lần đầu trên Inside Intercom &ndash; trang web mà chúng tôi thường xuyên chia sẻ suy nghĩ của mình về thiết kế, startup và quản lý sản phẩm).</p>

<h1>Các nguyên tắc thiết kế là gì?</h1>

<p>Tất cả các sản phẩm tốt đều tuân theo các nguyên tắc có quan điểm rõ ràng và các nguyên tắc đó phải được đặt lên hàng đầu.</p>

<p>Hiểu theo nghĩa đơn giản nhất thì các nguyên tắc thiết kế là tập hợp các quan điểm được cả nhóm ủng hộ. Các nguyên tắc phải rõ ràng, không mơ hồ và là tôn chỉ để mọi người hướng đến.</p>

<p>Tạo ra các nguyên tắc thiết kế hay là cả một nghệ thuật. Nó không đơn thuần chỉ là những chân lý. Vì nếu như vậy, mọi người sẽ chỉ biết gật đầu, và chẳng giúp bạn được gì khi triển khai thực hiện.</p>

<p>Ví dụ, &ldquo;chúng tôi không làm những thiết kế quá phức tạp&rdquo; là một nguyên tắc chán kinh khủng &ndash; Thực tế sẽ không ai tranh cãi điều ngược lại. Những chân lý như vậy không thể giúp định hướng khả thi cho các quyết định của bạn.</p>

<p>Ngược lại, &ldquo;Chúng tôi thích sự đơn giản hơn là việc gì cũng muốn làm&rdquo; là một nguyên tắc thiết kế tuyệt vời. Chúng ta cũng có thể đưa ra một lập luận ngược với nguyên tắc trên đó là &ldquo;Chúng tôi bổ sung tính phức tạp để người dùng có thể tạo ra những thứ tuyệt vời hơn&rdquo;. Những nguyên tắc có quan điểm rõ ràng như vậy sẽ giúp bạn có được những quyết định thống nhất khi thiết kế.
Với định hướng như vậy, hãy cùng đưa ra một số nguyên tắc giúp chúng ta tiến bộ khi thiết kế các UI đàm thoại.</p>

<h1>Các nguyên tắc thiết kế bot</h1>

<h2>1. Không nên giả lập là con người</h2>

<p>Trò mồi chài người dùng có thể làm họ cảm thấy như mình đang bị lừa, hoặc là họ không hiểu hệ thống hoạt động như thế nào. Cả hai trường hợp này đều là những trải nghiệm người dùng không tốt. Điều đó có nghĩa là chúng ta không nên sử dụng các chỉ dẫn như &ldquo;đang đánh máy&rdquo; hay các trì hoãn giả tạo để có vẻ khiến cho bot mang nhân cách nhiều hơn. Thay vì đó, các thông điệp bot nên theo các kiểu cách khác nhau, và được dán nhãn rõ ràng để thể hiện rằng nó không phải là con người. Điều này cũng sẽ không ngăn cản chúng ta tạo ra cá tính cho bot.</p>

<h2>2. Đơn giản hóa hết mức có thể</h2>

<p>Các đàm thoại bot nên gắn với các chủ đề cụ thể và theo lộ trình đàm thoại tuyến tính, như vậy sẽ tránh được các đường rẽ nhánh phức tạp. Không nên tạo ra các A.I tự cảm nhận và chung chung. Tốt hơn là nên trình bày và giải thích những giới hạn của bot. Như vậy, các nhà thiết kế bot cũng sẽ không phải giải thích gì cho các trường hợp bị lỗi lừa bot và người dùng cũng sẽ không cảm thấy mệt mỏi với các thông điệp đàm thoại phức tạp.</p>

<h2>3. Tôn trọng phương tiện chat</h2>

<p>Lợi thế của các ứng dụng gửi tin nhắn thông minh đó là có thể loại bỏ rất nhiều ứng dụng, giao diện và làm giảm tính tương tác, thay vào đó là một UI chat đơn giản. Do đó, sẽ thật là vô nghĩa khi loanh quanh và vứt cả 1 ứng dụng vào trong một cuộc đàm thoại. Hãy giữ mọi thứ thật tự nhiên với ứng dụng đàm thoại. Mọi tương tác của bot là gọi và trả lời kèm theo các bình luận trong một luồng chat và người dùng sẽ phản hồi lại trong vùng trả lời. Các bot không thể thay đổi nội dung đàm thoại như con người. Cùng với đó, hãy sử dụng các quy ước: hiển thị một tấm thẻ được định dạng bắt mắt cho phép xem trước trang liên kết hơn là việc in ra một URL vô nghĩa trong phản hồi của bot.</p>

<h2>4. Tối ưu cho người dùng cuối</h2>

<p>Các bot nên được dùng để cải thiện trải nghiệm người dùng cuối chứ không chỉ là công cụ hỗ trợ tốt cho các đội chăm sóc khách hàng. Người thiết kế nên tự hỏi rằng: Con người có tốt hơn cho người dùng cuối không? Nếu câu trả lời là có thì bạn không nên sử dụng bot. Bot không nên làm thay những việc con người có thể làm tốt hơn, mà nên cải thiện những cái mà con người còn làm chậm chạp. Máy móc nên làm việc, con người thì nên suy nghĩ.</p>

<h2>5. Sử dụng một cách tiết kiệm</h2>

<p>Các tương tác của bot nên ngắn gọn và chính xác. Không nên có một cuộc trò chuyện kéo dài qua lại với bot, điều này sẽ làm mất thời gian của cả hai bên. Bất cứ khi nào cần quá 2 lần nhập là thấy nặng nề rồi.</p>

<h2>6. Cung cấp đường thoát</h2>

<p>Luôn luôn có lựa chọn dự phòng cho người dùng, cho phép họ bày tỏ ý định của mình như: &ldquo;Tôi muốn đợi và nói chuyện với một con người thực sự. Tôi không muốn tiếp tục nói chuyện với robot nữa.&rdquo;</p>

<h2>7. Sử dụng đầu vào có cấu trúc khi có thể</h2>

<p>Một cuộc đàm thoại mà càng có nhiều hướng đi khác nhau thì nguy cơ đi vào ngõ cụt càng lớn. Đừng đặt người dùng vào tình thế khiến họ phải đoán xem điều gì là đúng cần phải làm. Bàn phím mềm cho phép nhập một lượng ký tự nhất định và có thể tránh phải đánh máy nhiều. Ví dụ, thay vì yêu cầu người dùng cuối gõ các từ &ldquo;có&rdquo; hoặc &ldquo;không&rdquo;, hãy cho họ 2 nút tùy chọn. Hoặc xác nhận đầu vào có cấu trúc như địa chỉ email trước khi gửi. Bằng cách này, bạn có thể đưa ra được các phản hồi đúng mục đích và tránh phải xử lý các văn bản phức tạp mà đầu vào không đoán trước được.</p>

<h2>8. Mọi người đều thấy được điểm giống nhau</h2>

<p>Các bot không chỉ xuất hiện với người dùng cuối mà người thiết kế bot cũng cần phải ghi lại được các bối cảnh hội thoại &ndash; bot trả lời như thế nào và người dùng cuối phản hồi lại ra sao. Các thông điệp dài hoặc phổ biến của bot có thể hiện thị ở trạng thái đóng để quản trị viên quản lý dễ dàng hơn. Trường hợp ngoại lệ là các thông điệp bot mang tính riêng tư với quản trị viên thì cần hiển thị luôn.</p>

<h1>Tuân thủ nhưng không bị giới hạn bởi các nguyên tắc</h1>

<p>Điều quan trọng cần chú ý đó là những nguyên tắc trên chắc chắn sẽ luôn được phát triển, do khả năng mới về mặt công nghệ hoặc đơn giản là một số nguyên tắc hướng dẫn chưa đúng. Chúng ta nên chấp nhận cả hai thực tế trên.
Tuy nhiên việc nắm bắt được các nguyên tắc trên sẽ làm cho mọi thứ trở lên dễ dàng hơn. Chúng ta đã có các nguyên tắc và giờ chỉ cần áp dụng chúng một cách có hệ thống và đồng nhất. Nếu không có các nguyên tắc này, bạn chỉ có thể thực hiện các ý tưởng của mình một cách ngẫu nhiên và hi vọng nó sẽ hiệu quả như mong muốn.</p>

<p>Bài dịch từ <a href="https://medium.com/intercom-inside/8-principles-of-bot-design-51f03df1d84c#.hb10iooyq">8 principles of bot design</a></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>conversational UI (user interface)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>IVR (Interactive Voice Response) &ndash; tổng đài trả lời tự động<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Teracy Wireframe UI kit for Sketch]]></title>
    <link href="http://blog.teracy.com/2014/12/08/free-teracy-wireframe-kit-for-sketch/"/>
    <updated>2014-12-08T00:00:00+00:00</updated>
    <id>http://blog.teracy.com/2014/12/08/free-teracy-wireframe-kit-for-sketch</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/12/cover.jpg %}</p>

<p>It’s always a good idea to begin with a wireframe when beginning a new web design or mobile app project.
Wireframes can be a big time saver as they help both designers and developers come to an agreement on placement
of major UI elements. The key is to get the layout nailed down so you don&rsquo;t have to change major layout when
 detailed design elements are in place.</p>

<!-- more -->


<p>In our design process at Teracy, wireframing and mockups takes an important position. We have developed
a wireframe kit to speedup the design process and use it in our daily design workflow. Today, we are excited
 to share the version of our wireframe kit that we are using, which includes the most common UI elements
in web projects. This is the second UI kit we share to <a href="http://www.bohemiancoding.com/sketch/">Sketch</a> community, you can also check out our first freebie <a href="https://github.com/teracy-official/bootflat-ui-kit.sketch">Bootflat UI kit for Sketch</a> shared not a long time ago.</p>

<p>Here it is, hope it&rsquo;s useful for all Sketch lovers!</p>

<p><a href="https://github.com/teracyhq/wireframe">Download the Teracy Wireframe kit for Sketch</a></p>

<p>{% img center /images/2014/12/ss2.jpg %}
{% img center /images/2014/12/ss1.jpg %}</p>

<p>Features:</p>

<ul>
<li>All UI Elements are Symbols.</li>
<li>Symbols grouped by categories.</li>
<li>UI elements for mobile devices will be added in the next version.</li>
<li>Markups and annotations included.</li>
<li>Over 140 icons included.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Free Bootflat UI kit for Sketch]]></title>
    <link href="http://blog.teracy.com/2014/10/08/free-bootflat-ui-kit-for-sketch/"/>
    <updated>2014-10-08T00:00:00+00:00</updated>
    <id>http://blog.teracy.com/2014/10/08/free-bootflat-ui-kit-for-sketch</id>
    <content type="html"><![CDATA[<p>{% img center /images/2014/10/cover.png %}</p>

<p><strong><em>Why Sketch?</em></strong></p>

<p><a href="http://www.bohemiancoding.com/sketch/">Sketch</a> is a powerful tool designed entirely to do UI. It&rsquo;s a young graphic program when compared
to Photoshop but we see its user base&rsquo;s growing strong. Centered around vector design, Sketch is
getting plenty of buzz among UI designers as an alternative to Adobe&rsquo;s Creative Suite. With Sketch,
designs come out pixel perfect and in vector format, a requirement for multiple screen sizes.</p>

<!-- more -->


<p>You may not believe how much time this application have saved us when designing UI. It&rsquo;s simple,
fast and so connected to the way designers work. You definitely should give Sketch a try in your
next project. There are already a lot of articles about how Sketch excels in designing UI. Here to
name a few:</p>

<ul>
<li><a href="http://blog.mengto.com/sketch-vs-photoshop/">Sketch VS Photoshop</a></li>
<li><a href="http://blog.mengto.com/photoshop-users-how-to-switch-to-sketch/">Photoshop Users: How To Switch To Sketch</a></li>
<li><a href="https://medium.com/@jm_denis/discovering-sketch-25545f6cb161">Discovering Sketch</a></li>
</ul>


<p><strong><em>Bootflat UI Kit</em></strong></p>

<p>At the beginning, Teracy planned to develop its own UI kit and framework based on bootstrap. It&rsquo;s a
great experience but developing and maintaining the UI kit will take time. Clock&rsquo;s still ticking.
We have to release one of our ambitious products by the end of this year.
So, we&rsquo;ve come to decide on finding an open source framework that matches our flat designs.</p>

<p>And we found <a href="http://bootflat.github.io/">Bootflat</a> &ndash; an open source Flat UI kit based on Twitter Bootstrap 3 framework. For
designers, they offer a free PSD, including a set of beautiful and pure elements, which you can
use to create startup projects, websites or iOS/Android Apps. This will save a lot of developing
time.</p>

<p>There&rsquo;s still one thing that&rsquo;s bugging us though. As our company starts switching to Sketch for UI
design, this beautiful framework doesn&rsquo;t provide the .sketch file of elements, only .psd. So we
think &ldquo;OK, why not create one? Sketch community might find it helpful and it&rsquo;s also good for
creators of Bootflat.&rdquo;</p>

<p>So here it is, hope it&rsquo;s useful for Sketch lovers!</p>

<p><a href="https://github.com/teracy-official/bootflat-ui-kit.sketch">Download the Bootflat UI kit for Sketch</a></p>
]]></content>
  </entry>
  
</feed>
